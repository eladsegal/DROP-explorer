{"version":3,"sources":["api-config.js","model_components/Pane.jsx","model_components/Button.jsx","model_components/ModelIntro.jsx","model/ModelInput.jsx","model/ModelOutput.jsx","model/ModelComponent.jsx","components/Utils.js","components/file_input_button/FileInputButton.jsx","components/app/explorer-settings/dataset-loader/DatasetLocalSelector.jsx","components/app/explorer-settings/dataset-loader/DatasetListSelector.jsx","components/app/explorer-settings/dataset-loader/DatasetLoader.jsx","components/app/explorer-settings/PredictionsLoader.jsx","components/app/AnswersUtils.js","components/app/explorer-settings/SearchFilter.jsx","components/checkbox_list/CheckboxList.jsx","components/app/explorer-settings/ExplorerSettings.jsx","components/app/explorer-table/WrapDiv.jsx","components/app/explorer-table/DataUtils.js","components/app/explorer-table/ExplorerTable.jsx","components/app/App.jsx","index.js"],"names":["origin","window","location","API_ROOT","includes","replace","ResultDisplay","outputContent","outputState","this","props","placeholderTemplate","message","react_default","a","createElement","className","concat","xlinkHref","children","React","Component","PaneRight","_React$Component2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","Pane_ResultDisplay","PaneLeft","_React$Component3","Button","_this$props","enabled","onClick","type","disabled","ModelIntro","title","description","examples","passage","question","ModelInput","_this","call","handleListChange","bind","assertThisInitialized","e","target","runModel","_this2","model_components_ModelIntro","onChange","map","example","index","substring","summarizeExample","ref","x","model_components_Button","ModelOutput","answer","outputs","JSON","stringify","ModelComponent","state","responseData","inputs","setState","fetch","method","headers","Accept","Content-Type","body","then","response","json","catch","error","console","_this$state","Pane_PaneLeft","model_ModelInput","Pane_PaneRight","model_ModelOutput","mapToArray","key_name","keys","intersect","dataArr","accessor","transformToSingle","pointers","Array","length","intersection","maxIndex","agreements","i","data","currentIndex","item","reduce","sameItems","push","isChanged","changeSignals","obj","otherObj","debug","sourceName","changes","changeSignal","changed","log","join","shouldUpdate","props_updateSignals","state_updateSignals","nextProps","nextState","componentName","propsUpdated","stateUpdated","displayIndexesToViewIndex","displayIndexes","page","pageSize","returnObject","undefined","acuumulator","displayIndex","viewIndex","Math","floor","displayIndexToViewIndex","viewIndexToDisplayIndex","FileInputButton","fileInputRef","createRef","simulateClick","change","file","prevProps","prevState","current","click","files","selectedFile","style","display","id","accept","es_Button","color","size","text","name","PureComponent","DatasetLocalSelector","dataset","reader","FileReader","onloadend","array","parse","result","readAsText","file_input_button_FileInputButton","width","DatasetListSelector","toggle","dropdownOpen","datasets_names","selected","mounted","getDatasetList","getDataset","currentTarget","getAttribute","dataset_name","_this3","encodeURIComponent","_this4","Dropdown","isOpen","DropdownToggle","caret","DropdownMenu","DropdownItem","dataset-name","DatasetSelector","local","dataset_loader_DatasetLocalSelector","dataset_loader_DatasetListSelector","DatasetLoader","useLocalDatasetChange","datasetChange","useLocalDataset","onDatasetChange","toString","ListGroup","allowSourceSelection","ListGroupItem","FormGroup","check","Label","Input","use-local-dataset","checked","PredictionsLoader","predictions","split","forEach","line","noAnswerType","noPredictionType","answerTypes","getAnswerType","answerDict","answerType","span_count","date","day","month","year","getAnswerForDisplay","raw_value","isArray","toConsumableArray","sort","number_value","Number","isNaN","prepareText","toLowerCase","SearchFilter","searchTextChange","filterQuestionsChange","submit","_objectSpread","searchProps","draftSearchText","draftFilterQuestions","filterQuestions","searchText","event","newState","instantSearch","filter-questions","CheckboxList","newChecked","changedKey","changedKeyIndex","indexOf","splice","options","option","option-key","ExplorerSettings","predictionsChange","filteredAnswerTypesChange","filteredPredictionTypesChange","searchFilterChange","filteredAnswerTypes","filteredPredictionTypes","constructor","predictionTypes","predictionType","Container","fluid","CardGroup","Card","CardHeader","CardBody","dataset_loader_DatasetLoader","height","overflow","expandAllFunc","collapseAllFunc","clearSelectedAnswersFunc","checkbox_list_CheckboxList","explorer_settings_SearchFilter","explorer_settings_PredictionsLoader","WrapDiv","styled","div","_templateObject","forceTwoDecimalPlaces","num","parseFloat","round","toFixed","process_row","accumulator","row","passage_id","passage_displayIndex","reduced","qa_pairs","process_qa_pair","hasValidatedAnswers","query_id_to_displayIndex","reduced_row","DataUtils_objectSpread","passage_index","passage_id_to_displayIndex","passage_id_to_queries_displayIndexes","qa_pair","query_index","query_displayIndex","validated_answers","displayAnswer","displayValidatedAnswers","validatedAnswerTypes","validatedAnswer","query_id","filterDataHelper","internals","filteredDataPerFilter","Boolean","search","searchReudcer_rows","filteredData","hasValidPredictions","typeFilterReudcer_rows","filteredTypes","fields","missingValue","filteredDataArr","values","filter","filtersCount","every","intersectRows","intersectFilteredData","sameRows","filtered_qa_pairs","sameQuestions","assign","passageTextSearchValid","hasTextSearchValidQuestions","isQuestionTextSearchValid","some","hasQuestions","displayPrediction","typeFilterReudcer_qa_pairs","typeValid","field","arr","j","initialInternals","initialState","passagesPageSize","questionsPageSize","expanded_passage_ids","activeQuestions","questionResized","questionSorted","filterProps","ExplorerTable","renderPassageCell","renderHighlightableQuestionCell","activeQuestionChange","clearSelectedAnswers","expandAll","collapseAll","expandedChange","getExpanded","questionResizedChange","processData","filterData","getSortedData","pageChanged","passagesPageSizeChanged","questionsPageSizeChanged","passageSortedChange","questionSortedChange","setInternals","cloneDeep","tableRef","newInternals","sendClearSelectedAnswersFunc","sendExpandAllFunc","sendCollapseAllFunc","filteredAnswerTypesChanged","filteredPredictionTypesChanged","searchPropsChanged","refilteringRequired","onPredictionsTypeChanged","forceUpdate","newSorted","column","additive","newExpanded","matchingPosition","defaultExpanded","sortedData","set","otherSet","has","areSetsEqual","Set","viewIndexes","viewIndexToDisplayIndexes","newResized","_processDataHelper","keyToPredictionType","prediction","predicted_ability","f1","em","loss","processDataHelper","_filterDataHelper","getResolvedState","time","timeEnd","passage_columns","Header","Cell","resizable","qa_columns","show","main_answer","answers","answerField","Table","striped","whiteSpace","padding","borderTop","questionsCount","predictedCount","toLocaleString","es","columns","minRows","showPaginationTop","showPaginationBottom","pageSizeOptions","onPageChange","onPageSizeChange","collapseOnSortingChange","collapseOnPageChange","collapseOnDataChange","onSortedChange","expanded","onExpandedChange","SubComponent","original","sorted","resized","onResizedChange","showPagination","getTrProps","rowInfo","instance","handleOriginal","searchWords","categoryPerSearchWordIndex","highlightClassNamePerCategory","activeQuestionId","find","selectedAnswer","number","spans","searchWord","gold_0","_searchWords","_categoryPerSearchWor","explorer_table_WrapDiv","main_default","textToHighlight","highlightClassName","ExplorerTable_objectSpread","defineProperty","App","settingsChange","getClearSelectedAnswersFunc","getExpandAllFunc","getCollapseAllFunc","predictionTypesChanged","toggleMenu","navbarSticky","showNavbarImage","settings","func","Navbar","light","sticky","borderBottom","rel","href","paddingRight","marginBottom","src","alt","NavbarBrand","NavbarToggler","float","marginTop","Collapse","navbar","explorer_settings_ExplorerSettings","explorer_table_ExplorerTable","hash","vars","hashes","slice","getUrlVars","ReactDOM","render","model_ModelComponent","document","getElementById","app_App"],"mappings":"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","file":"static/js/main.6edbbdbc.chunk.js","sourcesContent":["/**\r\n * The backend always runs on port 8000. In production we also\r\n * serve the frontend from there. However, for development\r\n * we want to `npm run serve` the unminified js on port 3000.\r\n * This allows us to get the correct API root either way.\r\n */\r\n\r\nlet apiRoot;\r\n\r\nconst origin = window && window.location && window.location.origin;\r\n\r\nif (origin.includes(':3000')) {\r\n    apiRoot = origin.replace(\":3000\", \":8000\");\r\n} else {\r\n    apiRoot = origin;\r\n}\r\n\r\nexport const API_ROOT = apiRoot;\r\n","import React from 'react';\r\n\r\n\r\n/*******************************************************************************\r\n  <ResultDisplay /> Component\r\n*******************************************************************************/\r\n\r\nclass ResultDisplay extends React.Component {\r\n\r\n    render() {\r\n      const { outputState } = this.props;\r\n\r\n      const placeholderTemplate = (message) => {\r\n        return (\r\n          <div className=\"placeholder\">\r\n            <div className=\"placeholder__content\">\r\n              <svg className={`placeholder__${outputState}`}>\r\n                <use xlinkHref={`#icon__${outputState}`}></use>\r\n              </svg>\r\n              {message !== \"\" ? (\r\n                <p>{message}</p>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      let outputContent;\r\n      switch (outputState) {\r\n        case \"working\":\r\n          outputContent = placeholderTemplate(\"\");\r\n          break;\r\n        case \"received\":\r\n          outputContent = this.props.children;\r\n          break;\r\n        case \"error\":\r\n          outputContent = placeholderTemplate(\"Something went wrong. Please try again.\");\r\n          break;\r\n        default:\r\n          // outputState = \"empty\"\r\n          outputContent = placeholderTemplate(\"Run model to view results\");\r\n      }\r\n\r\n      return (\r\n        <div className={`pane__right model__output ${outputState !== \"received\" ? \"model__output--empty\" : \"\"}`}>\r\n          <div className=\"pane__thumb\"></div>\r\n          {outputContent}\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n  <PaneRight /> Component\r\n*******************************************************************************/\r\n\r\nexport class PaneRight extends React.Component {\r\n    render() {\r\n      const { outputState } = this.props;\r\n\r\n      return (\r\n        <ResultDisplay outputState={outputState}>\r\n          {this.props.children}\r\n        </ResultDisplay>\r\n      )\r\n    }\r\n}\r\n\r\n/*******************************************************************************\r\n<PaneLeft /> Component\r\n*******************************************************************************/\r\n\r\nexport class PaneLeft extends React.Component {\r\n\r\n    render () {\r\n      return (\r\n        <div className=\"pane__left model__input\">\r\n          {this.props.children}\r\n        </div>\r\n      );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\n/*******************************************************************************\r\n  <Button /> Component\r\n*******************************************************************************/\r\n\r\nclass Button extends React.Component {\r\n  render() {\r\n    const { enabled, onClick } = this.props;\r\n\r\n    return (\r\n    <button type=\"button\" disabled={!enabled} className=\"btn btn--icon-disclosure\" onClick={onClick}>Run\r\n      <svg>\r\n        <use xlinkHref=\"#icon__disclosure\"></use>\r\n      </svg>\r\n    </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\n\r\n\r\n/*******************************************************************************\r\n  <ModelIntro /> Component\r\n*******************************************************************************/\r\n\r\nclass ModelIntro extends React.Component {\r\n    render() {\r\n\r\n      const { title, description } = this.props;\r\n\r\n      return (\r\n        <div>\r\n          <h2>\r\n            <span>{title}</span>\r\n          </h2>\r\n          <p>{description}</p>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default ModelIntro;\r\n","import React from 'react';\r\nimport Button from '../model_components/Button'\r\nimport ModelIntro from '../model_components/ModelIntro'\r\n\r\n\r\n// TODO: These are some quickly-accessible examples to try out with your model.  They will get\r\n// added to the select box on the demo page, and will auto-populate your input fields when they\r\n// are selected.  The names here need to match what's read in `handleListChange` below.\r\n\r\nconst examples = [\r\n  {\r\n    passage: \"passage for example 1\",\r\n    question: \"question for example 1\"\r\n  },\r\n  {\r\n    passage: \"passage for example 2\",\r\n    question: \"question for example 2\"\r\n  },\r\n  {\r\n    passage: \"passage for example 3\",\r\n    question: \"question for example 3\"\r\n  }\r\n];\r\n\r\n// TODO: This determines what text shows up in the select box for each example.  The input to\r\n// this function will be one of the items from the `examples` list above.\r\nfunction summarizeExample(example) {\r\n  return example.passage.substring(0, 60);\r\n}\r\n\r\n// TODO: You can give a model name and description that show up in your demo.\r\nconst title = \"Your Model Name\";\r\nconst description = (\r\n  <span>\r\n  If you want a description of what this demo is showing, you can put that here.  Or just leave this\r\n  description empty if you don't need it.\r\n  </span>\r\n);\r\n\r\nclass ModelInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleListChange = this.handleListChange.bind(this);\r\n    this.onClick = this.onClick.bind(this);\r\n  }\r\n\r\n  handleListChange(e) {\r\n    if (e.target.value !== \"\") {\r\n      // TODO: This gets called when the select box gets changed.  You want to set the values of\r\n      // your input boxes with the content in your examples.\r\n      this.passage.value = examples[e.target.value].passage\r\n      this.question.value = examples[e.target.value].question\r\n    }\r\n  }\r\n\r\n  onClick() {\r\n    const { runModel } = this.props;\r\n\r\n    // TODO: You need to map the values in your input boxes to json values that get sent to your\r\n    // predictor.  The keys in this dictionary need to match what your predictor is expecting to receive.\r\n    runModel({passage: this.passage.value, question: this.question.value});\r\n  }\r\n\r\n  render() {\r\n\r\n    const { outputState } = this.props;\r\n\r\n    return (\r\n      <div className=\"model__content\">\r\n        <ModelIntro title={title} description={description} />\r\n        <div className=\"form__instructions\"><span>Enter text or</span>\r\n          <select disabled={outputState === \"working\"} onChange={this.handleListChange}>\r\n              <option value=\"\">Choose an example...</option>\r\n              {examples.map((example, index) => {\r\n                return (\r\n                    <option value={index} key={index}>{summarizeExample(example) + \"...\"}</option>\r\n                );\r\n              })}\r\n          </select>\r\n        </div>\r\n\r\n       {/*\r\n         * TODO: This is where you add your input fields.  You shouldn't have to change any of the\r\n         * code in render() above here.  We're giving a couple of example inputs here, one for a\r\n         * larger piece of text, like a paragraph (the `textarea`) and one for a shorter piece of\r\n         * text, like a question (the `input`).  You'll probably want to change the variable names\r\n         * here to match the input variable names in your model.\r\n         */}\r\n\r\n        <div className=\"form__field\">\r\n          <label>Passage</label>\r\n          <textarea ref={(x) => this.passage = x} type=\"text\"></textarea>\r\n        </div>\r\n        <div className=\"form__field\">\r\n          <label>Question</label>\r\n          <input ref={(x) => this.question = x} type=\"text\"/>\r\n        </div>\r\n\r\n       {/* You also shouldn't have to change anything below here. */}\r\n\r\n        <div className=\"form__field form__field--btn\">\r\n          <Button enabled={outputState !== \"working\"} onClick={this.onClick} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModelInput;\r\n","import React from 'react';\r\n\r\nclass ModelOutput extends React.Component {\r\n  render() {\r\n\r\n    const { outputs } = this.props;\r\n\r\n    // TODO: `outputs` will be the json dictionary returned by your predictor.  You can pull out\r\n    // whatever you want here and visualize it.  We're giving some examples of different return\r\n    // types you might have.  Change names for data types you want, and delete anything you don't\r\n    // need.\r\n    var answer = outputs['answer'];\r\n\r\n    return (\r\n      <div className=\"model__content\">\r\n\r\n       {/*\r\n         * TODO: This is where you display your output.  You can show whatever you want, however\r\n         * you want.  We've got a few examples, of text-based output, and of visualizing model\r\n         * internals using heat maps.\r\n         */}\r\n\r\n        <div className=\"form__field\">\r\n          <label>Answer</label>\r\n          <div className=\"model__content__summary\"><pre>{ JSON.stringify(answer, null, 2) }</pre></div>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModelOutput;\r\n","import React from 'react';\r\nimport { API_ROOT } from '../api-config';\r\nimport {PaneLeft, PaneRight} from '../model_components/Pane'\r\nimport ModelInput from './ModelInput'\r\nimport ModelOutput from './ModelOutput'\r\n\r\n\r\nclass ModelComponent extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        outputState: \"empty\",  // valid values: \"working\", \"empty\", \"received\", \"error\"\r\n        responseData: null\r\n      };\r\n\r\n      this.runModel = this.runModel.bind(this);\r\n    }\r\n\r\n    runModel(inputs) {\r\n      this.setState({outputState: \"working\"});\r\n\r\n      fetch(`${API_ROOT}/predict`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(inputs)\r\n      }).then((response) => {\r\n        return response.json();\r\n      }).then((json) => {\r\n        this.setState({responseData: json, outputState: 'received'})\r\n      }).catch((error) => {\r\n        console.error(error);\r\n        this.setState({outputState: \"error\"});\r\n      });\r\n    }\r\n\r\n    render() {\r\n      const { outputState, responseData } = this.state;\r\n\r\n      return (\r\n        <div className=\"pane-container\">\r\n          <div className=\"pane model\">\r\n            <PaneLeft>\r\n              <ModelInput runModel={this.runModel} outputState={this.state.outputState}/>\r\n            </PaneLeft>\r\n            <PaneRight outputState={outputState}>\r\n              <ModelOutput outputs={responseData}/>\r\n            </PaneRight>\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n    }\r\n}\r\n\r\nexport default ModelComponent;\r\n","export function mapToArray(json, key_name) {\r\n    return Object.keys(json).map(function(key) {\r\n        json[key][key_name] = key;\r\n        return json[key];\r\n    });\r\n}\r\n\r\nexport function intersect(dataArr, accessor, transformToSingle) {\r\n    const pointers = Array.apply(null, {length: dataArr.length}).map(() => 0);\r\n\r\n    const intersection = [];\r\n    let maxIndex = 0;\r\n    let agreements = 0;\r\n    while (true) {\r\n        while (agreements < dataArr.length) {\r\n            for (let i=0; i < dataArr.length; i++) {\r\n                const data = dataArr[i];\r\n        \r\n                let currentIndex = accessor(data[pointers[i]]);\r\n                while (currentIndex < maxIndex) {\r\n                    pointers[i]++;\r\n                    if (pointers[i] === data.length) {\r\n                        return intersection;\r\n                    }\r\n    \r\n                    currentIndex = accessor(data[pointers[i]]);\r\n                }\r\n                if (currentIndex > maxIndex) {\r\n                    maxIndex = currentIndex;\r\n                    agreements = 1;\r\n                } else {\r\n                    agreements++;\r\n                }\r\n            }\r\n        }\r\n\r\n        let sameItems = dataArr.reduce((sameItems, data, i) => {\r\n            sameItems.push(data[pointers[i]])\r\n            return sameItems;\r\n        }, [])\r\n\r\n        let item = transformToSingle(sameItems);\r\n        if (item) {\r\n            intersection.push(item);\r\n        }\r\n        maxIndex += 1;\r\n        agreements = 0;\r\n    }\r\n}\r\n\r\nexport function areSetsEqual(set, otherSet) {\r\n    if (set.size !== otherSet.size) return false;\r\n    for (let item in set) {\r\n        if (!otherSet.has(item)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function isChanged(changeSignals, obj, otherObj, debug, sourceName) {\r\n    const changes = []\r\n    for (let i = 0; i < changeSignals.length; i++) {\r\n        const changeSignal = changeSignals[i];\r\n        if (obj[changeSignal] !== otherObj[changeSignal]) {\r\n            if (debug) {\r\n                changes.push(changeSignal);\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    if (debug) {\r\n        let changed = changes.length > 0;\r\n\r\n        if (changed) {\r\n            console.log(`${sourceName} Caused update: ${changes.join(', ')}`);\r\n        }\r\n        return changed;\r\n    }\r\n}\r\n\r\nexport function shouldUpdate(props_updateSignals, state_updateSignals, props, state, nextProps, nextState, debug, componentName) {\r\n    \r\n    const propsUpdated = isChanged(props_updateSignals, props, nextProps, debug, `[${componentName}][props]`)\r\n    const stateUpdated = isChanged(state_updateSignals, state, nextState, debug, `[${componentName}][state]`)\r\n\r\n    return propsUpdated || stateUpdated;\r\n}\r\n\r\nexport function displayIndexToViewIndex(displayIndex, page, pageSize) {\r\n    if (Math.floor(displayIndex / pageSize) === page) {\r\n        const viewIndex = displayIndex % pageSize;\r\n        return viewIndex;\r\n    }\r\n}\r\n\r\nexport function displayIndexesToViewIndex(displayIndexes, page, pageSize, returnObject=false) {\r\n    return displayIndexes.reduce((acuumulator, displayIndex) => {\r\n        const viewIndex = displayIndexToViewIndex(displayIndex, page, pageSize)\r\n        if (viewIndex !== undefined) {\r\n            if (returnObject) {\r\n                acuumulator[viewIndex] = true;\r\n            } else {\r\n                acuumulator.push(viewIndex)\r\n            }\r\n        }\r\n        return acuumulator;\r\n    }, returnObject ? {} : []);\r\n}\r\n\r\nexport function viewIndexToDisplayIndex(viewIndex, page, pageSize) {\r\n    const displayIndex = (pageSize * page) + viewIndex;\r\n    return displayIndex;\r\n}\r\n\r\nexport function viewIndexToDisplayIndexes(viewIndexes, page, pageSize, returnObject=false) {\r\n    return viewIndexes.reduce((acuumulator, viewIndex) => {\r\n        const displayIndex = viewIndexToDisplayIndex(viewIndex, page, pageSize)\r\n        if (returnObject) {\r\n            acuumulator[displayIndex] = true;\r\n        } else {\r\n            acuumulator.push(displayIndex)\r\n        }\r\n        return acuumulator;\r\n    }, returnObject ? {} : []);\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Button\r\n} from 'reactstrap';\r\n\r\nclass FileInputButton extends React.PureComponent {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.fileInputRef = React.createRef();\r\n\t\tthis.simulateClick = this.simulateClick.bind(this);\r\n\t\tthis.change = this.change.bind(this);\r\n\t\tthis.state = {\r\n\t\t\tfile: undefined\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tif (prevState.file !== this.state.file) {\r\n\t\t\tthis.props.onChange(this.state.file);\r\n\t\t}\r\n\t}\r\n\r\n\tsimulateClick() {\r\n\t\tthis.fileInputRef.current.click();\r\n\t}\r\n\r\n    change(files) {\r\n\t\tlet selectedFile;\r\n        if (files.length > 0) {\r\n            const file = files[0]\r\n            if (file) {\r\n\t\t\t\tselectedFile = file;\r\n            }\r\n\t\t}\r\n\r\n\t\tthis.setState({ \r\n\t\t\tfile: selectedFile\r\n\t\t});\r\n    }\r\n\r\n  \trender() {      \r\n\t\treturn <div>\r\n\t\t\t<input ref={this.fileInputRef} style={{'display': 'none'}} type='file' id='file' accept={this.props.accept} onChange={ (e) => this.change(e.target.files) } />\r\n\t\t\t<Button style={this.props.style} color={this.props.color} size={this.props.size} onClick={this.simulateClick}>\r\n\t\t\t\t{this.props.text}\r\n\t\t\t</Button>\r\n\t\t\t{this.state.file ? this.state.file.name : ''}\r\n\t\t</div>\r\n  }\r\n}\r\n\r\nexport default FileInputButton;\r\n","import React from 'react';\r\nimport { mapToArray } from '../../../Utils'\r\nimport FileInputButton from '../../../file_input_button/FileInputButton';\r\n\r\nclass DatasetLocalSelector extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.change = this.change.bind(this);\r\n        this.state = {\r\n            dataset: undefined\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.dataset !== this.state.dataset) {\r\n            this.props.onChange(this.state.dataset);\r\n        }\r\n    }\r\n\r\n    change(file) {\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onloadend = (e) => {\r\n                const array = mapToArray(JSON.parse(e.target.result), 'passage_id');\r\n                this.setState({ \r\n                    dataset: array \r\n                });\r\n            };\r\n            reader.readAsText(file);\r\n        } else {\r\n            this.setState({ \r\n                dataset: undefined \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <FileInputButton accept='.json' text='Choose File' size='md' color='primary' style={{width: '100%'}}\r\n                onChange={this.change}/>\r\n    }\r\n}\r\n\r\nexport default DatasetLocalSelector;\r\n","import React from 'react';\r\nimport { API_ROOT } from '../../../../api-config';\r\nimport { mapToArray } from '../../../Utils';\r\nimport {\r\n    Dropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem\r\n} from 'reactstrap';\r\n\r\nclass DatasetListSelector extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggle = this.toggle.bind(this);\r\n        this.change = this.change.bind(this);\r\n        this.state = {\r\n            dropdownOpen: false,\r\n            datasets_names: [],\r\n            selected: undefined\r\n        };\r\n    }\r\n\r\n    toggle() {\r\n        this.setState(prevState => ({\r\n          dropdownOpen: !prevState.dropdownOpen\r\n        }));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.mounted = true;\r\n        this.getDatasetList();\r\n    }\r\n    \r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.selected !== this.state.selected) {\r\n            this.props.onChange(undefined);\r\n            this.getDataset(this.state.selected);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.mounted = false;\r\n    }\r\n\r\n    change(e) {\r\n        this.setState({selected: e.currentTarget.getAttribute(\"dataset-name\")});\r\n    }\r\n\r\n    getDatasetList() {\r\n        fetch(`${API_ROOT}/dataset-list`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            } \r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((json) => {\r\n            if (this.mounted) {\r\n                this.setState({datasets_names: json, selected: json.length > 0 ? json[0] : undefined})\r\n            }\r\n        }).catch((error) => {\r\n            console.error(error);\r\n        });\r\n    }\r\n\r\n    getDataset(dataset_name) {\r\n        if (dataset_name) {\r\n\r\n            fetch(`${API_ROOT}/dataset?name=${encodeURIComponent(dataset_name)}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                } \r\n            }).then((response) => {\r\n                return response.json();\r\n            }).then((json) => {\r\n                const array = mapToArray(json, 'passage_id')\r\n                this.props.onChange(array);\r\n            }).catch((error) => {\r\n                console.error(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const datasets_names = this.state.datasets_names;\r\n\r\n        return (\r\n          <Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggle}>\r\n            <DropdownToggle color=\"primary\" caret style={{width: '100%'}}>\r\n                {this.state.selected ? this.state.selected : \"Select...\"}\r\n            </DropdownToggle>\r\n            <DropdownMenu>\r\n                {datasets_names.map(dataset_name => <DropdownItem onClick={this.change} key={dataset_name} dataset-name={dataset_name}>{dataset_name}</DropdownItem>)}\r\n            </DropdownMenu>\r\n          </Dropdown>\r\n        );\r\n      }\r\n}\r\n\r\nexport default DatasetListSelector;\r\n","import React from 'react';\r\nimport DatasetLocalSelector from './DatasetLocalSelector';\r\nimport DatasetListSelector from './DatasetListSelector';\r\nimport {\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Input,\r\n    FormGroup,\r\n    Label\r\n} from 'reactstrap';\r\n\r\nclass DatasetLoader extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.useLocalDatasetChange = this.useLocalDatasetChange.bind(this);\r\n        this.datasetChange = this.datasetChange.bind(this);\r\n        this.state = {\r\n            dataset: undefined,\r\n            useLocalDataset: this.props.useLocalDataset\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.dataset !== this.state.dataset) {\r\n            this.props.onDatasetChange(this.state.dataset);\r\n        }\r\n    }\r\n\r\n    useLocalDatasetChange(e) {\r\n        this.setState({ \r\n            useLocalDataset: e.currentTarget.getAttribute('use-local-dataset') !== true.toString(),\r\n            dataset: undefined\r\n        });\r\n    }\r\n\r\n    datasetChange(dataset) {\r\n        this.setState({ dataset: dataset })\r\n    }\r\n\r\n    render() {\r\n        return <ListGroup>\r\n                {this.props.allowSourceSelection ? <ListGroupItem>\r\n                    <FormGroup check>\r\n                        <Label check>\r\n                            <Input type=\"checkbox\" \r\n                            onChange={this.useLocalDatasetChange}\r\n                            use-local-dataset={(this.state.useLocalDataset && \r\n                                this.state.useLocalDataset.toString()) || false.toString()} \r\n                            checked={this.state.useLocalDataset || false} \r\n                            />Use Local Dataset\r\n                        </Label>\r\n                    </FormGroup>\r\n                </ListGroupItem> : null}\r\n                <ListGroupItem>\r\n                    <DatasetSelector onChange={this.datasetChange} local={this.state.useLocalDataset}/>\r\n                </ListGroupItem>\r\n            </ListGroup>\r\n    }\r\n}\r\n\r\nfunction DatasetSelector(props) {\r\n    if (props.local) {\r\n        return <DatasetLocalSelector onChange={props.onChange} />\r\n    }\r\n    return <DatasetListSelector onChange={props.onChange} />\r\n}\r\n\r\nexport default DatasetLoader;\r\n","import React from 'react';\r\nimport FileInputButton from '../../file_input_button/FileInputButton';\r\n\r\nclass PredictionsLoader extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.change = this.change.bind(this);\r\n        this.state = {\r\n            predictions: undefined\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.predictions !== this.state.predictions) {\r\n            this.props.onChange(this.state.predictions);\r\n        }\r\n    }\r\n\r\n    change(file) {\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onloadend = (e) => {\r\n                const predictions = [];\r\n                e.target.result.split('\\n').forEach(line => {\r\n                    if (line) {\r\n                        predictions.push(JSON.parse(line));\r\n                    }\r\n                });\r\n                this.setState({ \r\n                    predictions: predictions \r\n                });\r\n            };\r\n            reader.readAsText(file);\r\n        } else {\r\n            this.setState({ \r\n                predictions: undefined \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <FileInputButton accept='.json, .jsonl' text='Choose File' size='md' color='primary' style={{width: '100%'}}\r\n        onChange={this.change}/>\r\n    }\r\n}\r\n\r\nexport default PredictionsLoader;\r\n","\r\nexport const noAnswerType = {'key': 'none', 'value': 'None'};\r\nexport const noPredictionType = {'key': 'none', 'value': 'None'};\r\nexport const answerTypes = [\r\n    {'key': 'multi_span', 'value': 'Multi Span', 'accessor': 'spans'},\r\n    {'key': 'single_span', 'value': 'Single Span', 'accessor': 'spans'},\r\n    {'key': 'number', 'value': 'Number', 'accessor': 'number'},\r\n    {'key': 'date', 'value': 'Date', 'accessor': 'date'}\r\n];\r\n\r\nexport function getAnswerType(answerDict) {\r\n    let answerType = noAnswerType;\r\n\r\n    const span_count = answerDict['spans'].length\r\n    if (span_count > 0) {\r\n        if (span_count === 1) {\r\n            answerType = answerTypes[1]\r\n        } else {\r\n            answerType = answerTypes[0]\r\n        }\r\n    }\r\n    else if (answerDict['number']) {\r\n        answerType = answerTypes[2]\r\n    } else {\r\n        const date = answerDict['date']\r\n        if (date && (date.day || date.month || date.year)) {\r\n            answerType = answerTypes[3]\r\n        }\r\n    }\r\n    return answerType;\r\n}\r\n\r\nexport function getAnswerForDisplay(raw_value) {\r\n    let value = raw_value;\r\n    if (Array.isArray(value) && value.length === 1) {\r\n        value = value[0];\r\n    } else if (typeof value === 'object') {\r\n        if (Array.isArray(value)) {\r\n            value = [...value].sort().join(', ')\r\n        } else {\r\n            value = JSON.stringify(value, null, 2);\r\n        }\r\n    } else {\r\n        const number_value = Number(value)\r\n        if (!isNaN(number_value)) {\r\n            value = number_value\r\n        }\r\n    }\r\n    return value;\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Input,\r\n    FormGroup,\r\n    Label,\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Button\r\n} from 'reactstrap';\r\n\r\nclass SearchFilter extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchTextChange = this.searchTextChange.bind(this);\r\n        this.filterQuestionsChange = this.filterQuestionsChange.bind(this);\r\n        this.submit = this.submit.bind(this);\r\n        this.state = { \r\n            ...this.props.searchProps,\r\n            draftSearchText: '',\r\n            draftFilterQuestions: this.props.searchProps.filterQuestions\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.searchText !== this.state.searchText || \r\n            prevState.filterQuestions !== this.state.filterQuestions) {\r\n            this.props.onChange({\r\n                searchText: this.state.searchText,\r\n                filterQuestions: this.state.filterQuestions\r\n            });\r\n        }\r\n    }\r\n\r\n    searchTextChange(event) {\r\n        const newState = { draftSearchText: event.target.value }\r\n        if (this.props.instantSearch) {\r\n            newState.searchText = prepareText(newState.draftSearchText);\r\n        }\r\n        this.setState(newState);\r\n    }\r\n\r\n    filterQuestionsChange(e) {\r\n        const filterQuestions = e.currentTarget.getAttribute('filter-questions') !== true.toString();\r\n        const newState = { draftFilterQuestions: filterQuestions }\r\n        if (this.props.instantSearch) {\r\n            newState.filterQuestions = newState.draftFilterQuestions;\r\n        }\r\n        this.setState(newState);\r\n    }\r\n\r\n    submit(event) {\r\n        this.setState({ \r\n            searchText: prepareText(this.state.draftSearchText),\r\n            filterQuestions: this.state.draftFilterQuestions\r\n        });\r\n    }\r\n\r\n    render() { \r\n            return <div>\r\n                <ListGroup>\r\n                    <ListGroupItem>\r\n                        <Input type='text' id='searchBox' value={this.state.draftSearchText} onChange={this.searchTextChange} />\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                        <FormGroup check>\r\n                            <Label check>\r\n                                <Input type=\"checkbox\" \r\n                                onChange={this.filterQuestionsChange}\r\n                                filter-questions={(this.state.draftFilterQuestions && \r\n                                    this.state.draftFilterQuestions.toString()) || false.toString()} \r\n                                checked={this.state.draftFilterQuestions || false} \r\n                                />Filter Questions\r\n                            </Label>\r\n                        </FormGroup>\r\n                    </ListGroupItem>\r\n                </ListGroup>\r\n                {!this.props.instantSearch ? \r\n                <ListGroup className='list-group-horizontal mt-1'>\r\n                    <ListGroupItem style={{width: '100%'}}>\r\n                        Searched{this.state.filterQuestions ? ' (Filter Questions)': ''}: <span className='text-info'>{this.state.searchText}</span>\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                        <Button color='primary' onClick={this.submit}>Submit</Button>\r\n                    </ListGroupItem>\r\n                </ListGroup> : null}\r\n            </div>;\r\n    }\r\n}\r\n\r\nfunction prepareText(text) {\r\n    return text.toLowerCase();\r\n}\r\n\r\nexport default SearchFilter;","import React from 'react';\r\nimport {\r\n    Input,\r\n    FormGroup,\r\n    Label\r\n} from 'reactstrap';\r\nimport { isChanged } from '../Utils';\r\n\r\nclass CheckboxList extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.change = this.change.bind(this);\r\n        this.state = { \r\n            checked: this.props.checked\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (isChanged(['checked'], prevProps, this.props)) {\r\n            this.setState({ checked: this.props.checked }, () => {\r\n                this.props.onChange(this.state.checked)\r\n            });\r\n        }\r\n    }\r\n\r\n    change(e) {\r\n        const changedKey = e.currentTarget.getAttribute('option-key');\r\n        const changedKeyIndex = this.state.checked.indexOf(changedKey);\r\n        let newChecked;\r\n        if (changedKeyIndex !== -1) {\r\n            newChecked = [...this.state.checked];\r\n            newChecked.splice(changedKeyIndex, 1);\r\n        } else {\r\n            newChecked = [...this.state.checked, changedKey];\r\n        }\r\n        this.setState({ checked: newChecked }, () => this.props.onChange(this.state.checked));\r\n    }\r\n\r\n    render() {\r\n        return this.props.options.map(option => {\r\n            return <FormGroup check key={option.key}>\r\n                        <Label check>\r\n                            <Input type=\"checkbox\" \r\n                            onChange={this.change}\r\n                            option-key={option.key}\r\n                            checked={(this.state.checked && \r\n                                this.state.checked.includes(option.key)) || \r\n                                false} \r\n                            />{option.value}\r\n                        </Label>\r\n                    </FormGroup>\r\n        });\r\n    }\r\n}\r\n \r\nexport default CheckboxList;","import React from 'react';\r\nimport DatasetLoader from './dataset-loader/DatasetLoader';\r\nimport PredictionsLoader from './PredictionsLoader';\r\nimport {\r\n    ListGroup,\r\n    ListGroupItem,\r\n    CardGroup,\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    Button,\r\n    Container\r\n} from 'reactstrap';\r\nimport { shouldUpdate, isChanged } from '../../Utils';\r\nimport { answerTypes } from '../AnswersUtils';\r\nimport SearchFilter from './SearchFilter';\r\nimport CheckboxList from '../../checkbox_list/CheckboxList';\r\n\r\nconst props_updateSignals = ['predictionTypes']\r\nconst state_updateSignals = ['dataset', 'predictions', 'filteredAnswerTypes', 'filteredPredictionTypes', 'searchProps']\r\nclass ExplorerSettings extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.datasetChange = this.datasetChange.bind(this);\r\n        this.predictionsChange = this.predictionsChange.bind(this);\r\n        this.filteredAnswerTypesChange = this.filteredAnswerTypesChange.bind(this);\r\n        this.filteredPredictionTypesChange = this.filteredPredictionTypesChange.bind(this);\r\n        this.searchFilterChange = this.searchFilterChange.bind(this);\r\n        this.state = {\r\n            filteredAnswerTypes: this.props.filteredAnswerTypes,\r\n            filteredPredictionTypes: this.props.filteredPredictionTypes,\r\n            searchProps: this.props.searchProps\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        const update = shouldUpdate(props_updateSignals, state_updateSignals, \r\n            this.props, this.state, \r\n            nextProps, nextState, \r\n            true, this.constructor.name);\r\n        return update;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (isChanged(['predictionTypes'], prevProps, this.props)) {\r\n            this.setState({ filteredPredictionTypes: this.props.predictionTypes.map(predictionType => predictionType.key) });\r\n        }\r\n        this.props.onChange(this.state);\r\n    }\r\n\r\n    datasetChange(dataset) {\r\n        this.setState({ dataset });\r\n    }\r\n\r\n    predictionsChange(predictions) {\r\n        this.setState({ predictions });\r\n    }\r\n\r\n    filteredAnswerTypesChange(filteredAnswerTypes) {\r\n        this.setState({ filteredAnswerTypes });\r\n    }\r\n    \r\n    filteredPredictionTypesChange(filteredPredictionTypes) {\r\n        this.setState({ filteredPredictionTypes });\r\n    }\r\n\r\n    searchFilterChange(searchProps) {\r\n        this.setState({ searchProps });\r\n    }\r\n\r\n    render() {\r\n        return <Container className='ml-0' fluid>\r\n            <CardGroup className='row'>\r\n                <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Dataset</CardHeader>\r\n                    <CardBody>\r\n                        <DatasetLoader onDatasetChange={this.datasetChange} \r\n                                        useLocalDataset={this.props.useLocalDataset} \r\n                                        allowSourceSelection={this.props.allowSourceSelection} />\r\n                    </CardBody>\r\n                </Card>\r\n                <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Table Operations</CardHeader>\r\n                    <CardBody style={{height: 0, overflow: 'auto'}}>\r\n                        <ListGroup>\r\n                            <ListGroupItem>\r\n                                <Button color='primary' size='sm' style={{width: '100%'}} onClick={() => {\r\n                                    if (this.props.expandAllFunc) {\r\n                                        this.props.expandAllFunc()\r\n                                    }\r\n                                }}>EXPAND ALL\r\n                                </Button>\r\n                            </ListGroupItem>\r\n                            <ListGroupItem>\r\n                                <Button color='primary' size='sm' style={{width: '100%'}} onClick={() => {\r\n                                    if (this.props.collapseAllFunc) {\r\n                                        this.props.collapseAllFunc()\r\n                                    }\r\n                                }}>COLLAPSE ALL\r\n                                </Button>\r\n                            </ListGroupItem>\r\n                            <ListGroupItem>\r\n                                <Button color='primary' size='sm' style={{width: '100%'}} onClick={() => {\r\n                                    if (this.props.clearSelectedAnswersFunc) {\r\n                                        this.props.clearSelectedAnswersFunc()\r\n                                    }\r\n                                }}>CLEAR SELECTED ANSWERS\r\n                                </Button>\r\n                            </ListGroupItem>\r\n                        </ListGroup>\r\n                    </CardBody>\r\n                </Card>\r\n                <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Filter Answer Type</CardHeader>\r\n                    <CardBody>\r\n                        <CheckboxList onChange={this.filteredAnswerTypesChange} checked={this.state.filteredAnswerTypes} options={answerTypes}></CheckboxList>\r\n                    </CardBody>\r\n                </Card>\r\n                <Card className='col-sm-6 p-0'>\r\n                    <CardHeader>Search</CardHeader>\r\n                    <CardBody>\r\n                        <SearchFilter onChange={this.searchFilterChange} \r\n                        instantSearch={this.props.instantSearch} searchProps={this.props.searchProps} />\r\n                    </CardBody>\r\n                </Card>\r\n            </CardGroup>\r\n            <CardGroup className='row'>\r\n                <Card className='col-sm-2 p-0'>\r\n                        <CardHeader>Predictions</CardHeader>\r\n                        <CardBody>\r\n                            <PredictionsLoader onChange={this.predictionsChange} />\r\n                        </CardBody>\r\n                </Card>\r\n                {this.state.predictions ? <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Prediction Head</CardHeader>\r\n                    <CardBody>\r\n                        <CheckboxList onChange={this.filteredPredictionTypesChange} checked={this.state.filteredPredictionTypes} options={this.props.predictionTypes}></CheckboxList>\r\n                    </CardBody>\r\n                </Card> : null}\r\n            </CardGroup>\r\n        </Container>\r\n    }\r\n}\r\n\r\nexport default ExplorerSettings;","import styled from 'styled-components';\r\n\r\nconst WrapDiv = styled.div`\r\n    white-space: pre-wrap;       /* css-3 */\r\n    white-space: -moz-pre-wrap;  /* Mozilla, since 1999 */\r\n    white-space: -pre-wrap;      /* Opera 4-6 */\r\n    white-space: -o-pre-wrap;    /* Opera 7 */\r\n    word-wrap: break-word;       /* Internet Explorer 5.5+ */\r\n`;\r\n\r\nexport default WrapDiv;","import { answerTypes, getAnswerType, getAnswerForDisplay,\r\n    noAnswerType, noPredictionType } from '../AnswersUtils';\r\nimport { intersect } from '../../Utils';\r\n\r\nexport function processDataHelper(dataset, predictions) {\r\n\r\n    let hasValidatedAnswers = false;\r\n    let hasValidPredictions = false;\r\n    let passage_id_to_displayIndex = {};\r\n    let passage_id_to_queries_displayIndexes = {};\r\n    let predictionTypes = []\r\n    let data = [];\r\n    if (dataset) {\r\n        const reduced = dataset.reduce(process_row, {\r\n            data: [],\r\n            hasValidatedAnswers: false,\r\n            passage_id_to_displayIndex: {},\r\n            passage_id_to_queries_displayIndexes: {}\r\n        });\r\n        data = reduced.data;\r\n        hasValidatedAnswers = reduced.hasValidatedAnswers;\r\n        passage_id_to_displayIndex = reduced.passage_id_to_displayIndex;\r\n        passage_id_to_queries_displayIndexes = reduced.passage_id_to_queries_displayIndexes;\r\n\r\n        if (predictions) {\r\n            hasValidPredictions = true;\r\n            const keyToPredictionType = {}\r\n            for (let i=0; i < predictions.length; i++) {\r\n                const prediction = predictions[i];\r\n\r\n                const passage_id = prediction.passage_id;\r\n                const query_id = prediction.query_id;\r\n\r\n                const passage_displayIndex =passage_id_to_displayIndex[passage_id];\r\n                if (passage_displayIndex !== undefined) {\r\n                    const row = data[passage_displayIndex];\r\n\r\n                    const query_displayIndex = passage_id_to_queries_displayIndexes[passage_id][query_id];\r\n                    if (query_displayIndex !== undefined) {\r\n                        const qa_pair = row.qa_pairs[passage_id_to_queries_displayIndexes[passage_id][query_id]]\r\n\r\n                        let predictionType = keyToPredictionType[prediction.predicted_ability]\r\n                        if (!predictionType) {\r\n                            predictionType = keyToPredictionType[prediction.predicted_ability] = {\r\n                                'key': prediction.predicted_ability, \r\n                                'value': prediction.predicted_ability\r\n                            };\r\n                            predictionTypes.push(predictionType);\r\n                        }\r\n\r\n                        qa_pair.prediction = prediction.answer.value;\r\n                        qa_pair.displayPrediction = getAnswerForDisplay(qa_pair.prediction).toString();\r\n                        qa_pair.predictionType = predictionType;\r\n                        qa_pair.f1 = forceTwoDecimalPlaces(prediction.f1);\r\n                        qa_pair.em = forceTwoDecimalPlaces(prediction.em);\r\n                        qa_pair.loss = forceTwoDecimalPlaces(prediction.loss);\r\n                    } else {\r\n                        hasValidPredictions = false;\r\n                        break;\r\n                    }\r\n                }\r\n                else {\r\n                    hasValidPredictions = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    predictionTypes.sort()\r\n    predictionTypes.push(noAnswerType)\r\n\r\n    return {\r\n        data,\r\n        hasValidatedAnswers,\r\n        hasValidPredictions,\r\n        predictionTypes\r\n    };\r\n}\r\n\r\nfunction forceTwoDecimalPlaces(num) {\r\n    return num !== undefined ? parseFloat(Math.round(num * 100) / 100).toFixed(2) : undefined;\r\n}\r\n\r\nfunction process_row(accumulator, row, index) {\r\n    const passage_id = row.passage_id;\r\n    const passage_displayIndex = accumulator.data.length;\r\n\r\n    const reduced = row.qa_pairs.reduce(process_qa_pair, {\r\n        passage_id: passage_id, \r\n        qa_pairs: [],\r\n        hasValidatedAnswers: accumulator.hasValidatedAnswers,\r\n        query_id_to_displayIndex: {}\r\n    });\r\n    const qa_pairs = reduced.qa_pairs;\r\n    accumulator.hasValidatedAnswers = reduced.hasValidatedAnswers;\r\n    const query_id_to_displayIndex = reduced.query_id_to_displayIndex;\r\n\r\n    const hasQuestions = qa_pairs.length !== 0;\r\n    const isValid = hasQuestions;\r\n\r\n    if (isValid) {\r\n        const reduced_row = {\r\n            ...row,\r\n            qa_pairs,\r\n            passage_index: index\r\n        }\r\n        \r\n        accumulator.data.push(reduced_row);\r\n        accumulator.passage_id_to_displayIndex[passage_id] = passage_displayIndex;\r\n        accumulator.passage_id_to_queries_displayIndexes[passage_id] = query_id_to_displayIndex\r\n    }\r\n    return accumulator;\r\n}\r\n\r\nfunction process_qa_pair(accumulator, qa_pair, query_index) {\r\n    const query_displayIndex = accumulator.qa_pairs.length;\r\n    const passage_id = accumulator.passage_id;\r\n\r\n    if (!accumulator.hasValidatedAnswers && qa_pair.validated_answers && qa_pair.validated_answers.length > 0) {\r\n        accumulator.hasValidatedAnswers = true;\r\n    }\r\n\r\n    const answerType = getAnswerType(qa_pair.answer);\r\n    const displayAnswer = getAnswerForDisplay(qa_pair.answer[answerType.accessor]).toString();\r\n    let displayValidatedAnswers = []\r\n    let validatedAnswerTypes = []\r\n    if (qa_pair.validated_answers && qa_pair.validated_answers.length > 0) {\r\n        validatedAnswerTypes = qa_pair.validated_answers\r\n                                .map(validatedAnswer => getAnswerType(validatedAnswer));\r\n        displayValidatedAnswers = qa_pair.validated_answers\r\n                                    .map((validatedAnswer, index) => getAnswerForDisplay(validatedAnswer[validatedAnswerTypes[index].accessor]).toString());\r\n\r\n\r\n                                    /*{\r\n                                        if (!qa_pair.validated_answers || qa_pair.validated_answers.length === 0) {\r\n                                            return null;\r\n                                        }\r\n                                        \r\n                                        const main_answer = qa_pair.displayAnswer;\r\n                                        const answers = [];\r\n                                        qa_pair.validated_answers.forEach((answerDict, index) => {\r\n                                            const answerField = getAnswerType(answerDict);\r\n                                            if (answerField) {\r\n                                                const answer = getAnswerForDisplay(answerDict[answerField.accessor]).toString();\r\n                                                if (answer !== main_answer && !answers.includes(answer)) {\r\n                                                    answers.push(answer);\r\n                                                }\r\n                                            }\r\n                                        });\r\n                                        return answers;\r\n                                    }*/\r\n    }\r\n\r\n    if (getAnswerType(qa_pair.answer) !== noAnswerType) {\r\n        accumulator.qa_pairs.push({\r\n            ...qa_pair,\r\n            displayAnswer,\r\n            answerType,\r\n            displayValidatedAnswers,\r\n            validatedAnswerTypes,\r\n            query_index,\r\n            passage_id\r\n        })\r\n        accumulator.query_id_to_displayIndex[qa_pair.query_id] = query_displayIndex;\r\n    }\r\n\r\n    return accumulator;\r\n}\r\n\r\n\r\nexport function filterDataHelper(internals, filteredAnswerTypes, filteredPredictionTypes, searchProps) {\r\n\r\n    const data = internals.data; \r\n    const filteredDataPerFilter = internals.filteredDataPerFilter;       \r\n\r\n    const searchText = searchProps.searchText;\r\n    const useTextSearch = Boolean(searchText);\r\n\r\n    if (useTextSearch) {\r\n        if (!filteredDataPerFilter.search) {\r\n            const reduced = data.reduce(searchReudcer_rows, {\r\n                filteredData: [],\r\n                searchProps,\r\n                hasValidPredictions: internals.hasValidPredictions\r\n            })\r\n            const result = reduced.filteredData;\r\n\r\n            filteredDataPerFilter.search = result;\r\n        }\r\n    }\r\n\r\n    if (!filteredDataPerFilter.answerTypes) {\r\n        if (filteredAnswerTypes.length > 0) {\r\n            if (filteredAnswerTypes.length < answerTypes.length) {\r\n                const reduced = data.reduce(typeFilterReudcer_rows, {\r\n                    filteredData: [],\r\n                    filteredTypes: filteredAnswerTypes,\r\n                    fields: ['answerType', 'validatedAnswerTypes'],\r\n                    missingValue: noAnswerType\r\n                });\r\n                const result = reduced.filteredData;\r\n\r\n                filteredDataPerFilter.answerTypes = result;\r\n            }\r\n        } else {\r\n            filteredDataPerFilter.answerTypes = [];\r\n        }\r\n    }\r\n\r\n    if (internals.hasValidPredictions && !filteredDataPerFilter.predictionTypes) {\r\n        if (filteredPredictionTypes.length > 0) {\r\n            const reduced = data.reduce(typeFilterReudcer_rows, {\r\n                filteredData: [],\r\n                filteredTypes: filteredPredictionTypes,\r\n                fields: ['predictionType'],\r\n                missingValue: noPredictionType\r\n            });\r\n            const result = reduced.filteredData;\r\n\r\n            filteredDataPerFilter.predictionTypes = result;\r\n        } else {\r\n            filteredDataPerFilter.predictionTypes = [];\r\n        }\r\n    }\r\n\r\n    let filteredData = intersectFilteredData(filteredDataPerFilter, data.length);\r\n\r\n    if (!filteredData) {\r\n        filteredData = data;\r\n    }\r\n\r\n    // Add mean metrics for passage and overall?\r\n\r\n    return {\r\n        filteredData,\r\n        filteredDataPerFilter\r\n    };\r\n}\r\n\r\nfunction intersectFilteredData(filteredDataPerFilter) {\r\n    const filteredDataArr = Object.values(filteredDataPerFilter).filter(filteredData => Boolean(filteredData))\r\n    const filtersCount = filteredDataArr.length;\r\n\r\n    if (filtersCount === 0) {\r\n        return;\r\n    }\r\n\r\n    if (filtersCount === 1) {\r\n        return filteredDataArr[0];\r\n    }\r\n\r\n    const allNonEmpty = filteredDataArr.every(filteredData => filteredData.length > 0);\r\n    if (!allNonEmpty) {\r\n        return [];\r\n    }\r\n\r\n    return intersect(filteredDataArr, row => row.passage_index, intersectRows);\r\n}\r\n\r\nfunction intersectRows(sameRows) {\r\n    const qa_pairs_arr = sameRows.map(row => row.qa_pairs);\r\n\r\n    const filtered_qa_pairs = intersect(qa_pairs_arr, qa_pair => qa_pair.query_index, (sameQuestions) => {\r\n        return Object.assign({}, ...sameQuestions);\r\n    });\r\n\r\n    if (filtered_qa_pairs.length > 0) {\r\n        return Object.assign({}, ...sameRows, {'qa_pairs': filtered_qa_pairs});\r\n    }\r\n    return;\r\n}\r\n\r\n// Text Search Filtering\r\nfunction searchReudcer_rows(accumulator, row) {\r\n    const searchProps = accumulator.searchProps;\r\n    const searchText = searchProps.searchText;\r\n\r\n    const passageTextSearchValid = row.passage.toLowerCase().includes(searchText) || \r\n                                    row.passage_id.toLowerCase().includes(searchText);\r\n\r\n    let filtered_qa_pairs = row.qa_pairs;\r\n    let hasTextSearchValidQuestions = false;\r\n\r\n    if (searchProps.filterQuestions) {\r\n        filtered_qa_pairs = row.qa_pairs.filter(qa_pair => {\r\n            return isQuestionTextSearchValid(qa_pair, searchText, accumulator.hasValidPredictions);\r\n        });\r\n\r\n        hasTextSearchValidQuestions = filtered_qa_pairs.length > 0;\r\n\r\n    } else if (!passageTextSearchValid) {\r\n\r\n        hasTextSearchValidQuestions = row.qa_pairs.some(qa_pair => {\r\n            return isQuestionTextSearchValid(qa_pair, searchText, accumulator.hasValidPredictions);\r\n        });\r\n    }\r\n\r\n    const hasQuestions = filtered_qa_pairs.length > 0;\r\n    const isValid = (passageTextSearchValid && hasQuestions) || hasTextSearchValidQuestions;\r\n\r\n    if (isValid) {\r\n        accumulator.filteredData.push({\r\n            ...row,\r\n            qa_pairs: filtered_qa_pairs,\r\n        });\r\n    }\r\n    return accumulator;\r\n}\r\nfunction isQuestionTextSearchValid(qa_pair, searchText, hasValidPredictions) {\r\n    let result = qa_pair.question.toLowerCase().includes(searchText) ||\r\n                qa_pair.query_id.toLowerCase().includes(searchText);\r\n\r\n    if (result) {\r\n        return true;\r\n    }\r\n\r\n    const displayAnswer = qa_pair.displayAnswer;\r\n    result = (displayAnswer && displayAnswer.toLowerCase().includes(searchText));\r\n\r\n    if (result) {\r\n        return true;\r\n    }\r\n\r\n    if (hasValidPredictions) {\r\n        const displayPrediction = qa_pair.displayPrediction;\r\n        result = (displayPrediction && displayPrediction.toLowerCase().includes(searchText));    \r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n// Type Filtering\r\nfunction typeFilterReudcer_rows(accumulator, row) {\r\n    const filteredTypes = accumulator.filteredTypes;\r\n\r\n    const { filtered_qa_pairs } = row.qa_pairs.reduce(typeFilterReudcer_qa_pairs, {\r\n        filtered_qa_pairs: [],\r\n        filteredTypes,\r\n        fields: accumulator.fields,\r\n        missingValue: accumulator.missingValue\r\n    });\r\n\r\n    const hasQuestions = filtered_qa_pairs.length > 0;\r\n    const isValid = hasQuestions;\r\n\r\n    if (isValid) {\r\n        accumulator.filteredData.push({\r\n            ...row,\r\n            qa_pairs: filtered_qa_pairs,\r\n        });\r\n    }\r\n    return accumulator;\r\n}\r\nfunction typeFilterReudcer_qa_pairs(accumulator, qa_pair) {\r\n    const filteredTypes = accumulator.filteredTypes;\r\n    const fields = accumulator.fields;\r\n\r\n    let typeValid = false;\r\n    for (let i = 0; i < fields.length; i++) {\r\n        const field = fields[i];\r\n\r\n        const obj = qa_pair[field] ? qa_pair[field] : accumulator.missingValue;\r\n        if (Array.isArray(obj)) {\r\n            const arr = obj;\r\n            for (let j = 0; j < arr.length; j++) {\r\n                const value = arr[j];\r\n                typeValid = filteredTypes.includes(value.key);\r\n                if (typeValid) {\r\n                    break;\r\n                }\r\n            }\r\n            if (typeValid) {\r\n                break;\r\n            } \r\n        } else {\r\n            const value = obj;\r\n            typeValid = filteredTypes.includes(value.key);\r\n            if (typeValid) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    const isValid = typeValid;\r\n\r\n    if (isValid) {\r\n        accumulator.filtered_qa_pairs.push({\r\n            ...qa_pair\r\n        });\r\n    }\r\n\r\n    return accumulator;\r\n}\r\n","import React from 'react';\r\nimport ReactTable from 'react-table'\r\nimport cloneDeep from 'clone-deep'\r\nimport 'react-table/react-table.css';\r\nimport '../../../scss/highlighter.css';\r\nimport '../../../scss/react-table.css';\r\nimport WrapDiv from './WrapDiv'\r\nimport { shouldUpdate, isChanged, areSetsEqual, \r\n    displayIndexesToViewIndex, viewIndexToDisplayIndex, viewIndexToDisplayIndexes } from '../../Utils';\r\nimport { processDataHelper, filterDataHelper } from './DataUtils';\r\nimport { getAnswerType, getAnswerForDisplay } from '../AnswersUtils';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { \r\n    Table \r\n} from 'reactstrap';\r\n\r\nconst MAX_QUESTIONS_PER_PASSAGE_ASSUMPTION = 150;\r\n\r\nconst initialInternals = {\r\n    data: undefined,\r\n    filteredData: undefined,\r\n    filteredDataPerFilter: {\r\n        answerTypes: undefined,\r\n        predictionTypes: undefined,\r\n        search: undefined\r\n    },\r\n    predictionTypes: [],\r\n\r\n    hasValidatedAnswers: false,\r\n    hasValidPredictions: false,\r\n}\r\n\r\nconst initialState = {\r\n    page: 0,\r\n    passagesPageSize: 5,\r\n    questionsPageSize: MAX_QUESTIONS_PER_PASSAGE_ASSUMPTION,\r\n    expanded_passage_ids: [],\r\n    activeQuestions: {},\r\n    questionResized: [],\r\n    questionSorted: []\r\n};\r\n\r\nconst filterProps = ['filteredAnswerTypes', 'filteredPredictionTypes', 'searchProps']\r\nconst props_updateSignals = ['dataset', 'predictions', ...filterProps]\r\nconst state_updateSignals = ['page', 'passagesPageSize', 'questionsPageSize', 'expanded_passage_ids', 'activeQuestions', 'questionResized', 'questionSorted']\r\nclass ExplorerTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        renderPassageCell = renderPassageCell.bind(this);\r\n        renderHighlightableQuestionCell = renderHighlightableQuestionCell.bind(this);\r\n        activeQuestionChange = activeQuestionChange.bind(this);\r\n\r\n        this.clearSelectedAnswers = this.clearSelectedAnswers.bind(this);\r\n        this.expandAll = this.expandAll.bind(this);\r\n        this.collapseAll = this.collapseAll.bind(this);\r\n        this.expandedChange = this.expandedChange.bind(this);\r\n        this.getExpanded = this.getExpanded.bind(this);\r\n        this.questionResizedChange = this.questionResizedChange.bind(this);\r\n\r\n        this.processData = this.processData.bind(this);\r\n        this.filterData = this.filterData.bind(this);\r\n        this.getSortedData = this.getSortedData.bind(this);\r\n\r\n        this.pageChanged = this.pageChanged.bind(this);\r\n        this.passagesPageSizeChanged = this.passagesPageSizeChanged.bind(this);\r\n        this.questionsPageSizeChanged = this.questionsPageSizeChanged.bind(this);\r\n        this.passageSortedChange = this.passageSortedChange.bind(this);\r\n        this.questionSortedChange = this.questionSortedChange.bind(this);\r\n\r\n        this.setInternals = this.setInternals.bind(this);\r\n        this.internals = cloneDeep(initialInternals);\r\n        this.state = cloneDeep(initialState);\r\n\r\n        this.tableRef = React.createRef();\r\n    }\r\n\r\n    setInternals(newInternals) {\r\n        Object.assign(this.internals, newInternals)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.sendClearSelectedAnswersFunc(this.clearSelectedAnswers);\r\n        this.props.sendExpandAllFunc(this.expandAll);\r\n        this.props.sendCollapseAllFunc(this.collapseAll);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.props.dataset !== nextProps.dataset) {\r\n            // reset all when the dataset is switched\r\n            this.setInternals(cloneDeep(initialInternals));\r\n            this.setState(cloneDeep(initialState));\r\n        } else if (this.props.predictions !== nextProps.predictions) {\r\n             this.setInternals({data: undefined, filteredData: undefined});\r\n        } else if (isChanged(filterProps, this.props, nextProps)) {\r\n            // update only the changed filter\r\n            const filteredAnswerTypesChanged = this.props.filteredAnswerTypes !== nextProps.filteredAnswerTypes;\r\n            const filteredPredictionTypesChanged = this.props.filteredPredictionTypes !== nextProps.filteredPredictionTypes;\r\n            const searchPropsChanged = this.props.searchProps !== nextProps.searchProps;\r\n            const refilteringRequired = filteredAnswerTypesChanged || filteredPredictionTypesChanged || searchPropsChanged;\r\n\r\n            this.setInternals({\r\n                filteredData: refilteringRequired ? undefined : this.internals.filteredData\r\n            });\r\n            if (filteredAnswerTypesChanged) {\r\n                this.internals.filteredDataPerFilter.answerTypes = undefined;\r\n            }\r\n            if (filteredPredictionTypesChanged) {\r\n                this.internals.filteredDataPerFilter.predictionTypes = undefined;\r\n            }\r\n            if (searchPropsChanged) {\r\n                this.internals.filteredDataPerFilter.search = undefined;\r\n            }\r\n        }\r\n        \r\n        const update = shouldUpdate(props_updateSignals, state_updateSignals, \r\n            this.props, this.state, \r\n            nextProps, nextState, \r\n            true, this.constructor.name);\r\n        return update;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (isChanged(['data', 'predictions'], prevProps, this.props)) {\r\n            this.props.onPredictionsTypeChanged(this.internals.predictionTypes);\r\n        }\r\n        if (isChanged(filterProps, prevProps, this.props)) {\r\n            // force updated is needed for getExpanded() to be called again,\r\n            // so it will use the filtered sorted data to find the expanded rows\r\n            this.forceUpdate(() => {\r\n                this.setState({ page: 0 });\r\n            })\r\n        }\r\n    }\r\n\r\n    pageChanged(page) {\r\n        this.setState({ page });\r\n    }\r\n\r\n    passagesPageSizeChanged(pageSize, page) {\r\n        this.setState({ passagesPageSize: pageSize, page });\r\n    }\r\n\r\n    questionsPageSizeChanged(pageSize, page) {\r\n        this.setState({ questionsPageSize: pageSize, page });\r\n    }\r\n\r\n    passageSortedChange(newSorted, column, additive) {\r\n        // force updated is needed for getExpanded() to be called,\r\n        // so it will use the filtered sorted data to find the expanded rows\r\n        this.forceUpdate();\r\n    }\r\n\r\n    questionSortedChange(newSorted, column, additive) {\r\n        this.setState({\r\n            questionSorted: newSorted\r\n        });\r\n    }\r\n\r\n    expandedChange(newExpanded, index, event) {\r\n        const pageSize = this.state.passagesPageSize;\r\n        const page = this.state.page;\r\n\r\n        const viewIndex = index[0];\r\n        const displayIndex = viewIndexToDisplayIndex(viewIndex, page, pageSize);\r\n\r\n        const sortedData = this.getSortedData();\r\n        const passage_id = sortedData[displayIndex].passage_id; \r\n        \r\n        const matchingPosition = this.state.expanded_passage_ids.indexOf(passage_id);\r\n        if (matchingPosition === -1) {\r\n            this.setState({\r\n                expanded_passage_ids: [...this.state.expanded_passage_ids, passage_id]\r\n            });\r\n        } else {\r\n            const expanded_passage_ids = [...this.state.expanded_passage_ids];\r\n            expanded_passage_ids.splice(matchingPosition, 1);\r\n            this.setState({\r\n                expanded_passage_ids\r\n            });\r\n        }\r\n    }\r\n\r\n    expandAll() {\r\n        this.setState({\r\n            expanded_passage_ids: [...this.internals.filteredData.map(row => row.passage_id)]\r\n        });\r\n    }\r\n\r\n    collapseAll() {\r\n        this.setState({\r\n            expanded_passage_ids: []\r\n        });\r\n    }\r\n\r\n    getExpanded() {\r\n        const defaultExpanded = {};\r\n        if (!this.tableRef.current) {\r\n            return defaultExpanded;\r\n        }\r\n\r\n        const sortedData = this.getSortedData();\r\n\r\n        const indexesFromSorted = new Set(sortedData.map(row => row.passage_index))\r\n        const indexesFromFiltered = new Set(this.internals.filteredData.map(row => row.passage_index))\r\n        if (!areSetsEqual(indexesFromSorted, indexesFromFiltered)) {\r\n            return defaultExpanded;\r\n        }\r\n\r\n        const pageSize = this.state.passagesPageSize;\r\n        const page = this.state.page;\r\n\r\n        const viewIndexes = [...Array(pageSize).keys()];\r\n        const displayIndexsInPage = viewIndexToDisplayIndexes(viewIndexes, page, pageSize);\r\n\r\n        const expandedDisplayIndexes = displayIndexsInPage.filter(displayIndex => {\r\n            if (displayIndex < sortedData.length) {\r\n                const passage_id = sortedData[displayIndex].passage_id;\r\n                return this.state.expanded_passage_ids.includes(passage_id)\r\n            }\r\n            return false;\r\n        });\r\n\r\n        let expandedInPage = displayIndexesToViewIndex(expandedDisplayIndexes, page, pageSize, true);\r\n\r\n        return expandedInPage;\r\n    }\r\n\r\n    questionResizedChange(newResized, event) {\r\n        this.setState({\r\n            questionResized: newResized\r\n        });\r\n    }\r\n\r\n    clearSelectedAnswers() {\r\n        this.setState({\r\n            activeQuestions: {}\r\n        });\r\n    }\r\n\r\n    processData() {\r\n        const dataset = this.props.dataset;\r\n        const predictions = this.props.predictions;\r\n\r\n        const {\r\n            data, \r\n            hasValidatedAnswers,\r\n            hasValidPredictions,\r\n            predictionTypes\r\n        } = processDataHelper(dataset, predictions);\r\n\r\n        this.setInternals({\r\n            data,\r\n            hasValidatedAnswers,\r\n            hasValidPredictions,\r\n            predictionTypes\r\n        });\r\n    }\r\n\r\n    filterData() {\r\n        const filteredAnswerTypes = this.props.filteredAnswerTypes;\r\n        const filteredPredictionTypes = this.props.filteredPredictionTypes;\r\n        const searchProps = this.props.searchProps;\r\n\r\n        const {\r\n            filteredData,\r\n            filteredDataPerFilter\r\n        } = filterDataHelper(this.internals, filteredAnswerTypes, filteredPredictionTypes, searchProps);\r\n        \r\n        this.setInternals({\r\n            filteredData,\r\n            filteredDataPerFilter\r\n        });\r\n    }\r\n\r\n    getSortedData() {\r\n        return this.tableRef.current.getResolvedState().sortedData;\r\n    }\r\n\r\n    render() {\r\n\r\n        console.time('processData');\r\n        if (!this.internals.data) {\r\n            this.processData();\r\n        }\r\n        console.timeEnd('processData');\r\n        \r\n        console.time('filterData');\r\n        if (!this.internals.filteredData) {\r\n            this.filterData();\r\n        }        \r\n        console.timeEnd('filterData');\r\n\r\n        const passage_columns = [\r\n            {\r\n                Header: '#',\r\n                id: 'passage_index',\r\n                accessor: 'passage_index',\r\n                width: 50\r\n            },\r\n            {\r\n                Header: 'Passage ID',\r\n                accessor: 'passage_id',\r\n                width: 110\r\n            }, \r\n            {\r\n                Header: 'Passage',\r\n                accessor: 'passage',\r\n                Cell: renderPassageCell\r\n            }, \r\n            {\r\n                Header: 'Count',\r\n                id: 'questions_count',\r\n                accessor: row => row.qa_pairs.length,\r\n                width: 50,\r\n                resizable: false\r\n            }\r\n        ]\r\n\r\n        const qa_columns = [\r\n            {\r\n                Header: '#',\r\n                accessor: 'query_index',\r\n                width: 40\r\n            },\r\n            {\r\n                Header: 'Question ID',\r\n                accessor: 'query_id',\r\n                width: 100\r\n            },\r\n            {\r\n                Header: 'Question',\r\n                accessor: 'question',\r\n                Cell: renderHighlightableQuestionCell\r\n            },\r\n            {\r\n                Header: 'Answer',\r\n                accessor: 'displayAnswer',\r\n                Cell: renderHighlightableQuestionCell,\r\n                width: 150\r\n            },\r\n            {\r\n                Header: '→ Type',\r\n                id: 'answerType',\r\n                accessor: qa_pair => qa_pair.answerType.value,\r\n                width: 100,\r\n                resizable: false\r\n            },\r\n            {\r\n                Header: 'Additional Answers',\r\n                id: 'additional_answers',\r\n                show: this.internals.hasValidatedAnswers,\r\n                accessor: qa_pair => {\r\n                    if (!qa_pair.validated_answers || qa_pair.validated_answers.length === 0) {\r\n                        return null;\r\n                    }\r\n                    \r\n                    const main_answer = qa_pair.displayAnswer;\r\n                    const answers = [];\r\n                    qa_pair.validated_answers.forEach((answerDict, index) => {\r\n                        const answerField = getAnswerType(answerDict);\r\n                        if (answerField) {\r\n                            const answer = getAnswerForDisplay(answerDict[answerField.accessor]).toString();\r\n                            if (answer !== main_answer && !answers.includes(answer)) {\r\n                                answers.push(answer);\r\n                            }\r\n                        }\r\n                    });\r\n                    return answers;\r\n                },\r\n                Cell: props => <Table style={{height: '100%'}} striped><tbody>{props.value.map((answer, index) => \r\n                    <tr key={index}><td style={{whiteSpace: 'pre-wrap', padding: 0, 'borderTop': 0}}>{answer}</td></tr>\r\n                )}</tbody></Table>,\r\n                width: 170\r\n            },            \r\n            {\r\n                Header: 'Prediction',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: 'displayPrediction',\r\n                Cell: renderHighlightableQuestionCell,\r\n                width: 150\r\n            },\r\n            {\r\n                Header: 'Prediction Type',\r\n                id: 'predictionType',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: qa_pair => qa_pair.predictionType ? qa_pair.predictionType.value : '',\r\n                width: 110,\r\n                resizable: false\r\n            },\r\n            {\r\n                Header: 'F1',\r\n                id: 'f1',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: 'f1',\r\n                width: 40,\r\n                resizable: false\r\n            }, {\r\n                Header: 'EM',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: 'em',\r\n                width: 40,\r\n                resizable: false\r\n            }\r\n        ]\r\n\r\n\r\n        let questionsCount = 0;\r\n        let predictedCount = 0;\r\n        for (let i=0; i < this.internals.filteredData.length; i++) {\r\n            const row = this.internals.filteredData[i];\r\n\r\n            questionsCount += row.qa_pairs.length;\r\n\r\n            if (this.internals.hasValidPredictions) {\r\n                for (let j=0; j < row.qa_pairs.length; j++) {\r\n                    const qa_pair = row.qa_pairs[j];\r\n        \r\n                    if (qa_pair.prediction) {\r\n                        predictedCount += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const f1 = 0.53;\r\n        const em = 0.46;\r\n\r\n        return <div className='container-fluid'>\r\n            <div className='row justify-content-center'>\r\n                <div className='col-3'>\r\n                    <h4>\r\n                    Passage Count: {this.internals.filteredData.length.toLocaleString()}\r\n                    </h4>\r\n                </div>\r\n                <div className='col-3'>\r\n                    <h4>\r\n                        Questions Count: {questionsCount.toLocaleString()}\r\n                    </h4>\r\n                </div>\r\n                {this.props.predictions ? <div className='col-3'>\r\n                    <h4>\r\n                        {this.internals.hasValidPredictions ?\r\n                        `Predictions Count: ${predictedCount.toLocaleString()}` :\r\n                        'Predictions do not match the dataset'\r\n                        }\r\n                    </h4>\r\n                </div> : null}\r\n                {(false && this.props.predictions && this.internals.hasValidPredictions) ? <div className='col-3'>\r\n                    <h4>\r\n                        F1: {f1}, EM: {em}\r\n                    </h4>\r\n                </div> : null}\r\n            </div>\r\n            <div className='row'><div className='col-12'>\r\n                <ReactTable ref={this.tableRef} className=\"-striped-passage -highlight-passage\"\r\n                data={this.internals.filteredData} \r\n                columns={passage_columns}\r\n                minRows={0}\r\n                showPaginationTop={true}\r\n                showPaginationBottom={true}\r\n                page={this.state.page}\r\n                pageSize={this.state.passagesPageSize}\r\n                pageSizeOptions={[1, 5, 10, 20, 25, 50, 100]}\r\n                onPageChange={this.pageChanged}\r\n                onPageSizeChange={this.passagesPageSizeChanged}\r\n                collapseOnSortingChange={false}\r\n                collapseOnPageChange={false}\r\n                collapseOnDataChange={false}\r\n                onSortedChange={this.passageSortedChange}\r\n                expanded={this.getExpanded()}\r\n                onExpandedChange={(newExpanded, index, event) => this.expandedChange(newExpanded, index, event)}\r\n                SubComponent={row => {\r\n                    const qa_pairs = row.original.qa_pairs\r\n                    return (\r\n                        <ReactTable className=\"-striped-question -highlight-question\"\r\n                        data={qa_pairs}\r\n                        columns={qa_columns}\r\n                        minRows={0}\r\n                        sorted={this.state.questionSorted}\r\n                        onSortedChange={this.questionSortedChange}\r\n                        resized={this.state.questionResized}\r\n                        onResizedChange={this.questionResizedChange}\r\n                        pageSize={this.state.questionsPageSize}\r\n                        pageSizeOptions={[1, 5, 10, 20, 25, MAX_QUESTIONS_PER_PASSAGE_ASSUMPTION]}\r\n                        onPageSizeChange={this.questionsPageSizeChanged}\r\n                        showPagination={false}\r\n                        getTrProps={(state, rowInfo, column, instance) => {\r\n                            return {\r\n                                onClick: (e, handleOriginal) => {\r\n                                    activeQuestionChange(rowInfo, e);\r\n\r\n                                    if (handleOriginal) {\r\n                                        handleOriginal();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }}\r\n                        />\r\n                    )\r\n                }}\r\n                />\r\n            </div></div>\r\n            </div>\r\n    }\r\n}\r\n\r\nlet renderPassageCell = function(props) {\r\n    let searchWords = [];\r\n    let categoryPerSearchWordIndex = undefined;\r\n    let highlightClassNamePerCategory = undefined;\r\n    const activeQuestionId = this.state.activeQuestions[props.original.passage_id];\r\n    if (activeQuestionId) {\r\n        const qa_pair = props.original.qa_pairs\r\n                        .find(qa_pair => qa_pair.query_id === activeQuestionId);\r\n        if (qa_pair) {\r\n            const selectedAnswer = qa_pair.answer;\r\n            const answerType = qa_pair.answerType;\r\n            searchWords = (answerType.key === 'number') ? \r\n                [Number(selectedAnswer.number).toString()] : [...selectedAnswer.spans]\r\n            // TODO: Would be best to use the best aligned answer including the additional answers.\r\n\r\n            categoryPerSearchWordIndex = searchWords.map(searchWord => 'gold_0')\r\n            highlightClassNamePerCategory = {'gold_0': 'highlight-gold'}\r\n\r\n            const prediction = qa_pair.prediction;\r\n            if (prediction) {\r\n                searchWords.push(...prediction);\r\n                categoryPerSearchWordIndex.push(...prediction.map(x => 'prediction_1'));\r\n                highlightClassNamePerCategory['prediction_1'] = 'highlight-predicted';\r\n                highlightClassNamePerCategory['gold_0-prediction_1'] = 'highlight-correct'\r\n            }\r\n        }\r\n    }\r\n    return <WrapDiv><Highlighter \r\n            searchWords={searchWords} categoryPerSearchWordIndex={categoryPerSearchWordIndex} \r\n            highlightClassNamePerCategory={highlightClassNamePerCategory}\r\n            textToHighlight={props.value} /></WrapDiv>\r\n}\r\nlet renderHighlightableQuestionCell = function(props) {\r\n    let searchWords = [];\r\n    const highlightClassName = props.column.id === 'displayPrediction' ? 'highlight-predicted' : 'highlight-gold';\r\n    const activeQuestionId = this.state.activeQuestions[props.original.passage_id];\r\n    if (activeQuestionId === props.original.query_id) {        \r\n        if (props.column.id === 'displayPrediction') {\r\n            searchWords = props.original.prediction ? props.original.prediction : [];\r\n        } else {\r\n            const selectedAnswer = props.original.answer;\r\n            const answerType = props.original.answerType;\r\n            // TODO: Would be best to use the best aligned answer including the additional answers.\r\n\r\n            searchWords = (answerType.key === 'number') ? \r\n                [Number(selectedAnswer.number).toString()] : selectedAnswer.spans\r\n        }\r\n    }\r\n    return <WrapDiv><Highlighter highlightClassName={highlightClassName} searchWords={searchWords} textToHighlight={props.value || ''} /></WrapDiv>\r\n}\r\n\r\nlet activeQuestionChange = function(rowInfo, e) {\r\n    const answerDict = rowInfo.original.answer;\r\n    // TODO: Would be best to use the best aligned answer including the additional answers.\r\n\r\n    const answerType = getAnswerType(answerDict)\r\n    if (answerType && answerType.key !== 'date') {\r\n\r\n        const passage_id = rowInfo.original.passage_id\r\n        const query_id = rowInfo.original.query_id\r\n\r\n        if (this.state.activeQuestions[passage_id] === query_id) {\r\n            const activeQuestions = {...this.state.activeQuestions};\r\n            delete activeQuestions[passage_id]\r\n            this.setState({\r\n                activeQuestions\r\n            });\r\n        } else {\r\n            this.setState({\r\n                activeQuestions: {\r\n                    //...this.state.activeQuestions, \r\n                    [passage_id]: query_id\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default ExplorerTable;\r\n","import React from 'react';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n} from 'reactstrap';\r\nimport { shouldUpdate } from './../Utils';\r\nimport ExplorerSettings from './explorer-settings/ExplorerSettings';\r\nimport ExplorerTable from './explorer-table/ExplorerTable';\r\n\r\nconst props_updateSignals = []\r\nconst state_updateSignals = ['dataset', 'predictions', 'filteredAnswerTypes', 'predictionTypes', 'filteredPredictionTypes', 'searchProps', 'navbarSticky', 'isOpen']\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.settingsChange = this.settingsChange.bind(this);\r\n        this.getClearSelectedAnswersFunc = this.getClearSelectedAnswersFunc.bind(this);\r\n        this.getExpandAllFunc = this.getExpandAllFunc.bind(this);\r\n        this.getCollapseAllFunc = this.getCollapseAllFunc.bind(this);\r\n        this.predictionTypesChanged = this.predictionTypesChanged.bind(this);\r\n        this.toggleMenu = this.toggleMenu.bind(this);\r\n        this.state = {\r\n            useLocalDataset: true,\r\n            allowSourceSelection: false,\r\n            filteredAnswerTypes: ['multi_span', 'single_span', 'number', 'date'],\r\n            predictionTypes: [],\r\n            filteredPredictionTypes: [],\r\n            instantSearch: true,\r\n            searchProps: {\r\n                searchText: '',\r\n                filterQuestions: false\r\n            },\r\n            navbarSticky: 'top', // can be 'top' or undefined\r\n            isOpen: true,\r\n            showNavbarImage: true,\r\n            // ^ startup settings available for configuration\r\n\r\n            dataset: undefined,\r\n            predictions: undefined,\r\n            clearSelectedAnswersFunc: undefined,\r\n            expandAllFunc: undefined,\r\n            collapseAll: undefined\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        const update = shouldUpdate(props_updateSignals, state_updateSignals, \r\n            this.props, this.state, \r\n            nextProps, nextState, \r\n            true, this.constructor.name);\r\n        return update;\r\n    }\r\n\r\n    settingsChange(settings) {\r\n        this.setState({\r\n            filteredAnswerTypes: settings.filteredAnswerTypes,\r\n            filteredPredictionTypes: settings.filteredPredictionTypes,\r\n            searchProps: settings.searchProps,\r\n            dataset: settings.dataset,\r\n            predictions: settings.predictions\r\n        });\r\n    }\r\n    \r\n    getClearSelectedAnswersFunc(func) {\r\n        this.setState({ clearSelectedAnswersFunc: func });\r\n    }\r\n\r\n    getExpandAllFunc(func) {\r\n        this.setState({ expandAllFunc: func });\r\n    }\r\n\r\n    getCollapseAllFunc(func) {\r\n        this.setState({ collapseAllFunc: func });\r\n    }\r\n\r\n    predictionTypesChanged(predictionTypes) {\r\n        this.setState({ predictionTypes });\r\n    }\r\n\r\n    toggleMenu() {\r\n        this.setState({\r\n          isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n                    <Navbar color=\"light\" light sticky={this.state.navbarSticky} \r\n                            style={{borderBottom: '1px solid rgba(0,0,0,0.15)'}}>\r\n                        <div style={{width: '100%'}}>\r\n                            {this.state.showNavbarImage ? \r\n                            <div className='navbar-brand'>\r\n                                {<a target='_blank' rel='noopener noreferrer' href='https://allennlp.org/drop'>\r\n                                    <img style={{paddingRight: '15px', marginBottom: '3px'}} src='https://allennlp.org/assets/allennlp-logo-color.png' height='14' alt='' />\r\n                                </a>}\r\n                                <button className='fakeLink' onClick={() => {this.setState({ navbarSticky: this.state.navbarSticky === 'top' ? undefined : 'top' })}}>DROP Explorer</button>\r\n                            </div> : \r\n                            <NavbarBrand onClick={() => {this.setState({ navbarSticky: this.state.navbarSticky === 'top' ? undefined : 'top' })}}>\r\n                                DROP Explorer\r\n                            </NavbarBrand>}\r\n                            <NavbarToggler style={{float: 'right', marginTop: '0.25rem'}} onClick={this.toggleMenu} />\r\n                        </div>\r\n                        <Collapse isOpen={this.state.isOpen} navbar>\r\n                            <ExplorerSettings onChange={this.settingsChange}\r\n                                useLocalDataset={this.state.useLocalDataset}\r\n                                allowSourceSelection={this.state.allowSourceSelection}\r\n                                expandAllFunc={this.state.expandAllFunc}\r\n                                collapseAllFunc={this.state.collapseAllFunc}\r\n                                filteredAnswerTypes={this.state.filteredAnswerTypes}\r\n                                filteredPredictionTypes={this.state.filteredPredictionTypes}\r\n                                predictionTypes={this.state.predictionTypes}\r\n                                instantSearch={this.state.instantSearch}\r\n                                searchProps={this.state.searchProps}\r\n                                clearSelectedAnswersFunc={this.state.clearSelectedAnswersFunc} />\r\n                        </Collapse>\r\n                    </Navbar>\r\n                    <ExplorerTable \r\n                        dataset={this.state.dataset} \r\n                        predictions={this.state.predictions}\r\n                        filteredAnswerTypes={this.state.filteredAnswerTypes}\r\n                        filteredPredictionTypes={this.state.filteredPredictionTypes}\r\n                        searchProps={this.state.searchProps}\r\n                        sendClearSelectedAnswersFunc={this.getClearSelectedAnswersFunc}\r\n                        sendExpandAllFunc={this.getExpandAllFunc}\r\n                        sendCollapseAllFunc={this.getCollapseAllFunc}\r\n                        onPredictionsTypeChanged={this.predictionTypesChanged}\r\n                    />\r\n                </div>\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './scss/custom.scss';\r\nimport ModelComponent from './model/ModelComponent';\r\nimport App from './components/app/App';\r\n\r\n// Copied from http:jquery-howto.blogspot.com/2009/09/get-url-parameters-values-with-jquery.html\r\nfunction getUrlVars() {\r\n    var vars = [], hash;\r\n    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');\r\n    for (var i = 0; i < hashes.length; i++) {\r\n      hash = hashes[i].split('=');\r\n      vars.push(hash[0]);\r\n      vars[hash[0]] = hash[1];\r\n    }\r\n    return vars;\r\n}\r\n  \r\nvar urlParams = getUrlVars();\r\n  \r\nswitch (urlParams[\"startPage\"]) {\r\n    case \"model\":\r\n        ReactDOM.render(<ModelComponent />, document.getElementById('root'));\r\n        break;\r\n\r\n    case undefined:\r\n    default:\r\n        ReactDOM.render(<App />, document.getElementById('root'));\r\n        break;\r\n}\r\n"],"sourceRoot":""}