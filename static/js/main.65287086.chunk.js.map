{"version":3,"sources":["api-config.js","model_components/Pane.jsx","model_components/Button.jsx","model_components/ModelIntro.jsx","model/ModelInput.jsx","model/ModelOutput.jsx","model/ModelComponent.jsx","components/Utils.js","components/file_input_button/FileInputButton.jsx","components/app/explorer-settings/dataset-loader/DatasetLocalSelector.jsx","components/app/explorer-settings/dataset-loader/DatasetListSelector.jsx","components/checkbox/Checkbox.jsx","components/app/explorer-settings/dataset-loader/DatasetLoader.jsx","components/app/explorer-settings/PredictionsLoader.jsx","components/app/AnswersUtils.js","components/app/explorer-settings/SearchFilter.jsx","components/checkbox_list/CheckboxList.jsx","components/range_input/RangeInput.jsx","components/app/explorer-settings/ExplorerSettings.jsx","components/app/explorer-table/WrapDiv.jsx","components/app/explorer-table/DataUtils.js","components/app/explorer-table/ExplorerTable.jsx","components/app/App.jsx","index.js"],"names":["origin","window","location","API_ROOT","includes","replace","ResultDisplay","outputContent","outputState","this","props","placeholderTemplate","message","react_default","a","createElement","className","concat","xlinkHref","children","React","Component","PaneRight","_React$Component2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","Pane_ResultDisplay","PaneLeft","_React$Component3","Button","_this$props","enabled","onClick","type","disabled","ModelIntro","title","description","examples","passage","question","ModelInput","_this","call","handleListChange","bind","assertThisInitialized","e","target","runModel","_this2","model_components_ModelIntro","onChange","map","example","index","substring","summarizeExample","ref","x","model_components_Button","ModelOutput","answer","outputs","JSON","stringify","ModelComponent","state","responseData","inputs","setState","fetch","method","headers","Accept","Content-Type","body","then","response","json","catch","error","console","_this$state","Pane_PaneLeft","model_ModelInput","Pane_PaneRight","model_ModelOutput","mapToArray","key_name","keys","intersect","dataArr","accessor","transformToSingle","pointers","Array","length","intersection","maxIndex","agreements","i","data","currentIndex","item","reduce","sameItems","push","isChanged","changeSignals","obj","otherObj","debug","sourceName","changes","changeSignal","changed","log","join","shouldUpdate","props_updateSignals","state_updateSignals","nextProps","nextState","componentName","propsUpdated","stateUpdated","displayIndexesToViewIndex","displayIndexes","page","pageSize","returnObject","undefined","acuumulator","displayIndex","viewIndex","Math","floor","displayIndexToViewIndex","viewIndexToDisplayIndex","FileInputButton","fileInputRef","createRef","simulateClick","change","file","prevProps","prevState","current","click","files","selectedFile","style","display","id","accept","es_Button","color","size","text","name","PureComponent","DatasetLocalSelector","dataset","reader","FileReader","onloadend","array","parse","result","readAsText","file_input_button_FileInputButton","width","DatasetListSelector","toggle","dropdownOpen","datasets_names","selected","mounted","getDatasetList","getDataset","currentTarget","getAttribute","dataset_name","_this3","encodeURIComponent","_this4","Dropdown","isOpen","DropdownToggle","caret","DropdownMenu","DropdownItem","dataset-name","Checkbox","checked","FormGroup","check","_objectSpread","Label","Input","fontSize","marginLeft","marginTop","DatasetSelector","local","dataset_loader_DatasetLocalSelector","dataset_loader_DatasetListSelector","DatasetLoader","useLocalDatasetChange","datasetChange","useLocalDataset","onDatasetChange","newChecked","ListGroup","allowSourceSelection","ListGroupItem","checkbox_Checkbox","PredictionsLoader","predictions","split","forEach","line","noAnswerType","noPredictionType","answerTypesConst","getAnswerStringForDisplayAndType","displayAnswer","answerType","number","number_value","Number","isNaN","toString","spans","toConsumableArray","sort","date","some","prop","getAnswerForEvaluation","answerForEvaluation","String","prepareText","toLowerCase","SearchFilter","searchTextChange","filterQuestionsChange","submit","SearchFilter_objectSpread","searchProps","draftSearchText","draftFilterQuestions","filterQuestions","searchText","event","newState","instantSearch","CheckboxList","changedKey","changedKeyIndex","indexOf","splice","options","option","option-key","RangeInput","lowChange","highChange","low","initial","high","metric","newLow","parseFloat","newHigh","InputGroup","tag","step","padding","textAlign","InputGroupAddon","addonType","InputGroupText","alignItems","margin","ExplorerSettings","predictionsChange","filteredAnswerTypesChange","answerTypeFilterFirstOnlyChange","filteredPredictionTypesChange","searchFilterChange","rangeFilterChange","filteredAnswerTypes","answerTypeFilterFirstOnly","filteredPredictionTypes","F1Range","EMRange","constructor","predictionTypes","predictionType","range","defineProperty","Container","fluid","CardGroup","Card","CardHeader","CardBody","dataset_loader_DatasetLoader","height","overflow","expandAllFunc","collapseAllFunc","clearSelectedAnswersFunc","justifyContent","paddingRight","checkbox_list_CheckboxList","explorer_settings_SearchFilter","explorer_settings_PredictionsLoader","range_input_RangeInput","WrapDiv","styled","div","_templateObject","process_row","accumulator","row","passage_id","passage_displayIndex","reduced","qa_pairs","process_qa_pair","hasValidatedAnswers","query_id_to_displayIndex","trim","reduced_row","DataUtils_objectSpread","passage_index","passage_id_to_displayIndex","passage_id_to_queries_displayIndexes","qa_pair","query_index","query_displayIndex","validated_answers","_getAnswerStringForDi","firstDisplayAnswer","firstAnswerType","displayAnswers","answersTypes","evaluationAnswers","validatedAnswer","evaluationAnswer","addedEvaluationAnswer","_getAnswerStringForDi2","maximizingGroundTruthIndex","query_id","filterDataHelper","internals","filteredDataPerFilter","Boolean","search","searchReudcer_rows","filteredData","hasValidPredictions","answerTypes","typeFilterReudcer_rows","filteredTypes","fields","missingValue","firstOnly","rangeFilterReudcer_rows","field","filteredDataArr","values","filter","filtersCount","every","intersectRows","intersectFilteredData","metrics","questionsCount","predictedCount","f1","em","row_predicted","row_f1","row_em","j","prediction","sameRows","filtered_qa_pairs","sameQuestions","assign","passageTextSearchValid","hasTextSearchValidQuestions","isQuestionTextSearchValid","hasQuestions","evaluationPrediction","typeFilterReudcer_qa_pairs","typeValid","isArray","arr","rangeFilterReudcer_qa_pairs","rangeValid","initialInternals","initialState","passagesPageSize","questionsPageSize","expanded_passage_ids","activeQuestions","questionResized","questionSorted","filterProps","ExplorerTable","renderPassageOrQuestionCell","renderPredictionCell","renderAnswersCell","activeQuestionChange","clearSelectedAnswers","expandAll","collapseAll","expandedChange","getExpanded","questionResizedChange","processData","filterData","getSortedData","pageChanged","passagesPageSizeChanged","questionsPageSizeChanged","passageSortedChange","questionSortedChange","setInternals","cloneDeep","tableRef","newInternals","sendClearSelectedAnswersFunc","sendExpandAllFunc","sendCollapseAllFunc","filteredAnswerTypesChanged","filteredPredictionTypesChanged","searchPropsChanged","F1RangeChanged","EMRangeChanged","refilteringRequired","onPredictionsTypeChanged","forceUpdate","newSorted","column","additive","newExpanded","matchingPosition","defaultExpanded","sortedData","set","otherSet","has","areSetsEqual","Set","viewIndexes","viewIndexToDisplayIndexes","newResized","_processDataHelper","keyToPredictionType","predicted_ability","predictionValue","displayPrediction","maximizingGroundTruth","maximizing_ground_truth","loss","findIndex","predictionSpans","processDataHelper","_filterDataHelper","getResolvedState","time","timeEnd","passage_columns","Header","Cell","resizable","show","forceDecimalPlaces","qa_columns","renderAnswersTypesCell","toLocaleString","es","columns","minRows","showPaginationTop","showPaginationBottom","pageSizeOptions","onPageChange","onPageSizeChange","collapseOnSortingChange","collapseOnPageChange","collapseOnDataChange","onSortedChange","expanded","onExpandedChange","SubComponent","original","maxHeight","sorted","resized","onResizedChange","showPagination","getTrProps","rowInfo","instance","handleOriginal","searchWords","categoryPerSearchWordIndex","categoryPerSpanIndex","highlightClassNamePerCategory","activeQuestionId","find","gold_0","context","spansAcc","span","_searchWords","_categoryPerSearchWor","explorer_table_WrapDiv","main_default","autoEscape","textToHighlight","highlightClassName","Table","striped","whiteSpace","borderTop","ExplorerTable_objectSpread","num","places","round","pow","toFixed","App","settingsChange","getClearSelectedAnswersFunc","getExpandAllFunc","getCollapseAllFunc","predictionTypesChanged","toggleMenu","navbarSticky","showNavbarImage","settings","func","Navbar","light","sticky","borderBottom","rel","href","marginBottom","src","alt","NavbarBrand","NavbarToggler","float","Collapse","navbar","explorer_settings_ExplorerSettings","explorer_table_ExplorerTable","hash","vars","hashes","slice","getUrlVars","ReactDOM","render","model_ModelComponent","document","getElementById","app_App"],"mappings":"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","file":"static/js/main.65287086.chunk.js","sourcesContent":["/**\r\n * The backend always runs on port 8000. In production we also\r\n * serve the frontend from there. However, for development\r\n * we want to `npm run serve` the unminified js on port 3000.\r\n * This allows us to get the correct API root either way.\r\n */\r\n\r\nlet apiRoot;\r\n\r\nconst origin = window && window.location && window.location.origin;\r\n\r\nif (origin.includes(':3000')) {\r\n    apiRoot = origin.replace(\":3000\", \":8000\");\r\n} else {\r\n    apiRoot = origin;\r\n}\r\n\r\nexport const API_ROOT = apiRoot;\r\n","import React from 'react';\r\n\r\n\r\n/*******************************************************************************\r\n  <ResultDisplay /> Component\r\n*******************************************************************************/\r\n\r\nclass ResultDisplay extends React.Component {\r\n\r\n    render() {\r\n      const { outputState } = this.props;\r\n\r\n      const placeholderTemplate = (message) => {\r\n        return (\r\n          <div className=\"placeholder\">\r\n            <div className=\"placeholder__content\">\r\n              <svg className={`placeholder__${outputState}`}>\r\n                <use xlinkHref={`#icon__${outputState}`}></use>\r\n              </svg>\r\n              {message !== \"\" ? (\r\n                <p>{message}</p>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      let outputContent;\r\n      switch (outputState) {\r\n        case \"working\":\r\n          outputContent = placeholderTemplate(\"\");\r\n          break;\r\n        case \"received\":\r\n          outputContent = this.props.children;\r\n          break;\r\n        case \"error\":\r\n          outputContent = placeholderTemplate(\"Something went wrong. Please try again.\");\r\n          break;\r\n        default:\r\n          // outputState = \"empty\"\r\n          outputContent = placeholderTemplate(\"Run model to view results\");\r\n      }\r\n\r\n      return (\r\n        <div className={`pane__right model__output ${outputState !== \"received\" ? \"model__output--empty\" : \"\"}`}>\r\n          <div className=\"pane__thumb\"></div>\r\n          {outputContent}\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n  <PaneRight /> Component\r\n*******************************************************************************/\r\n\r\nexport class PaneRight extends React.Component {\r\n    render() {\r\n      const { outputState } = this.props;\r\n\r\n      return (\r\n        <ResultDisplay outputState={outputState}>\r\n          {this.props.children}\r\n        </ResultDisplay>\r\n      )\r\n    }\r\n}\r\n\r\n/*******************************************************************************\r\n<PaneLeft /> Component\r\n*******************************************************************************/\r\n\r\nexport class PaneLeft extends React.Component {\r\n\r\n    render () {\r\n      return (\r\n        <div className=\"pane__left model__input\">\r\n          {this.props.children}\r\n        </div>\r\n      );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\n/*******************************************************************************\r\n  <Button /> Component\r\n*******************************************************************************/\r\n\r\nclass Button extends React.Component {\r\n  render() {\r\n    const { enabled, onClick } = this.props;\r\n\r\n    return (\r\n    <button type=\"button\" disabled={!enabled} className=\"btn btn--icon-disclosure\" onClick={onClick}>Run\r\n      <svg>\r\n        <use xlinkHref=\"#icon__disclosure\"></use>\r\n      </svg>\r\n    </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\n\r\n\r\n/*******************************************************************************\r\n  <ModelIntro /> Component\r\n*******************************************************************************/\r\n\r\nclass ModelIntro extends React.Component {\r\n    render() {\r\n\r\n      const { title, description } = this.props;\r\n\r\n      return (\r\n        <div>\r\n          <h2>\r\n            <span>{title}</span>\r\n          </h2>\r\n          <p>{description}</p>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default ModelIntro;\r\n","import React from 'react';\r\nimport Button from '../model_components/Button'\r\nimport ModelIntro from '../model_components/ModelIntro'\r\n\r\n\r\n// TODO: These are some quickly-accessible examples to try out with your model.  They will get\r\n// added to the select box on the demo page, and will auto-populate your input fields when they\r\n// are selected.  The names here need to match what's read in `handleListChange` below.\r\n\r\nconst examples = [\r\n  {\r\n    passage: \"passage for example 1\",\r\n    question: \"question for example 1\"\r\n  },\r\n  {\r\n    passage: \"passage for example 2\",\r\n    question: \"question for example 2\"\r\n  },\r\n  {\r\n    passage: \"passage for example 3\",\r\n    question: \"question for example 3\"\r\n  }\r\n];\r\n\r\n// TODO: This determines what text shows up in the select box for each example.  The input to\r\n// this function will be one of the items from the `examples` list above.\r\nfunction summarizeExample(example) {\r\n  return example.passage.substring(0, 60);\r\n}\r\n\r\n// TODO: You can give a model name and description that show up in your demo.\r\nconst title = \"Your Model Name\";\r\nconst description = (\r\n  <span>\r\n  If you want a description of what this demo is showing, you can put that here.  Or just leave this\r\n  description empty if you don't need it.\r\n  </span>\r\n);\r\n\r\nclass ModelInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleListChange = this.handleListChange.bind(this);\r\n    this.onClick = this.onClick.bind(this);\r\n  }\r\n\r\n  handleListChange(e) {\r\n    if (e.target.value !== \"\") {\r\n      // TODO: This gets called when the select box gets changed.  You want to set the values of\r\n      // your input boxes with the content in your examples.\r\n      this.passage.value = examples[e.target.value].passage\r\n      this.question.value = examples[e.target.value].question\r\n    }\r\n  }\r\n\r\n  onClick() {\r\n    const { runModel } = this.props;\r\n\r\n    // TODO: You need to map the values in your input boxes to json values that get sent to your\r\n    // predictor.  The keys in this dictionary need to match what your predictor is expecting to receive.\r\n    runModel({passage: this.passage.value, question: this.question.value});\r\n  }\r\n\r\n  render() {\r\n\r\n    const { outputState } = this.props;\r\n\r\n    return (\r\n      <div className=\"model__content\">\r\n        <ModelIntro title={title} description={description} />\r\n        <div className=\"form__instructions\"><span>Enter text or</span>\r\n          <select disabled={outputState === \"working\"} onChange={this.handleListChange}>\r\n              <option value=\"\">Choose an example...</option>\r\n              {examples.map((example, index) => {\r\n                return (\r\n                    <option value={index} key={index}>{summarizeExample(example) + \"...\"}</option>\r\n                );\r\n              })}\r\n          </select>\r\n        </div>\r\n\r\n       {/*\r\n         * TODO: This is where you add your input fields.  You shouldn't have to change any of the\r\n         * code in render() above here.  We're giving a couple of example inputs here, one for a\r\n         * larger piece of text, like a paragraph (the `textarea`) and one for a shorter piece of\r\n         * text, like a question (the `input`).  You'll probably want to change the variable names\r\n         * here to match the input variable names in your model.\r\n         */}\r\n\r\n        <div className=\"form__field\">\r\n          <label>Passage</label>\r\n          <textarea ref={(x) => this.passage = x} type=\"text\"></textarea>\r\n        </div>\r\n        <div className=\"form__field\">\r\n          <label>Question</label>\r\n          <input ref={(x) => this.question = x} type=\"text\"/>\r\n        </div>\r\n\r\n       {/* You also shouldn't have to change anything below here. */}\r\n\r\n        <div className=\"form__field form__field--btn\">\r\n          <Button enabled={outputState !== \"working\"} onClick={this.onClick} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModelInput;\r\n","import React from 'react';\r\n\r\nclass ModelOutput extends React.Component {\r\n  render() {\r\n\r\n    const { outputs } = this.props;\r\n\r\n    // TODO: `outputs` will be the json dictionary returned by your predictor.  You can pull out\r\n    // whatever you want here and visualize it.  We're giving some examples of different return\r\n    // types you might have.  Change names for data types you want, and delete anything you don't\r\n    // need.\r\n    var answer = outputs['answer'];\r\n\r\n    return (\r\n      <div className=\"model__content\">\r\n\r\n       {/*\r\n         * TODO: This is where you display your output.  You can show whatever you want, however\r\n         * you want.  We've got a few examples, of text-based output, and of visualizing model\r\n         * internals using heat maps.\r\n         */}\r\n\r\n        <div className=\"form__field\">\r\n          <label>Answer</label>\r\n          <div className=\"model__content__summary\"><pre>{ JSON.stringify(answer, null, 2) }</pre></div>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModelOutput;\r\n","import React from 'react';\r\nimport { API_ROOT } from '../api-config';\r\nimport {PaneLeft, PaneRight} from '../model_components/Pane'\r\nimport ModelInput from './ModelInput'\r\nimport ModelOutput from './ModelOutput'\r\n\r\n\r\nclass ModelComponent extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        outputState: \"empty\",  // valid values: \"working\", \"empty\", \"received\", \"error\"\r\n        responseData: null\r\n      };\r\n\r\n      this.runModel = this.runModel.bind(this);\r\n    }\r\n\r\n    runModel(inputs) {\r\n      this.setState({outputState: \"working\"});\r\n\r\n      fetch(`${API_ROOT}/predict`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(inputs)\r\n      }).then((response) => {\r\n        return response.json();\r\n      }).then((json) => {\r\n        this.setState({responseData: json, outputState: 'received'})\r\n      }).catch((error) => {\r\n        console.error(error);\r\n        this.setState({outputState: \"error\"});\r\n      });\r\n    }\r\n\r\n    render() {\r\n      const { outputState, responseData } = this.state;\r\n\r\n      return (\r\n        <div className=\"pane-container\">\r\n          <div className=\"pane model\">\r\n            <PaneLeft>\r\n              <ModelInput runModel={this.runModel} outputState={this.state.outputState}/>\r\n            </PaneLeft>\r\n            <PaneRight outputState={outputState}>\r\n              <ModelOutput outputs={responseData}/>\r\n            </PaneRight>\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n    }\r\n}\r\n\r\nexport default ModelComponent;\r\n","export function mapToArray(json, key_name) {\r\n    return Object.keys(json).map(function(key) {\r\n        json[key][key_name] = key;\r\n        return json[key];\r\n    });\r\n}\r\n\r\nexport function intersect(dataArr, accessor, transformToSingle) {\r\n    const pointers = Array.apply(null, {length: dataArr.length}).map(() => 0);\r\n\r\n    const intersection = [];\r\n    let maxIndex = 0;\r\n    let agreements = 0;\r\n    while (true) {\r\n        while (agreements < dataArr.length) {\r\n            for (let i=0; i < dataArr.length; i++) {\r\n                const data = dataArr[i];\r\n        \r\n                let currentIndex = accessor(data[pointers[i]]);\r\n                while (currentIndex < maxIndex) {\r\n                    pointers[i]++;\r\n                    if (pointers[i] === data.length) {\r\n                        return intersection;\r\n                    }\r\n    \r\n                    currentIndex = accessor(data[pointers[i]]);\r\n                }\r\n                if (currentIndex > maxIndex) {\r\n                    maxIndex = currentIndex;\r\n                    agreements = 1;\r\n                } else {\r\n                    agreements++;\r\n                }\r\n            }\r\n        }\r\n\r\n        let sameItems = dataArr.reduce((sameItems, data, i) => {\r\n            sameItems.push(data[pointers[i]])\r\n            return sameItems;\r\n        }, [])\r\n\r\n        let item = transformToSingle(sameItems);\r\n        if (item) {\r\n            intersection.push(item);\r\n        }\r\n        maxIndex += 1;\r\n        agreements = 0;\r\n    }\r\n}\r\n\r\nexport function areSetsEqual(set, otherSet) {\r\n    if (set.size !== otherSet.size) return false;\r\n    for (let item in set) {\r\n        if (!otherSet.has(item)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function isChanged(changeSignals, obj, otherObj, debug, sourceName) {\r\n    const changes = []\r\n    for (let i = 0; i < changeSignals.length; i++) {\r\n        const changeSignal = changeSignals[i];\r\n        if (obj[changeSignal] !== otherObj[changeSignal]) {\r\n            if (debug) {\r\n                changes.push(changeSignal);\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    if (debug) {\r\n        let changed = changes.length > 0;\r\n\r\n        if (changed) {\r\n            console.log(`${sourceName} Caused update: ${changes.join(', ')}`);\r\n        }\r\n        return changed;\r\n    }\r\n}\r\n\r\nexport function shouldUpdate(props_updateSignals, state_updateSignals, props, state, nextProps, nextState, debug, componentName) {\r\n    \r\n    const propsUpdated = isChanged(props_updateSignals, props, nextProps, debug, `[${componentName}][props]`)\r\n    const stateUpdated = isChanged(state_updateSignals, state, nextState, debug, `[${componentName}][state]`)\r\n\r\n    return propsUpdated || stateUpdated;\r\n}\r\n\r\nexport function displayIndexToViewIndex(displayIndex, page, pageSize) {\r\n    if (Math.floor(displayIndex / pageSize) === page) {\r\n        const viewIndex = displayIndex % pageSize;\r\n        return viewIndex;\r\n    }\r\n}\r\n\r\nexport function displayIndexesToViewIndex(displayIndexes, page, pageSize, returnObject=false) {\r\n    return displayIndexes.reduce((acuumulator, displayIndex) => {\r\n        const viewIndex = displayIndexToViewIndex(displayIndex, page, pageSize)\r\n        if (viewIndex !== undefined) {\r\n            if (returnObject) {\r\n                acuumulator[viewIndex] = true;\r\n            } else {\r\n                acuumulator.push(viewIndex)\r\n            }\r\n        }\r\n        return acuumulator;\r\n    }, returnObject ? {} : []);\r\n}\r\n\r\nexport function viewIndexToDisplayIndex(viewIndex, page, pageSize) {\r\n    const displayIndex = (pageSize * page) + viewIndex;\r\n    return displayIndex;\r\n}\r\n\r\nexport function viewIndexToDisplayIndexes(viewIndexes, page, pageSize, returnObject=false) {\r\n    return viewIndexes.reduce((acuumulator, viewIndex) => {\r\n        const displayIndex = viewIndexToDisplayIndex(viewIndex, page, pageSize)\r\n        if (returnObject) {\r\n            acuumulator[displayIndex] = true;\r\n        } else {\r\n            acuumulator.push(displayIndex)\r\n        }\r\n        return acuumulator;\r\n    }, returnObject ? {} : []);\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Button\r\n} from 'reactstrap';\r\n\r\nclass FileInputButton extends React.PureComponent {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.fileInputRef = React.createRef();\r\n\t\tthis.simulateClick = this.simulateClick.bind(this);\r\n\t\tthis.change = this.change.bind(this);\r\n\t\tthis.state = {\r\n\t\t\tfile: undefined\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tif (prevState.file !== this.state.file) {\r\n\t\t\tthis.props.onChange(this.state.file);\r\n\t\t}\r\n\t}\r\n\r\n\tsimulateClick() {\r\n\t\tthis.fileInputRef.current.click();\r\n\t}\r\n\r\n    change(files) {\r\n\t\tlet selectedFile;\r\n        if (files.length > 0) {\r\n            const file = files[0]\r\n            if (file) {\r\n\t\t\t\tselectedFile = file;\r\n            }\r\n\t\t}\r\n\r\n\t\tthis.setState({ \r\n\t\t\tfile: selectedFile\r\n\t\t});\r\n    }\r\n\r\n  \trender() {      \r\n\t\treturn <div>\r\n\t\t\t<input ref={this.fileInputRef} style={{'display': 'none'}} type='file' id='file' accept={this.props.accept} onChange={ (e) => this.change(e.target.files) } />\r\n\t\t\t<Button style={this.props.style} color={this.props.color} size={this.props.size} onClick={this.simulateClick}>\r\n\t\t\t\t{this.props.text}\r\n\t\t\t</Button>\r\n\t\t\t{this.state.file ? this.state.file.name : ''}\r\n\t\t</div>\r\n  }\r\n}\r\n\r\nexport default FileInputButton;\r\n","import React from 'react';\r\nimport { mapToArray } from '../../../Utils'\r\nimport FileInputButton from '../../../file_input_button/FileInputButton';\r\n\r\nclass DatasetLocalSelector extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.change = this.change.bind(this);\r\n        this.state = {\r\n            dataset: undefined\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.dataset !== this.state.dataset) {\r\n            this.props.onChange(this.state.dataset);\r\n        }\r\n    }\r\n\r\n    change(file) {\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onloadend = (e) => {\r\n                const array = mapToArray(JSON.parse(e.target.result), 'passage_id');\r\n                this.setState({ \r\n                    dataset: array \r\n                });\r\n            };\r\n            reader.readAsText(file);\r\n        } else {\r\n            this.setState({ \r\n                dataset: undefined \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <FileInputButton accept='.json' text='Choose File' size='md' color='primary' style={{width: '100%'}}\r\n                onChange={this.change}/>\r\n    }\r\n}\r\n\r\nexport default DatasetLocalSelector;\r\n","import React from 'react';\r\nimport { API_ROOT } from '../../../../api-config';\r\nimport { mapToArray } from '../../../Utils';\r\nimport {\r\n    Dropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem\r\n} from 'reactstrap';\r\n\r\nclass DatasetListSelector extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggle = this.toggle.bind(this);\r\n        this.change = this.change.bind(this);\r\n        this.state = {\r\n            dropdownOpen: false,\r\n            datasets_names: [],\r\n            selected: undefined\r\n        };\r\n    }\r\n\r\n    toggle() {\r\n        this.setState(prevState => ({\r\n          dropdownOpen: !prevState.dropdownOpen\r\n        }));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.mounted = true;\r\n        this.getDatasetList();\r\n    }\r\n    \r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.selected !== this.state.selected) {\r\n            this.props.onChange(undefined);\r\n            this.getDataset(this.state.selected);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.mounted = false;\r\n    }\r\n\r\n    change(e) {\r\n        this.setState({selected: e.currentTarget.getAttribute(\"dataset-name\")});\r\n    }\r\n\r\n    getDatasetList() {\r\n        fetch(`${API_ROOT}/dataset-list`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            } \r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((json) => {\r\n            if (this.mounted) {\r\n                this.setState({datasets_names: json, selected: json.length > 0 ? json[0] : undefined})\r\n            }\r\n        }).catch((error) => {\r\n            console.error(error);\r\n        });\r\n    }\r\n\r\n    getDataset(dataset_name) {\r\n        if (dataset_name) {\r\n\r\n            fetch(`${API_ROOT}/dataset?name=${encodeURIComponent(dataset_name)}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                } \r\n            }).then((response) => {\r\n                return response.json();\r\n            }).then((json) => {\r\n                const array = mapToArray(json, 'passage_id')\r\n                this.props.onChange(array);\r\n            }).catch((error) => {\r\n                console.error(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const datasets_names = this.state.datasets_names;\r\n\r\n        return (\r\n          <Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggle}>\r\n            <DropdownToggle color=\"primary\" caret style={{width: '100%'}}>\r\n                {this.state.selected ? this.state.selected : \"Select...\"}\r\n            </DropdownToggle>\r\n            <DropdownMenu>\r\n                {datasets_names.map(dataset_name => <DropdownItem onClick={this.change} key={dataset_name} dataset-name={dataset_name}>{dataset_name}</DropdownItem>)}\r\n            </DropdownMenu>\r\n          </Dropdown>\r\n        );\r\n      }\r\n}\r\n\r\nexport default DatasetListSelector;\r\n","import React from 'react';\r\nimport {\r\n    Input,\r\n    FormGroup,\r\n    Label\r\n} from 'reactstrap';\r\n\r\nclass Checkbox extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.change = this.change.bind(this);\r\n        this.state = { \r\n            checked: this.props.checked\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        this.props.onChange(this.state.checked)\r\n    }\r\n\r\n    change() {\r\n        this.setState({ checked: !this.state.checked });\r\n    }\r\n\r\n    render() {\r\n        return <FormGroup check style={{display: 'inline', ...this.props.style}}>\r\n            <Label check>\r\n                <Input type=\"checkbox\" \r\n                style={(this.props.style && \r\n                        this.props.style.fontSize && \r\n                        this.props.style.fontSize === 'smaller') ? {marginLeft: '-1rem', marginTop: '0.15rem'}: {}}\r\n                onChange={this.change}\r\n                checked={this.state.checked || false} \r\n                />{this.props.text}\r\n            </Label>\r\n        </FormGroup>;\r\n    }\r\n}\r\n \r\nexport default Checkbox;","import React from 'react';\r\nimport DatasetLocalSelector from './DatasetLocalSelector';\r\nimport DatasetListSelector from './DatasetListSelector';\r\nimport {\r\n    ListGroup,\r\n    ListGroupItem\r\n} from 'reactstrap';\r\nimport Checkbox from '../../../checkbox/Checkbox';\r\n\r\nclass DatasetLoader extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.useLocalDatasetChange = this.useLocalDatasetChange.bind(this);\r\n        this.datasetChange = this.datasetChange.bind(this);\r\n        this.state = {\r\n            dataset: undefined,\r\n            useLocalDataset: this.props.useLocalDataset\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.dataset !== this.state.dataset) {\r\n            this.props.onDatasetChange(this.state.dataset);\r\n        }\r\n    }\r\n\r\n    useLocalDatasetChange(newChecked) {\r\n        this.setState({ \r\n            useLocalDataset: newChecked,\r\n            dataset: undefined\r\n        });\r\n    }\r\n\r\n    datasetChange(dataset) {\r\n        this.setState({ dataset: dataset })\r\n    }\r\n\r\n    render() {\r\n        return <ListGroup>\r\n                {this.props.allowSourceSelection ? <ListGroupItem>\r\n                    <Checkbox text={'Use Local Dataset'} \r\n                            checked={this.state.useLocalDataset} \r\n                            onChange={this.useLocalDatasetChange}></Checkbox>\r\n                </ListGroupItem> : null}\r\n                <ListGroupItem>\r\n                    <DatasetSelector onChange={this.datasetChange} local={this.state.useLocalDataset}/>\r\n                </ListGroupItem>\r\n            </ListGroup>\r\n    }\r\n}\r\n\r\nfunction DatasetSelector(props) {\r\n    if (props.local) {\r\n        return <DatasetLocalSelector onChange={props.onChange} />\r\n    }\r\n    return <DatasetListSelector onChange={props.onChange} />\r\n}\r\n\r\nexport default DatasetLoader;\r\n","import React from 'react';\r\nimport FileInputButton from '../../file_input_button/FileInputButton';\r\n\r\nclass PredictionsLoader extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.change = this.change.bind(this);\r\n        this.state = {\r\n            predictions: undefined\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.predictions !== this.state.predictions) {\r\n            this.props.onChange(this.state.predictions);\r\n        }\r\n    }\r\n\r\n    change(file) {\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onloadend = (e) => {\r\n                const predictions = [];\r\n                e.target.result.split('\\n').forEach(line => {\r\n                    if (line) {\r\n                        predictions.push(JSON.parse(line));\r\n                    }\r\n                });\r\n                this.setState({ \r\n                    predictions: predictions \r\n                });\r\n            };\r\n            reader.readAsText(file);\r\n        } else {\r\n            this.setState({ \r\n                predictions: undefined \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <FileInputButton accept='.json, .jsonl' text='Choose File' size='md' color='primary' style={{width: '100%'}}\r\n        onChange={this.change}/>\r\n    }\r\n}\r\n\r\nexport default PredictionsLoader;\r\n","\r\nexport const noAnswerType = {'key': 'none', 'value': 'None'};\r\nexport const noPredictionType = {'key': 'none', 'value': 'None'};\r\nexport const answerTypesConst = [\r\n    {'key': 'multi_span', 'value': 'Multi Span', 'accessor': 'spans'},\r\n    {'key': 'single_span', 'value': 'Single Span', 'accessor': 'spans'},\r\n    {'key': 'number', 'value': 'Number', 'accessor': 'number'},\r\n    {'key': 'date', 'value': 'Date', 'accessor': 'date'}\r\n];\r\n\r\nexport function getAnswerStringForDisplayAndType(answer) {\r\n    let displayAnswer = '';\r\n    let answerType = noAnswerType;\r\n    if ('number' in answer && (answer['number'] === 0 || answer['number'])) {\r\n        const number = answer['number'];\r\n        const number_value = Number(number);\r\n        if (!isNaN(number_value)) {\r\n            displayAnswer = number_value.toString();\r\n        } else {\r\n            displayAnswer = number;\r\n        }\r\n        answerType = answerTypesConst[2]\r\n    } else if ('spans' in answer && answer['spans'] && answer['spans'].length > 0) {\r\n        const spans = answer['spans'];\r\n        if (spans.length === 1) {\r\n            displayAnswer = spans[0];\r\n            answerType = answerTypesConst[1];\r\n        } else {\r\n            displayAnswer = [...spans].sort().join(' ┆ ');           \r\n            answerType = answerTypesConst[0];\r\n        }\r\n    } else if ('date' in answer && answer['date']) {\r\n        const date = answer['date']\r\n        if (['day', 'month', 'year'].some(prop => date[prop] === 0 || date[prop])) {\r\n            displayAnswer = JSON.stringify(date, null, 2);\r\n            answerType = answerTypesConst[3]\r\n        }\r\n    }\r\n    return {'displayAnswer': displayAnswer, answerType}\r\n}\r\n\r\nexport function getAnswerForEvaluation(answer) {\r\n    // based on answer_json_to_strings from drop_eval.py of allennlp\r\n    let answerForEvaluation = [];\r\n    if ('number' in answer && (answer['number'] === 0 || answer['number'])) {\r\n        const number = answer['number'];\r\n        const number_value = Number(number);\r\n        if (!isNaN(number_value)) {\r\n            answerForEvaluation = [number_value.toString()];\r\n        } else {\r\n            answerForEvaluation = [String(number)];\r\n        }\r\n    } else if ('spans' in answer && answer['spans'] && answer['spans'].length > 0) {\r\n        answerForEvaluation = answer['spans']\r\n    } else if ('date' in answer && answer['date']) {\r\n        const date = answer['date']\r\n        answerForEvaluation = [];\r\n        ['day', 'month', 'year'].forEach(prop => {\r\n            if (date[prop] === 0 || date[prop]) {\r\n                answerForEvaluation.push(String(date[prop]))\r\n            }\r\n        });\r\n    }\r\n    return answerForEvaluation.sort();\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Input,\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Button\r\n} from 'reactstrap';\r\nimport Checkbox from '../../checkbox/Checkbox';\r\n\r\nclass SearchFilter extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchTextChange = this.searchTextChange.bind(this);\r\n        this.filterQuestionsChange = this.filterQuestionsChange.bind(this);\r\n        this.submit = this.submit.bind(this);\r\n        this.state = { \r\n            ...this.props.searchProps,\r\n            draftSearchText: '',\r\n            draftFilterQuestions: this.props.searchProps.filterQuestions\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.searchText !== this.state.searchText || \r\n            prevState.filterQuestions !== this.state.filterQuestions) {\r\n            this.props.onChange({\r\n                searchText: this.state.searchText,\r\n                filterQuestions: this.state.filterQuestions\r\n            });\r\n        }\r\n    }\r\n\r\n    searchTextChange(event) {\r\n        const newState = { draftSearchText: event.target.value }\r\n        if (this.props.instantSearch) {\r\n            newState.searchText = prepareText(newState.draftSearchText);\r\n        }\r\n        this.setState(newState);\r\n    }\r\n\r\n    filterQuestionsChange(newChecked) {\r\n        const filterQuestions = newChecked;\r\n        const newState = { draftFilterQuestions: filterQuestions }\r\n        if (this.props.instantSearch) {\r\n            newState.filterQuestions = newState.draftFilterQuestions;\r\n        }\r\n        this.setState(newState);\r\n    }\r\n\r\n    submit(event) {\r\n        this.setState({ \r\n            searchText: prepareText(this.state.draftSearchText),\r\n            filterQuestions: this.state.draftFilterQuestions\r\n        });\r\n    }\r\n\r\n    render() { \r\n            return <div>\r\n                <ListGroup>\r\n                    <ListGroupItem>\r\n                        <Input type='text' value={this.state.draftSearchText} onChange={this.searchTextChange} />\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                        <Checkbox text={'Filter Questions'} \r\n                                checked={this.state.draftFilterQuestions}\r\n                                onChange={this.filterQuestionsChange}></Checkbox>\r\n                    </ListGroupItem>\r\n                </ListGroup>\r\n                {!this.props.instantSearch ? \r\n                <ListGroup className='list-group-horizontal mt-1'>\r\n                    <ListGroupItem style={{width: '100%'}}>\r\n                        Searched{this.state.filterQuestions ? ' (Filter Questions)': ''}: <span className='text-info'>{this.state.searchText}</span>\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                        <Button color='primary' onClick={this.submit}>Submit</Button>\r\n                    </ListGroupItem>\r\n                </ListGroup> : null}\r\n            </div>;\r\n    }\r\n}\r\n\r\nfunction prepareText(text) {\r\n    return text.toLowerCase();\r\n}\r\n\r\nexport default SearchFilter;","import React from 'react';\r\nimport {\r\n    Input,\r\n    FormGroup,\r\n    Label\r\n} from 'reactstrap';\r\nimport { isChanged } from '../Utils';\r\n\r\nclass CheckboxList extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.change = this.change.bind(this);\r\n        this.state = { \r\n            checked: this.props.checked\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (isChanged(['checked'], prevProps, this.props)) {\r\n            this.setState({ checked: this.props.checked }, () => {\r\n                this.props.onChange(this.state.checked)\r\n            });\r\n        }\r\n    }\r\n\r\n    change(e) {\r\n        const changedKey = e.currentTarget.getAttribute('option-key');\r\n        const changedKeyIndex = this.state.checked.indexOf(changedKey);\r\n        let newChecked;\r\n        if (changedKeyIndex !== -1) {\r\n            newChecked = [...this.state.checked];\r\n            newChecked.splice(changedKeyIndex, 1);\r\n        } else {\r\n            newChecked = [...this.state.checked, changedKey];\r\n        }\r\n        this.setState({ checked: newChecked }, () => this.props.onChange(this.state.checked));\r\n    }\r\n\r\n    render() {\r\n        return this.props.options.map(option => {\r\n            return <FormGroup check key={option.key}>\r\n                        <Label check>\r\n                            <Input type=\"checkbox\" \r\n                            onChange={this.change}\r\n                            option-key={option.key}\r\n                            checked={(this.state.checked && \r\n                                this.state.checked.includes(option.key)) || \r\n                                false} \r\n                            />{option.value}\r\n                        </Label>\r\n                    </FormGroup>\r\n        });\r\n    }\r\n}\r\n \r\nexport default CheckboxList;","import React from 'react';\r\nimport {\r\n    Input,\r\n    InputGroupAddon,\r\n    InputGroupText,\r\n    InputGroup\r\n} from 'reactstrap';\r\nimport { isChanged } from '../Utils';\r\n\r\nclass RangeInput extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.lowChange = this.lowChange.bind(this);\r\n        this.highChange = this.highChange.bind(this);\r\n        this.state = { \r\n            low: this.props.initial.low,\r\n            high: this.props.initial.high,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (isChanged(['low', 'high'], prevState, this.state)) {\r\n            this.props.onChange(this.props.metric, this.state)\r\n        }\r\n    }\r\n\r\n    lowChange(event) {\r\n        if (!isNaN(event.target.value)) {\r\n            const newLow = parseFloat(event.target.value)\r\n            this.setState({ \r\n                low: newLow\r\n            });\r\n        }\r\n    }\r\n    highChange(event) {\r\n        if (!isNaN(event.target.value)) {\r\n            const newHigh = parseFloat(event.target.value)\r\n            this.setState({ \r\n                high: newHigh\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n        <InputGroup tag='span'>\r\n            <Input onChange={this.lowChange} value={this.state.low} type='number' step={this.props.step} style={{padding: '0px', textAlign: 'center'}}></Input>\r\n            <InputGroupAddon tag='span' addonType=\"append\">\r\n                <InputGroupText>≤</InputGroupText>\r\n            </InputGroupAddon>\r\n            <span style={{display: 'flex', alignItems: 'center', margin: '5px'}}>{this.props.metric}</span>\r\n            <InputGroupAddon tag='span' addonType=\"prepend\">\r\n                <InputGroupText>≤</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onChange={this.highChange} value={this.state.high} type='number' step={this.props.step} style={{padding: '0px', textAlign: 'center'}}></Input>\r\n        </InputGroup>\r\n      </div>;\r\n    }\r\n}\r\n \r\nexport default RangeInput;","import React from 'react';\r\nimport DatasetLoader from './dataset-loader/DatasetLoader';\r\nimport PredictionsLoader from './PredictionsLoader';\r\nimport {\r\n    ListGroup,\r\n    ListGroupItem,\r\n    CardGroup,\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    Button,\r\n    Container\r\n} from 'reactstrap';\r\nimport { shouldUpdate, isChanged } from '../../Utils';\r\nimport { answerTypesConst } from '../AnswersUtils';\r\nimport SearchFilter from './SearchFilter';\r\nimport CheckboxList from '../../checkbox_list/CheckboxList';\r\nimport RangeInput from '../../range_input/RangeInput';\r\nimport Checkbox from '../../checkbox/Checkbox';\r\n\r\nconst props_updateSignals = ['predictionTypes']\r\nconst state_updateSignals = ['dataset', 'predictions', 'filteredAnswerTypes', 'answerTypeFilterFirstOnly', 'filteredPredictionTypes', 'searchProps', 'F1Range', 'EMRange']\r\nclass ExplorerSettings extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.datasetChange = this.datasetChange.bind(this);\r\n        this.predictionsChange = this.predictionsChange.bind(this);\r\n        this.filteredAnswerTypesChange = this.filteredAnswerTypesChange.bind(this);\r\n        this.answerTypeFilterFirstOnlyChange = this.answerTypeFilterFirstOnlyChange.bind(this);\r\n        this.filteredPredictionTypesChange = this.filteredPredictionTypesChange.bind(this);\r\n        this.searchFilterChange = this.searchFilterChange.bind(this);\r\n        this.rangeFilterChange = this.rangeFilterChange.bind(this);\r\n        this.state = {\r\n            filteredAnswerTypes: this.props.filteredAnswerTypes,\r\n            answerTypeFilterFirstOnly: this.props.answerTypeFilterFirstOnly,\r\n            filteredPredictionTypes: this.props.filteredPredictionTypes,\r\n            searchProps: this.props.searchProps,\r\n            F1Range: this.props.F1Range,\r\n            EMRange: this.props.EMRange\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        const update = shouldUpdate(props_updateSignals, state_updateSignals, \r\n            this.props, this.state, \r\n            nextProps, nextState, \r\n            true, this.constructor.name);\r\n        return update;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (isChanged(['predictionTypes'], prevProps, this.props)) {\r\n            this.setState({ filteredPredictionTypes: this.props.predictionTypes.map(predictionType => predictionType.key) });\r\n        }\r\n        this.props.onChange(this.state);\r\n    }\r\n\r\n    datasetChange(dataset) {\r\n        this.setState({ dataset });\r\n    }\r\n\r\n    predictionsChange(predictions) {\r\n        this.setState({ predictions });\r\n    }\r\n\r\n    filteredAnswerTypesChange(filteredAnswerTypes) {\r\n        this.setState({ filteredAnswerTypes });\r\n    }\r\n    \r\n    answerTypeFilterFirstOnlyChange(answerTypeFilterFirstOnly) {\r\n        this.setState({ answerTypeFilterFirstOnly });\r\n    }\r\n\r\n    filteredPredictionTypesChange(filteredPredictionTypes) {\r\n        this.setState({ filteredPredictionTypes });\r\n    }\r\n\r\n    searchFilterChange(searchProps) {\r\n        this.setState({ searchProps });\r\n    }\r\n\r\n    rangeFilterChange(metric, range) {\r\n        this.setState({ [`${metric}Range`]: range });\r\n    }\r\n\r\n    render() {\r\n        return <Container className='ml-0' fluid>\r\n            <CardGroup className='row'>\r\n                <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Dataset</CardHeader>\r\n                    <CardBody>\r\n                        <DatasetLoader onDatasetChange={this.datasetChange} \r\n                                        useLocalDataset={this.props.useLocalDataset} \r\n                                        allowSourceSelection={this.props.allowSourceSelection} />\r\n                    </CardBody>\r\n                </Card>\r\n                <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Table Operations</CardHeader>\r\n                    <CardBody style={{height: 0, overflow: 'auto'}}>\r\n                        <ListGroup>\r\n                            <ListGroupItem>\r\n                                <Button color='primary' size='sm' style={{width: '100%'}} onClick={() => {\r\n                                    if (this.props.expandAllFunc) {\r\n                                        this.props.expandAllFunc()\r\n                                    }\r\n                                }}>EXPAND ALL\r\n                                </Button>\r\n                            </ListGroupItem>\r\n                            <ListGroupItem>\r\n                                <Button color='primary' size='sm' style={{width: '100%'}} onClick={() => {\r\n                                    if (this.props.collapseAllFunc) {\r\n                                        this.props.collapseAllFunc()\r\n                                    }\r\n                                }}>COLLAPSE ALL\r\n                                </Button>\r\n                            </ListGroupItem>\r\n                            <ListGroupItem>\r\n                                <Button color='primary' size='sm' style={{width: '100%'}} onClick={() => {\r\n                                    if (this.props.clearSelectedAnswersFunc) {\r\n                                        this.props.clearSelectedAnswersFunc()\r\n                                    }\r\n                                }}>CLEAR SELECTED ANSWERS\r\n                                </Button>\r\n                            </ListGroupItem>\r\n                        </ListGroup>\r\n                    </CardBody>\r\n                </Card>\r\n                <Card className='col-sm-2 p-0'>\r\n                    <CardHeader style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                        <span style={{paddingRight: '3px'}}>Answer Type Filter</span>\r\n                        <Checkbox text={'Primary Only'} style={{fontSize: 'smaller'}}\r\n                                checked={this.state.answerTypeFilterFirstOnly}\r\n                                onChange={this.answerTypeFilterFirstOnlyChange}></Checkbox>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                        <CheckboxList onChange={this.filteredAnswerTypesChange} checked={this.state.filteredAnswerTypes} options={answerTypesConst}></CheckboxList>\r\n                    </CardBody>\r\n                </Card>\r\n                <Card className='col-sm-6 p-0'>\r\n                    <CardHeader>Search</CardHeader>\r\n                    <CardBody>\r\n                        <SearchFilter onChange={this.searchFilterChange} \r\n                        instantSearch={this.props.instantSearch} searchProps={this.props.searchProps} />\r\n                    </CardBody>\r\n                </Card>\r\n            </CardGroup>\r\n            <CardGroup className='row'>\r\n                <Card className='col-sm-2 p-0'>\r\n                        <CardHeader>Predictions</CardHeader>\r\n                        <CardBody>\r\n                            <PredictionsLoader onChange={this.predictionsChange} />\r\n                        </CardBody>\r\n                </Card>\r\n                {this.state.predictions ? <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Prediction Head</CardHeader>\r\n                    <CardBody>\r\n                        <CheckboxList onChange={this.filteredPredictionTypesChange} checked={this.state.filteredPredictionTypes} options={this.props.predictionTypes}></CheckboxList>\r\n                    </CardBody>\r\n                </Card> : null}\r\n                {this.state.predictions ? <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Score Filter</CardHeader>\r\n                    <CardBody>\r\n                    <ListGroup>\r\n                    <ListGroupItem>\r\n                        <RangeInput metric='F1' initial={this.props.F1Range} step='0.01' onChange={this.rangeFilterChange}></RangeInput>\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                        <RangeInput metric='EM' initial={this.props.EMRange} step='0.01' onChange={this.rangeFilterChange}></RangeInput>\r\n                    </ListGroupItem>\r\n                    </ListGroup>\r\n                    </CardBody>\r\n                </Card> : null}\r\n            </CardGroup>\r\n        </Container>\r\n    }\r\n}\r\n\r\nexport default ExplorerSettings;","import styled from 'styled-components';\r\n\r\nconst WrapDiv = styled.div`\r\n    white-space: pre-wrap;       /* css-3 */\r\n    white-space: -moz-pre-wrap;  /* Mozilla, since 1999 */\r\n    white-space: -pre-wrap;      /* Opera 4-6 */\r\n    white-space: -o-pre-wrap;    /* Opera 7 */\r\n    word-wrap: break-word;       /* Internet Explorer 5.5+ */\r\n`;\r\n\r\nexport default WrapDiv;","import { answerTypesConst, getAnswerStringForDisplayAndType, getAnswerForEvaluation,\r\n    noAnswerType, noPredictionType } from '../AnswersUtils';\r\nimport { intersect } from '../../Utils';\r\n\r\nexport function processDataHelper(dataset, predictions) {\r\n\r\n    let hasValidatedAnswers = false;\r\n    let hasValidPredictions = false;\r\n    let passage_id_to_displayIndex = {};\r\n    let passage_id_to_queries_displayIndexes = {};\r\n    let predictionTypes = []\r\n    let data = [];\r\n    if (dataset) {\r\n        const reduced = dataset.reduce(process_row, {\r\n            data: [],\r\n            hasValidatedAnswers: false,\r\n            passage_id_to_displayIndex: {},\r\n            passage_id_to_queries_displayIndexes: {}\r\n        });\r\n        data = reduced.data;\r\n        hasValidatedAnswers = reduced.hasValidatedAnswers;\r\n        passage_id_to_displayIndex = reduced.passage_id_to_displayIndex;\r\n        passage_id_to_queries_displayIndexes = reduced.passage_id_to_queries_displayIndexes;\r\n\r\n        if (predictions) {\r\n            const keyToPredictionType = {}\r\n            for (let i=0; i < predictions.length; i++) {\r\n                const prediction = predictions[i];\r\n\r\n                const passage_id = prediction.passage_id;\r\n                const query_id = prediction.query_id;\r\n\r\n                const passage_displayIndex =passage_id_to_displayIndex[passage_id];\r\n                if (passage_displayIndex !== undefined) {\r\n                    const row = data[passage_displayIndex];\r\n\r\n                    const query_displayIndex = passage_id_to_queries_displayIndexes[passage_id][query_id];\r\n                    if (query_displayIndex !== undefined) {\r\n                        hasValidPredictions = true;\r\n                        const qa_pair = row.qa_pairs[passage_id_to_queries_displayIndexes[passage_id][query_id]]\r\n\r\n                        let predictionType = keyToPredictionType[prediction.predicted_ability]\r\n                        if (!predictionType) {\r\n                            predictionType = keyToPredictionType[prediction.predicted_ability] = {\r\n                                'key': prediction.predicted_ability, \r\n                                'value': prediction.predicted_ability\r\n                            };\r\n                            predictionTypes.push(predictionType);\r\n                        }\r\n\r\n                        const predictionValue = prediction.answer.value;\r\n\r\n                        qa_pair.prediction = Array.isArray(predictionValue) ? predictionValue : [predictionValue];\r\n                        qa_pair.displayPrediction = getAnswerStringForDisplayAndType({'spans': qa_pair.prediction}).displayAnswer;\r\n                        qa_pair.evaluationPrediction = getAnswerForEvaluation({'spans': qa_pair.prediction});\r\n                        qa_pair.predictionType = predictionType;\r\n                        qa_pair.maximizingGroundTruth = prediction.maximizing_ground_truth.sort();\r\n                        qa_pair.f1 = prediction.f1;\r\n                        qa_pair.em = prediction.em;\r\n                        qa_pair.loss = prediction.loss;\r\n\r\n                        const maximizingGroundTruth = qa_pair.maximizingGroundTruth;\r\n                        const maximizingGroundTruthIndex = qa_pair.evaluationAnswers.findIndex(evaluationAnswer => {\r\n                            if (evaluationAnswer.length !== maximizingGroundTruth.length) {\r\n                                return false;\r\n                            }\r\n                            for (let i = 0; i < evaluationAnswer.length; i++) {\r\n                                if (evaluationAnswer[i].toLowerCase() !== maximizingGroundTruth[i].toLowerCase()) {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                            return true;\r\n                        });\r\n                        if (maximizingGroundTruthIndex !== -1) {\r\n                            qa_pair.maximizingGroundTruthIndex = maximizingGroundTruthIndex;\r\n                        }\r\n                        \r\n                        const predictionSpans = prediction.answer.spans;\r\n                        if (predictionSpans && predictionSpans.length > 0) {\r\n                            qa_pair.predictionSpans = predictionSpans;\r\n                        }\r\n                    } else {\r\n                        continue;\r\n                    }\r\n                }\r\n                else {\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    predictionTypes.sort()\r\n    predictionTypes.push(noAnswerType)\r\n\r\n    return {\r\n        data,\r\n        hasValidatedAnswers,\r\n        hasValidPredictions,\r\n        predictionTypes\r\n    };\r\n}\r\n\r\nfunction process_row(accumulator, row, index) {\r\n    const passage_id = row.passage_id;\r\n    const passage_displayIndex = accumulator.data.length;\r\n\r\n    const reduced = row.qa_pairs.reduce(process_qa_pair, {\r\n        passage_id: passage_id, \r\n        qa_pairs: [],\r\n        hasValidatedAnswers: accumulator.hasValidatedAnswers,\r\n        query_id_to_displayIndex: {}\r\n    });\r\n    const qa_pairs = reduced.qa_pairs;\r\n    accumulator.hasValidatedAnswers = reduced.hasValidatedAnswers;\r\n    const query_id_to_displayIndex = reduced.query_id_to_displayIndex;\r\n\r\n    const hasQuestions = qa_pairs.length !== 0;\r\n    const isValid = hasQuestions;\r\n\r\n    if (isValid) {\r\n        row.passage = row.passage.trim();\r\n        const reduced_row = {\r\n            ...row,\r\n            qa_pairs,\r\n            passage_index: index\r\n        }\r\n        \r\n        accumulator.data.push(reduced_row);\r\n        accumulator.passage_id_to_displayIndex[passage_id] = passage_displayIndex;\r\n        accumulator.passage_id_to_queries_displayIndexes[passage_id] = query_id_to_displayIndex\r\n    }\r\n    return accumulator;\r\n}\r\n\r\nfunction process_qa_pair(accumulator, qa_pair, query_index) {\r\n    const query_displayIndex = accumulator.qa_pairs.length;\r\n    const passage_id = accumulator.passage_id;\r\n\r\n    if (!accumulator.hasValidatedAnswers && qa_pair.validated_answers && qa_pair.validated_answers.length > 0) {\r\n        accumulator.hasValidatedAnswers = true;\r\n    }\r\n\r\n    const {displayAnswer: firstDisplayAnswer, answerType: firstAnswerType} = getAnswerStringForDisplayAndType(qa_pair.answer);\r\n    const displayAnswers = [firstDisplayAnswer];\r\n    const answersTypes = [firstAnswerType];\r\n\r\n    const evaluationAnswers = [getAnswerForEvaluation(qa_pair.answer)]\r\n\r\n    if (firstAnswerType === noAnswerType) {\r\n        return accumulator;\r\n    }\r\n\r\n    if (qa_pair.validated_answers && qa_pair.validated_answers.length > 0) {\r\n        qa_pair.validated_answers.forEach(validatedAnswer => {\r\n            const evaluationAnswer = getAnswerForEvaluation(validatedAnswer)\r\n\r\n            const alreadyAdded = evaluationAnswers.some(addedEvaluationAnswer => {\r\n                if (addedEvaluationAnswer.length !== evaluationAnswer.length) {\r\n                    return false;\r\n                }\r\n                for (let i = 0; i < evaluationAnswer.length; i++) {\r\n                    if (evaluationAnswer[i].toLowerCase() !== addedEvaluationAnswer[i].toLowerCase()) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n\r\n            if (!alreadyAdded) {\r\n                const {displayAnswer, answerType} = getAnswerStringForDisplayAndType(validatedAnswer);\r\n                displayAnswers.push(displayAnswer);\r\n                answersTypes.push(answerType);\r\n\r\n                evaluationAnswers.push(getAnswerForEvaluation(validatedAnswer));\r\n            }\r\n        });\r\n    }\r\n    \r\n    qa_pair.question = qa_pair.question.trim();\r\n    accumulator.qa_pairs.push({\r\n        ...qa_pair,\r\n        evaluationAnswers,\r\n        displayAnswers,\r\n        answersTypes,\r\n        maximizingGroundTruthIndex: 0,\r\n        query_index,\r\n        passage_id\r\n    })\r\n    accumulator.query_id_to_displayIndex[qa_pair.query_id] = query_displayIndex;\r\n    \r\n    return accumulator;\r\n}\r\n\r\n\r\nexport function filterDataHelper(internals, filteredAnswerTypes, answerTypeFilterFirstOnly, filteredPredictionTypes, searchProps, F1Range, EMRange) {\r\n    const data = internals.data; \r\n    const filteredDataPerFilter = internals.filteredDataPerFilter;       \r\n\r\n    const searchText = searchProps.searchText;\r\n    const useTextSearch = Boolean(searchText);\r\n\r\n    if (useTextSearch) {\r\n        if (!filteredDataPerFilter.search) {\r\n            const reduced = data.reduce(searchReudcer_rows, {\r\n                filteredData: [],\r\n                searchProps,\r\n                hasValidPredictions: internals.hasValidPredictions\r\n            })\r\n            const result = reduced.filteredData;\r\n\r\n            filteredDataPerFilter.search = result;\r\n        }\r\n    }\r\n\r\n    if (!filteredDataPerFilter.answerTypes) {\r\n        if (filteredAnswerTypes.length > 0) {\r\n            if (filteredAnswerTypes.length < answerTypesConst.length) {\r\n                const reduced = data.reduce(typeFilterReudcer_rows, {\r\n                    filteredData: [],\r\n                    filteredTypes: filteredAnswerTypes,\r\n                    fields: ['answersTypes'],\r\n                    missingValue: noAnswerType,\r\n                    firstOnly: answerTypeFilterFirstOnly\r\n                });\r\n                const result = reduced.filteredData;\r\n\r\n                filteredDataPerFilter.answerTypes = result;\r\n            }\r\n        } else {\r\n            filteredDataPerFilter.answerTypes = [];\r\n        }\r\n    }\r\n\r\n    if (internals.hasValidPredictions && !filteredDataPerFilter.predictionTypes) {\r\n        if (filteredPredictionTypes.length > 0) {\r\n            const reduced = data.reduce(typeFilterReudcer_rows, {\r\n                filteredData: [],\r\n                filteredTypes: filteredPredictionTypes,\r\n                fields: ['predictionType'],\r\n                missingValue: noPredictionType\r\n            });\r\n            const result = reduced.filteredData;\r\n\r\n            filteredDataPerFilter.predictionTypes = result;\r\n        } else {\r\n            filteredDataPerFilter.predictionTypes = [];\r\n        }\r\n    }\r\n\r\n    if (internals.hasValidPredictions && !filteredDataPerFilter.F1Range) {\r\n        const range = F1Range;\r\n        if (range.low <= range.high) {\r\n            const reduced = data.reduce(rangeFilterReudcer_rows, {\r\n                filteredData: [],\r\n                range,\r\n                field: 'f1'\r\n            });\r\n            const result = reduced.filteredData;\r\n\r\n            filteredDataPerFilter.F1Range = result;\r\n        } else {\r\n            filteredDataPerFilter.F1Range = [];\r\n        }\r\n    }\r\n\r\n    if (internals.hasValidPredictions && !filteredDataPerFilter.EMRange) {\r\n        const range = EMRange;\r\n        if (range.low <= range.high) {\r\n            const reduced = data.reduce(rangeFilterReudcer_rows, {\r\n                filteredData: [],\r\n                range,\r\n                field: 'em'\r\n            });\r\n            const result = reduced.filteredData;\r\n\r\n            filteredDataPerFilter.EMRange = result;\r\n        } else {\r\n            filteredDataPerFilter.EMRange = [];\r\n        }\r\n    }\r\n\r\n    let filteredData = intersectFilteredData(filteredDataPerFilter, data.length);\r\n\r\n    if (!filteredData) {\r\n        filteredData = data;\r\n    }\r\n\r\n    // Add mean metrics for passage and overall?\r\n    const metrics = {\r\n        questionsCount: 0,\r\n        predictedCount: 0,\r\n        f1: 0,\r\n        em: 0\r\n    }\r\n\r\n    for (let i=0; i < filteredData.length; i++) {\r\n        const row = filteredData[i];\r\n\r\n        metrics.questionsCount += row.qa_pairs.length;\r\n\r\n        let row_predicted = 0;\r\n        let row_f1 = 0;\r\n        let row_em = 0;\r\n        if (internals.hasValidPredictions) {\r\n            for (let j=0; j < row.qa_pairs.length; j++) {\r\n                const qa_pair = row.qa_pairs[j];\r\n    \r\n                if (qa_pair.prediction) {\r\n                    row_predicted += 1;\r\n                    row_f1 += qa_pair.f1;\r\n                    row_em += qa_pair.em;\r\n                }\r\n            }\r\n        }\r\n        metrics.f1 += row_f1;\r\n        metrics.em += row_em;\r\n        metrics.predictedCount += row_predicted;\r\n\r\n        if (row_predicted > 0) {\r\n            row.f1 = row_f1 / row_predicted;\r\n            row.em = row_em / row_predicted;\r\n        }\r\n    }\r\n    if (metrics.predictedCount > 0) {\r\n        metrics.f1 /= metrics.predictedCount;\r\n        metrics.em /= metrics.predictedCount;\r\n    } else {\r\n        metrics.f1 = undefined;\r\n        metrics.em = undefined;\r\n    }\r\n\r\n\r\n    return {\r\n        filteredData,\r\n        filteredDataPerFilter,\r\n        metrics\r\n    };\r\n}\r\n\r\nfunction intersectFilteredData(filteredDataPerFilter) {\r\n    const filteredDataArr = Object.values(filteredDataPerFilter).filter(filteredData => Boolean(filteredData))\r\n    const filtersCount = filteredDataArr.length;\r\n\r\n    if (filtersCount === 0) {\r\n        return;\r\n    }\r\n\r\n    if (filtersCount === 1) {\r\n        return filteredDataArr[0];\r\n    }\r\n\r\n    const allNonEmpty = filteredDataArr.every(filteredData => filteredData.length > 0);\r\n    if (!allNonEmpty) {\r\n        return [];\r\n    }\r\n\r\n    return intersect(filteredDataArr, row => row.passage_index, intersectRows);\r\n}\r\n\r\nfunction intersectRows(sameRows) {\r\n    const qa_pairs_arr = sameRows.map(row => row.qa_pairs);\r\n\r\n    const filtered_qa_pairs = intersect(qa_pairs_arr, qa_pair => qa_pair.query_index, (sameQuestions) => {\r\n        return Object.assign({}, ...sameQuestions);\r\n    });\r\n\r\n    if (filtered_qa_pairs.length > 0) {\r\n        return Object.assign({}, ...sameRows, {'qa_pairs': filtered_qa_pairs});\r\n    }\r\n    return;\r\n}\r\n\r\n// Text Search Filtering\r\nfunction searchReudcer_rows(accumulator, row) {\r\n    const searchProps = accumulator.searchProps;\r\n    const searchText = searchProps.searchText;\r\n\r\n    const passageTextSearchValid = row.passage.toLowerCase().includes(searchText) || \r\n                                    row.passage_id.toLowerCase().includes(searchText);\r\n\r\n    let filtered_qa_pairs = row.qa_pairs;\r\n    let hasTextSearchValidQuestions = false;\r\n\r\n    if (searchProps.filterQuestions) {\r\n        filtered_qa_pairs = row.qa_pairs.filter(qa_pair => {\r\n            return isQuestionTextSearchValid(qa_pair, searchText, accumulator.hasValidPredictions);\r\n        });\r\n\r\n        hasTextSearchValidQuestions = filtered_qa_pairs.length > 0;\r\n\r\n    } else if (!passageTextSearchValid) {\r\n\r\n        hasTextSearchValidQuestions = row.qa_pairs.some(qa_pair => {\r\n            return isQuestionTextSearchValid(qa_pair, searchText, accumulator.hasValidPredictions);\r\n        });\r\n    }\r\n\r\n    const hasQuestions = filtered_qa_pairs.length > 0;\r\n    const isValid = (passageTextSearchValid && hasQuestions) || hasTextSearchValidQuestions;\r\n\r\n    if (isValid) {\r\n        accumulator.filteredData.push({\r\n            ...row,\r\n            qa_pairs: filtered_qa_pairs,\r\n        });\r\n    }\r\n    return accumulator;\r\n}\r\nfunction isQuestionTextSearchValid(qa_pair, searchText, hasValidPredictions) {\r\n    let result = qa_pair.question.toLowerCase().includes(searchText) ||\r\n                qa_pair.query_id.toLowerCase().includes(searchText);\r\n    if (result) {\r\n        return true;\r\n    }\r\n\r\n    for (let i = 0; i < qa_pair.evaluationAnswers.length; i++) {\r\n        const evaluationAnswer = qa_pair.evaluationAnswers[i];\r\n        for (let j = 0; j < evaluationAnswer.length; j++) {\r\n            result |= evaluationAnswer[j].toLowerCase().includes(searchText);\r\n\r\n            if (result) {\r\n                break;\r\n            }\r\n        }\r\n        if (result) {\r\n            break;\r\n        }\r\n    }\r\n    if (result) {\r\n        return true;\r\n    }\r\n\r\n    if (hasValidPredictions) {\r\n        const evaluationPrediction = qa_pair.evaluationPrediction;\r\n        if (evaluationPrediction) {\r\n            result = evaluationPrediction.some(x => {\r\n                return x.toLowerCase().includes(searchText)\r\n            });\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n// Type Filtering\r\nfunction typeFilterReudcer_rows(accumulator, row) {\r\n    const filteredTypes = accumulator.filteredTypes;\r\n\r\n    const { filtered_qa_pairs } = row.qa_pairs.reduce(typeFilterReudcer_qa_pairs, {\r\n        filtered_qa_pairs: [],\r\n        filteredTypes,\r\n        fields: accumulator.fields,\r\n        missingValue: accumulator.missingValue,\r\n        firstOnly: accumulator.firstOnly\r\n    });\r\n\r\n    const hasQuestions = filtered_qa_pairs.length > 0;\r\n    const isValid = hasQuestions;\r\n\r\n    if (isValid) {\r\n        accumulator.filteredData.push({\r\n            ...row,\r\n            qa_pairs: filtered_qa_pairs,\r\n        });\r\n    }\r\n    return accumulator;\r\n}\r\nfunction typeFilterReudcer_qa_pairs(accumulator, qa_pair) {\r\n    const filteredTypes = accumulator.filteredTypes;\r\n    const fields = accumulator.fields;\r\n    const firstOnly = accumulator.firstOnly;\r\n\r\n    let typeValid = false;\r\n    for (let i = 0; i < fields.length; i++) {\r\n        const field = fields[i];\r\n\r\n        const obj = qa_pair[field] ? qa_pair[field] : accumulator.missingValue;\r\n        if (Array.isArray(obj)) {\r\n            const arr = obj;\r\n            for (let j = 0; j < arr.length; j++) {\r\n                const value = arr[j];\r\n                typeValid = filteredTypes.includes(value.key);\r\n                if (typeValid) {\r\n                    break;\r\n                }\r\n                if (firstOnly) {\r\n                    break;\r\n                }\r\n            }\r\n            if (typeValid) {\r\n                break;\r\n            } \r\n        } else {\r\n            const value = obj;\r\n            typeValid = filteredTypes.includes(value.key);\r\n            if (typeValid) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    const isValid = typeValid;\r\n\r\n    if (isValid) {\r\n        accumulator.filtered_qa_pairs.push({\r\n            ...qa_pair\r\n        });\r\n    }\r\n\r\n    return accumulator;\r\n}\r\n\r\n// Range Filtering\r\nfunction rangeFilterReudcer_rows(accumulator, row) {\r\n    const range = accumulator.range;\r\n\r\n    const { filtered_qa_pairs } = row.qa_pairs.reduce(rangeFilterReudcer_qa_pairs, {\r\n        filtered_qa_pairs: [],\r\n        range,\r\n        field: accumulator.field\r\n    });\r\n\r\n    const hasQuestions = filtered_qa_pairs.length > 0;\r\n    const isValid = hasQuestions;\r\n\r\n    if (isValid) {\r\n        accumulator.filteredData.push({\r\n            ...row,\r\n            qa_pairs: filtered_qa_pairs,\r\n        });\r\n    }\r\n    return accumulator;\r\n}\r\nfunction rangeFilterReudcer_qa_pairs(accumulator, qa_pair) {\r\n    const range = accumulator.range;\r\n    const field = accumulator.field;\r\n\r\n    let rangeValid = false;\r\n    if (qa_pair[field] !== undefined) {\r\n        const value = qa_pair[field]\r\n        rangeValid = value >= range.low && value <= range.high;\r\n    } else {\r\n        rangeValid = true;\r\n    }    \r\n\r\n    const isValid = rangeValid;\r\n\r\n    if (isValid) {\r\n        accumulator.filtered_qa_pairs.push({\r\n            ...qa_pair\r\n        });\r\n    }\r\n\r\n    return accumulator;\r\n}\r\n","import React from 'react';\r\nimport ReactTable from 'react-table'\r\nimport cloneDeep from 'clone-deep'\r\nimport 'react-table/react-table.css';\r\nimport '../../../scss/highlighter.css';\r\nimport '../../../scss/react-table.css';\r\nimport WrapDiv from './WrapDiv'\r\nimport { shouldUpdate, isChanged, areSetsEqual, \r\n    displayIndexesToViewIndex, viewIndexToDisplayIndex, viewIndexToDisplayIndexes } from '../../Utils';\r\nimport { processDataHelper, filterDataHelper } from './DataUtils';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { \r\n    Table \r\n} from 'reactstrap';\r\n\r\nconst MAX_QUESTIONS_PER_PASSAGE_ASSUMPTION = 150;\r\n\r\nconst initialInternals = {\r\n    data: undefined,\r\n    filteredData: undefined,\r\n    filteredDataPerFilter: {\r\n        answerTypes: undefined,\r\n        predictionTypes: undefined,\r\n        search: undefined,\r\n        F1Range: undefined,\r\n        EMRange: undefined\r\n    },\r\n    predictionTypes: [],\r\n\r\n    hasValidatedAnswers: false,\r\n    hasValidPredictions: false,\r\n    metrics: undefined\r\n}\r\n\r\nconst initialState = {\r\n    page: 0,\r\n    passagesPageSize: 5,\r\n    questionsPageSize: MAX_QUESTIONS_PER_PASSAGE_ASSUMPTION,\r\n    expanded_passage_ids: [],\r\n    activeQuestions: {},\r\n    questionResized: [],\r\n    questionSorted: []\r\n};\r\n\r\nconst filterProps = ['filteredAnswerTypes', 'answerTypeFilterFirstOnly', 'filteredPredictionTypes', 'searchProps', 'F1Range', 'EMRange']\r\nconst props_updateSignals = ['dataset', 'predictions', ...filterProps]\r\nconst state_updateSignals = ['page', 'passagesPageSize', 'questionsPageSize', 'expanded_passage_ids', 'activeQuestions', 'questionResized', 'questionSorted']\r\nclass ExplorerTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        renderPassageOrQuestionCell = renderPassageOrQuestionCell.bind(this);\r\n        renderPredictionCell = renderPredictionCell.bind(this);\r\n        renderAnswersCell = renderAnswersCell.bind(this);\r\n        activeQuestionChange = activeQuestionChange.bind(this);\r\n\r\n        this.clearSelectedAnswers = this.clearSelectedAnswers.bind(this);\r\n        this.expandAll = this.expandAll.bind(this);\r\n        this.collapseAll = this.collapseAll.bind(this);\r\n        this.expandedChange = this.expandedChange.bind(this);\r\n        this.getExpanded = this.getExpanded.bind(this);\r\n        this.questionResizedChange = this.questionResizedChange.bind(this);\r\n\r\n        this.processData = this.processData.bind(this);\r\n        this.filterData = this.filterData.bind(this);\r\n        this.getSortedData = this.getSortedData.bind(this);\r\n\r\n        this.pageChanged = this.pageChanged.bind(this);\r\n        this.passagesPageSizeChanged = this.passagesPageSizeChanged.bind(this);\r\n        this.questionsPageSizeChanged = this.questionsPageSizeChanged.bind(this);\r\n        this.passageSortedChange = this.passageSortedChange.bind(this);\r\n        this.questionSortedChange = this.questionSortedChange.bind(this);\r\n\r\n        this.setInternals = this.setInternals.bind(this);\r\n        this.internals = cloneDeep(initialInternals);\r\n        this.state = cloneDeep(initialState);\r\n\r\n        this.tableRef = React.createRef();\r\n    }\r\n\r\n    setInternals(newInternals) {\r\n        Object.assign(this.internals, newInternals)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.sendClearSelectedAnswersFunc(this.clearSelectedAnswers);\r\n        this.props.sendExpandAllFunc(this.expandAll);\r\n        this.props.sendCollapseAllFunc(this.collapseAll);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.props.dataset !== nextProps.dataset) {\r\n            // reset all when the dataset is switched\r\n            this.setInternals(cloneDeep(initialInternals));\r\n            this.setState(cloneDeep(initialState));\r\n        } else if (this.props.predictions !== nextProps.predictions) {\r\n             this.setInternals({data: undefined, filteredData: undefined});\r\n        } else if (isChanged(filterProps, this.props, nextProps)) {\r\n            // update only the changed filter\r\n            const filteredAnswerTypesChanged = isChanged(['filteredAnswerTypes', 'answerTypeFilterFirstOnly'], this.props, nextProps);\r\n            const filteredPredictionTypesChanged = isChanged(['filteredPredictionTypes'], this.props, nextProps);\r\n            const searchPropsChanged = isChanged(['searchProps'], this.props, nextProps);\r\n            const F1RangeChanged = isChanged(['F1Range'], this.props, nextProps);\r\n            const EMRangeChanged = isChanged(['EMRange'], this.props, nextProps);\r\n\r\n            const refilteringRequired = filteredAnswerTypesChanged || filteredPredictionTypesChanged || \r\n                                    searchPropsChanged || F1RangeChanged || EMRangeChanged;\r\n\r\n            this.setInternals({\r\n                filteredData: refilteringRequired ? undefined : this.internals.filteredData\r\n            });\r\n            if (filteredAnswerTypesChanged) {\r\n                this.internals.filteredDataPerFilter.answerTypes = undefined;\r\n            }\r\n            if (filteredPredictionTypesChanged) {\r\n                this.internals.filteredDataPerFilter.predictionTypes = undefined;\r\n            }\r\n            if (searchPropsChanged) {\r\n                this.internals.filteredDataPerFilter.search = undefined;\r\n            }\r\n            if (F1RangeChanged) {\r\n                this.internals.filteredDataPerFilter.F1Range = undefined\r\n            }\r\n            if (EMRangeChanged) {\r\n                this.internals.filteredDataPerFilter.EMRange = undefined\r\n            }\r\n        }\r\n        \r\n        const update = shouldUpdate(props_updateSignals, state_updateSignals, \r\n            this.props, this.state, \r\n            nextProps, nextState, \r\n            true, this.constructor.name);\r\n        return update;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (isChanged(['dataset', 'predictions'], prevProps, this.props)) {\r\n            this.props.onPredictionsTypeChanged(this.internals.predictionTypes);\r\n        }\r\n        if (isChanged(filterProps, prevProps, this.props)) {\r\n            // force updated is needed for getExpanded() to be called again,\r\n            // so it will use the filtered sorted data to find the expanded rows\r\n            this.forceUpdate(() => {\r\n                this.setState({ page: 0 });\r\n            })\r\n        }\r\n    }\r\n\r\n    pageChanged(page) {\r\n        this.setState({ page });\r\n    }\r\n\r\n    passagesPageSizeChanged(pageSize, page) {\r\n        this.setState({ passagesPageSize: pageSize, page });\r\n    }\r\n\r\n    questionsPageSizeChanged(pageSize, page) {\r\n        this.setState({ questionsPageSize: pageSize, page });\r\n    }\r\n\r\n    passageSortedChange(newSorted, column, additive) {\r\n        // force updated is needed for getExpanded() to be called,\r\n        // so it will use the filtered sorted data to find the expanded rows\r\n        this.forceUpdate();\r\n    }\r\n\r\n    questionSortedChange(newSorted, column, additive) {\r\n        this.setState({\r\n            questionSorted: newSorted\r\n        });\r\n    }\r\n\r\n    expandedChange(newExpanded, index, event) {\r\n        const pageSize = this.state.passagesPageSize;\r\n        const page = this.state.page;\r\n\r\n        const viewIndex = index[0];\r\n        const displayIndex = viewIndexToDisplayIndex(viewIndex, page, pageSize);\r\n\r\n        const sortedData = this.getSortedData();\r\n        const passage_id = sortedData[displayIndex].passage_id; \r\n        \r\n        const matchingPosition = this.state.expanded_passage_ids.indexOf(passage_id);\r\n        if (matchingPosition === -1) {\r\n            this.setState({\r\n                expanded_passage_ids: [...this.state.expanded_passage_ids, passage_id]\r\n            });\r\n        } else {\r\n            const expanded_passage_ids = [...this.state.expanded_passage_ids];\r\n            expanded_passage_ids.splice(matchingPosition, 1);\r\n            this.setState({\r\n                expanded_passage_ids\r\n            });\r\n        }\r\n    }\r\n\r\n    expandAll() {\r\n        this.setState({\r\n            expanded_passage_ids: [...this.internals.filteredData.map(row => row.passage_id)]\r\n        });\r\n    }\r\n\r\n    collapseAll() {\r\n        this.setState({\r\n            expanded_passage_ids: []\r\n        });\r\n    }\r\n\r\n    getExpanded() {\r\n        const defaultExpanded = {};\r\n        if (!this.tableRef.current) {\r\n            return defaultExpanded;\r\n        }\r\n\r\n        const sortedData = this.getSortedData();\r\n\r\n        const indexesFromSorted = new Set(sortedData.map(row => row.passage_index))\r\n        const indexesFromFiltered = new Set(this.internals.filteredData.map(row => row.passage_index))\r\n        if (!areSetsEqual(indexesFromSorted, indexesFromFiltered)) {\r\n            return defaultExpanded;\r\n        }\r\n\r\n        const pageSize = this.state.passagesPageSize;\r\n        const page = this.state.page;\r\n\r\n        const viewIndexes = [...Array(pageSize).keys()];\r\n        const displayIndexsInPage = viewIndexToDisplayIndexes(viewIndexes, page, pageSize);\r\n\r\n        const expandedDisplayIndexes = displayIndexsInPage.filter(displayIndex => {\r\n            if (displayIndex < sortedData.length) {\r\n                const passage_id = sortedData[displayIndex].passage_id;\r\n                return this.state.expanded_passage_ids.includes(passage_id)\r\n            }\r\n            return false;\r\n        });\r\n\r\n        let expandedInPage = displayIndexesToViewIndex(expandedDisplayIndexes, page, pageSize, true);\r\n\r\n        return expandedInPage;\r\n    }\r\n\r\n    questionResizedChange(newResized, event) {\r\n        this.setState({\r\n            questionResized: newResized\r\n        });\r\n    }\r\n\r\n    clearSelectedAnswers() {\r\n        this.setState({\r\n            activeQuestions: {}\r\n        });\r\n    }\r\n\r\n    processData() {\r\n        const dataset = this.props.dataset;\r\n        const predictions = this.props.predictions;\r\n\r\n        const {\r\n            data, \r\n            hasValidatedAnswers,\r\n            hasValidPredictions,\r\n            predictionTypes\r\n        } = processDataHelper(dataset, predictions);\r\n\r\n        this.setInternals({\r\n            data,\r\n            hasValidatedAnswers,\r\n            hasValidPredictions,\r\n            predictionTypes\r\n        });\r\n    }\r\n\r\n    filterData() {\r\n        const filteredAnswerTypes = this.props.filteredAnswerTypes;\r\n        const answerTypeFilterFirstOnly = this.props.answerTypeFilterFirstOnly;\r\n        const filteredPredictionTypes = this.props.filteredPredictionTypes;\r\n        const searchProps = this.props.searchProps;\r\n        const F1Range = this.props.F1Range;\r\n        const EMRange = this.props.EMRange;\r\n\r\n        const {\r\n            filteredData,\r\n            filteredDataPerFilter,\r\n            metrics\r\n        } = filterDataHelper(this.internals, filteredAnswerTypes, answerTypeFilterFirstOnly, filteredPredictionTypes, searchProps, F1Range, EMRange);\r\n        \r\n        this.setInternals({\r\n            filteredData,\r\n            filteredDataPerFilter,\r\n            metrics\r\n        });\r\n    }\r\n\r\n    getSortedData() {\r\n        return this.tableRef.current.getResolvedState().sortedData;\r\n    }\r\n\r\n    render() {\r\n\r\n        console.time('processData');\r\n        if (!this.internals.data) {\r\n            this.processData();\r\n        }\r\n        console.timeEnd('processData');\r\n        \r\n        console.time('filterData');\r\n        if (!this.internals.filteredData) {\r\n            this.filterData();\r\n        }        \r\n        console.timeEnd('filterData');\r\n\r\n        const passage_columns = [\r\n            {\r\n                Header: '#',\r\n                id: 'passage_index',\r\n                accessor: 'passage_index',\r\n                width: 50\r\n            },\r\n            {\r\n                Header: 'Passage ID',\r\n                accessor: 'passage_id',\r\n                width: 110\r\n            }, \r\n            {\r\n                Header: 'Passage',\r\n                accessor: 'passage',\r\n                Cell: renderPassageOrQuestionCell\r\n            }, \r\n            {\r\n                Header: 'Count',\r\n                id: 'questions_count',\r\n                accessor: row => row.qa_pairs.length,\r\n                width: 50,\r\n                resizable: false\r\n            },\r\n            {\r\n                Header: 'F1',\r\n                id: 'f1',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: qa_pair => forceDecimalPlaces(qa_pair.f1, 2),\r\n                width: 40,\r\n                resizable: false\r\n            }, {\r\n                Header: 'EM',\r\n                id: 'em',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: qa_pair => forceDecimalPlaces(qa_pair.em, 2),\r\n                width: 40,\r\n                resizable: false\r\n            }\r\n        ]\r\n\r\n        const qa_columns = [\r\n            {\r\n                Header: '#',\r\n                accessor: 'query_index',\r\n                width: 40\r\n            },\r\n            {\r\n                Header: 'Question ID',\r\n                accessor: 'query_id',\r\n                width: 100\r\n            },\r\n            {\r\n                Header: 'Question',\r\n                accessor: 'question',\r\n                Cell: renderPassageOrQuestionCell\r\n            },\r\n            {\r\n                Header: 'Answer Options',\r\n                accessor: 'displayAnswers',\r\n                Cell: renderAnswersCell,\r\n                width: 150\r\n            },\r\n            {\r\n                Header: '→ Type',\r\n                id: 'answersTypes',\r\n                accessor: qa_pair => qa_pair.answersTypes,\r\n                Cell: renderAnswersTypesCell,\r\n                width: 100,\r\n                resizable: false\r\n            },\r\n            {\r\n                Header: 'Prediction',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: 'displayPrediction',\r\n                Cell: renderPredictionCell,\r\n                width: 150\r\n            },\r\n            {\r\n                Header: 'Prediction Head',\r\n                id: 'predictionType',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: qa_pair => qa_pair.predictionType ? qa_pair.predictionType.value : '',\r\n                width: 110\r\n            },\r\n            {\r\n                Header: 'F1',\r\n                id: 'f1',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: qa_pair => forceDecimalPlaces(qa_pair.f1, 2),\r\n                width: 40,\r\n                resizable: false\r\n            }, {\r\n                Header: 'EM',\r\n                id: 'em',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: qa_pair => forceDecimalPlaces(qa_pair.em, 2),\r\n                width: 40,\r\n                resizable: false\r\n            }\r\n        ]\r\n\r\n        return <div className='container-fluid'>\r\n            <div className='row justify-content-center'>\r\n                <div className='col-3'>\r\n                    <h4>\r\n                    Passage Count: {this.internals.filteredData.length.toLocaleString()}\r\n                    </h4>\r\n                </div>\r\n                <div className='col-3'>\r\n                    <h4>\r\n                        Questions Count: {this.internals.metrics.questionsCount.toLocaleString()}\r\n                    </h4>\r\n                </div>\r\n                {this.props.predictions ? <div className='col-3'>\r\n                    <h4>\r\n                        {this.internals.hasValidPredictions ?\r\n                        `Predictions Count: ${this.internals.metrics.predictedCount.toLocaleString()}` :\r\n                        'Predictions do not match the dataset'\r\n                        }\r\n                    </h4>\r\n                </div> : null}\r\n                {(this.props.predictions && this.internals.hasValidPredictions) ? <div className='col-3'>\r\n                    <h4>\r\n                        F1: {forceDecimalPlaces(this.internals.metrics.f1, 3)}, EM: {forceDecimalPlaces(this.internals.metrics.em, 3)}\r\n                    </h4>\r\n                </div> : null}\r\n            </div>\r\n            <div className='row'><div className='col-12'>\r\n                <ReactTable ref={this.tableRef} className=\"-striped-passage -highlight-passage\"\r\n                data={this.internals.filteredData} \r\n                columns={passage_columns}\r\n                minRows={0}\r\n                showPaginationTop={true}\r\n                showPaginationBottom={true}\r\n                page={this.state.page}\r\n                pageSize={this.state.passagesPageSize}\r\n                pageSizeOptions={[1, 5, 10, 20, 25, 50, 100]}\r\n                onPageChange={this.pageChanged}\r\n                onPageSizeChange={this.passagesPageSizeChanged}\r\n                collapseOnSortingChange={false}\r\n                collapseOnPageChange={false}\r\n                collapseOnDataChange={false}\r\n                onSortedChange={this.passageSortedChange}\r\n                expanded={this.getExpanded()}\r\n                onExpandedChange={(newExpanded, index, event) => this.expandedChange(newExpanded, index, event)}\r\n                SubComponent={row => {\r\n                    const qa_pairs = row.original.qa_pairs\r\n                    return (\r\n                        <ReactTable className=\"-striped-question -highlight-question\" style={{maxHeight: '400px'}}\r\n                        data={qa_pairs}\r\n                        columns={qa_columns}\r\n                        minRows={0}\r\n                        sorted={this.state.questionSorted}\r\n                        onSortedChange={this.questionSortedChange}\r\n                        resized={this.state.questionResized}\r\n                        onResizedChange={this.questionResizedChange}\r\n                        pageSize={this.state.questionsPageSize}\r\n                        pageSizeOptions={[1, 5, 10, 20, 25, MAX_QUESTIONS_PER_PASSAGE_ASSUMPTION]}\r\n                        onPageSizeChange={this.questionsPageSizeChanged}\r\n                        showPagination={false}\r\n                        getTrProps={(state, rowInfo, column, instance) => {\r\n                            return {\r\n                                onClick: (e, handleOriginal) => {\r\n                                    activeQuestionChange(rowInfo, e);\r\n\r\n                                    if (handleOriginal) {\r\n                                        handleOriginal();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }}\r\n                        />\r\n                    )\r\n                }}\r\n                />\r\n            </div></div>\r\n            </div>\r\n    }\r\n}\r\n\r\nlet renderPassageOrQuestionCell = function(props) {\r\n    let searchWords = [];\r\n    let categoryPerSearchWordIndex = undefined;\r\n    let spans = [];\r\n    let categoryPerSpanIndex = undefined;\r\n    let highlightClassNamePerCategory = undefined;\r\n    const activeQuestionId = this.state.activeQuestions[props.original.passage_id];\r\n    if (activeQuestionId) {\r\n        let qa_pair;\r\n        if (props.column.id === 'passage') {\r\n            qa_pair = props.original.qa_pairs\r\n                        .find(qa_pair => qa_pair.query_id === activeQuestionId);\r\n        } else {\r\n            if (activeQuestionId === props.original.query_id) {\r\n                qa_pair = props.original;\r\n            }\r\n        }\r\n        if (qa_pair) {\r\n            searchWords = [...qa_pair.evaluationAnswers[qa_pair.maximizingGroundTruthIndex]];\r\n\r\n            categoryPerSearchWordIndex = searchWords.map(() => 'gold_0')\r\n            highlightClassNamePerCategory = {'gold_0': 'highlight-gold'}\r\n\r\n            if (qa_pair.prediction) {\r\n                if (!['arithmetic', 'counting'].includes(qa_pair.predictionType.key)) {\r\n                    const predictionSpans = qa_pair.predictionSpans;\r\n                    if (predictionSpans) {\r\n                        const context = props.column.id === 'passage' ? 'p' : 'q'\r\n\r\n                        spans = predictionSpans.reduce((spansAcc, span) => {\r\n                            if (span[0] === context) {\r\n                                spansAcc.push([span[1], span[2]]);\r\n                            }\r\n                            return spansAcc;\r\n                        }, [])\r\n                        categoryPerSpanIndex = spans.map(x => 'focus_2')\r\n                    }\r\n\r\n                    const evaluationPrediction = qa_pair.evaluationPrediction;\r\n                    if (evaluationPrediction) {\r\n                        searchWords.push(...evaluationPrediction);\r\n                        categoryPerSearchWordIndex.push(...(evaluationPrediction.map(x => 'prediction_1')));\r\n                    }\r\n\r\n                    highlightClassNamePerCategory['prediction_1'] = 'highlight-predicted';\r\n                    highlightClassNamePerCategory['prediction_1-focus_2'] = 'highlight-predicted-focus-bold';\r\n                    highlightClassNamePerCategory['gold_0-prediction_1'] = 'highlight-correct'\r\n                    highlightClassNamePerCategory['gold_0-prediction_1-focus_2'] = 'highlight-correct-focus'\r\n                } else {\r\n                    searchWords = [];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return <WrapDiv><Highlighter autoEscape={true}\r\n            searchWords={searchWords} categoryPerSearchWordIndex={categoryPerSearchWordIndex}\r\n            spans={spans} categoryPerSpanIndex={categoryPerSpanIndex}\r\n            highlightClassNamePerCategory={highlightClassNamePerCategory}\r\n            textToHighlight={props.value} /></WrapDiv>\r\n}\r\nlet renderPredictionCell = function(props) {\r\n    let searchWords = [];\r\n    const highlightClassName = 'highlight-predicted-focus';\r\n    const qa_pair = props.original;\r\n    const activeQuestionId = this.state.activeQuestions[qa_pair.passage_id];\r\n    if (activeQuestionId === qa_pair.query_id) {\r\n        if (qa_pair.prediction) {\r\n            searchWords = qa_pair.evaluationPrediction;\r\n        }\r\n    }\r\n    return <WrapDiv><Highlighter autoEscape={true} highlightClassName={highlightClassName} searchWords={searchWords} textToHighlight={props.value || ''} /></WrapDiv>\r\n}\r\nlet renderAnswersCell = function(props) {\r\n    let searchWords = [];\r\n    const highlightClassName = 'highlight-gold';\r\n    const activeQuestionId = this.state.activeQuestions[props.original.passage_id];\r\n    if (activeQuestionId === props.original.query_id) {        \r\n        searchWords = props.original.evaluationAnswers[props.original.maximizingGroundTruthIndex];\r\n    }\r\n    return <Table style={{height: '100%'}} striped>\r\n        <tbody>\r\n            {props.value.map((answer, index) => {\r\n                return <tr key={index}>\r\n                    <td style={{whiteSpace: 'pre-wrap', padding: 0, 'borderTop': 0}}>\r\n                        <WrapDiv><Highlighter autoEscape={true} highlightClassName={highlightClassName} \r\n                            searchWords={props.original.maximizingGroundTruthIndex === index ? searchWords : []} \r\n                            textToHighlight={answer} /></WrapDiv>\r\n                    </td>\r\n                </tr>\r\n            })}\r\n        </tbody>\r\n    </Table>\r\n}\r\nlet renderAnswersTypesCell = function(props) {\r\n    return <Table style={{height: '100%'}} striped>\r\n        <tbody>\r\n            {props.value.map((answerType, index) => \r\n                <tr key={index}>\r\n                    <td style={{whiteSpace: 'pre-wrap', padding: 0, 'borderTop': 0}}>\r\n                        {answerType.value}\r\n                    </td>\r\n                </tr>\r\n            )}\r\n        </tbody>\r\n    </Table>\r\n}\r\n\r\nlet activeQuestionChange = function(rowInfo, e) {\r\n    const passage_id = rowInfo.original.passage_id\r\n    const query_id = rowInfo.original.query_id\r\n\r\n    if (this.state.activeQuestions[passage_id] === query_id) {\r\n        const activeQuestions = {...this.state.activeQuestions};\r\n        delete activeQuestions[passage_id]\r\n        this.setState({\r\n            activeQuestions\r\n        });\r\n    } else {\r\n        this.setState({\r\n            activeQuestions: {\r\n                //...this.state.activeQuestions, // controls whether to allow selection of multiple questions accross different paragrahps\r\n                [passage_id]: query_id\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction forceDecimalPlaces(num, places) {\r\n    return num !== undefined ? parseFloat(Math.round(num * Math.pow(10, places)) / Math.pow(10, places)).toFixed(places) : undefined;\r\n}\r\n\r\nexport default ExplorerTable;\r\n","import React from 'react';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n} from 'reactstrap';\r\nimport { shouldUpdate } from './../Utils';\r\nimport ExplorerSettings from './explorer-settings/ExplorerSettings';\r\nimport ExplorerTable from './explorer-table/ExplorerTable';\r\n\r\nconst props_updateSignals = []\r\nconst state_updateSignals = ['dataset', 'predictions', 'filteredAnswerTypes', 'answerTypeFilterFirstOnly',\r\n                            'predictionTypes', 'filteredPredictionTypes', 'searchProps', \r\n                            'F1Range', 'EMRange',\r\n                            'navbarSticky', 'isOpen']\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.settingsChange = this.settingsChange.bind(this);\r\n        this.getClearSelectedAnswersFunc = this.getClearSelectedAnswersFunc.bind(this);\r\n        this.getExpandAllFunc = this.getExpandAllFunc.bind(this);\r\n        this.getCollapseAllFunc = this.getCollapseAllFunc.bind(this);\r\n        this.predictionTypesChanged = this.predictionTypesChanged.bind(this);\r\n        this.toggleMenu = this.toggleMenu.bind(this);\r\n        this.state = {\r\n            useLocalDataset: true,\r\n            allowSourceSelection: false,\r\n            filteredAnswerTypes: ['multi_span', 'single_span', 'number', 'date'],\r\n            answerTypeFilterFirstOnly: true,\r\n            predictionTypes: [],\r\n            filteredPredictionTypes: [],\r\n            instantSearch: true,\r\n            searchProps: {\r\n                searchText: '',\r\n                filterQuestions: false\r\n            },\r\n            F1Range: { low: 0.0, high: 1.0 },\r\n            EMRange: { low: 0.0, high: 1.0 },\r\n            navbarSticky: undefined, // can be 'top' or undefined\r\n            isOpen: true,\r\n            showNavbarImage: false,\r\n            // ^ startup settings available for configuration\r\n\r\n            dataset: undefined,\r\n            predictions: undefined,\r\n            clearSelectedAnswersFunc: undefined,\r\n            expandAllFunc: undefined,\r\n            collapseAll: undefined\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        const update = shouldUpdate(props_updateSignals, state_updateSignals, \r\n            this.props, this.state, \r\n            nextProps, nextState, \r\n            true, this.constructor.name);\r\n        return update;\r\n    }\r\n\r\n    settingsChange(settings) {\r\n        this.setState({\r\n            filteredAnswerTypes: settings.filteredAnswerTypes,\r\n            answerTypeFilterFirstOnly: settings.answerTypeFilterFirstOnly,\r\n            filteredPredictionTypes: settings.filteredPredictionTypes,\r\n            searchProps: settings.searchProps,\r\n            dataset: settings.dataset,\r\n            predictions: settings.predictions,\r\n            F1Range: settings.F1Range,\r\n            EMRange: settings.EMRange\r\n        });\r\n    }\r\n    \r\n    getClearSelectedAnswersFunc(func) {\r\n        this.setState({ clearSelectedAnswersFunc: func });\r\n    }\r\n\r\n    getExpandAllFunc(func) {\r\n        this.setState({ expandAllFunc: func });\r\n    }\r\n\r\n    getCollapseAllFunc(func) {\r\n        this.setState({ collapseAllFunc: func });\r\n    }\r\n\r\n    predictionTypesChanged(predictionTypes) {\r\n        this.setState({ predictionTypes });\r\n    }\r\n\r\n    toggleMenu() {\r\n        this.setState({\r\n          isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n                    <Navbar color=\"light\" light sticky={this.state.navbarSticky} \r\n                            style={{borderBottom: '1px solid rgba(0,0,0,0.15)'}}>\r\n                        <div style={{width: '100%'}}>\r\n                            {this.state.showNavbarImage ? \r\n                            <div className='navbar-brand'>\r\n                                {<a target='_blank' rel='noopener noreferrer' href='https://allennlp.org/drop'>\r\n                                    <img style={{paddingRight: '15px', marginBottom: '3px'}} src='https://allennlp.org/assets/allennlp-logo-color.png' height='14' alt='' />\r\n                                </a>}\r\n                                <button className='fakeLink' onClick={() => {this.setState({ navbarSticky: this.state.navbarSticky === 'top' ? undefined : 'top' })}}>DROP Explorer</button>\r\n                            </div> : \r\n                            <NavbarBrand onClick={() => {this.setState({ navbarSticky: this.state.navbarSticky === 'top' ? undefined : 'top' })}}>\r\n                                DROP Explorer\r\n                            </NavbarBrand>}\r\n                            <NavbarToggler style={{float: 'right', marginTop: '0.25rem'}} onClick={this.toggleMenu} />\r\n                        </div>\r\n                        <Collapse isOpen={this.state.isOpen} navbar>\r\n                            <ExplorerSettings onChange={this.settingsChange}\r\n                                useLocalDataset={this.state.useLocalDataset}\r\n                                allowSourceSelection={this.state.allowSourceSelection}\r\n                                expandAllFunc={this.state.expandAllFunc}\r\n                                collapseAllFunc={this.state.collapseAllFunc}\r\n                                filteredAnswerTypes={this.state.filteredAnswerTypes}\r\n                                answerTypeFilterFirstOnly={this.state.answerTypeFilterFirstOnly}\r\n                                filteredPredictionTypes={this.state.filteredPredictionTypes}\r\n                                predictionTypes={this.state.predictionTypes}\r\n                                instantSearch={this.state.instantSearch}\r\n                                searchProps={this.state.searchProps}\r\n                                F1Range={this.state.F1Range}\r\n                                EMRange={this.state.EMRange}\r\n                                clearSelectedAnswersFunc={this.state.clearSelectedAnswersFunc} />\r\n                        </Collapse>\r\n                    </Navbar>\r\n                    <ExplorerTable \r\n                        dataset={this.state.dataset} \r\n                        predictions={this.state.predictions}\r\n                        filteredAnswerTypes={this.state.filteredAnswerTypes}\r\n                        answerTypeFilterFirstOnly={this.state.answerTypeFilterFirstOnly}\r\n                        filteredPredictionTypes={this.state.filteredPredictionTypes}\r\n                        searchProps={this.state.searchProps}\r\n                        F1Range={this.state.F1Range}\r\n                        EMRange={this.state.EMRange}\r\n                        sendClearSelectedAnswersFunc={this.getClearSelectedAnswersFunc}\r\n                        sendExpandAllFunc={this.getExpandAllFunc}\r\n                        sendCollapseAllFunc={this.getCollapseAllFunc}\r\n                        onPredictionsTypeChanged={this.predictionTypesChanged}\r\n                    />\r\n                </div>\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './scss/custom.scss';\r\nimport ModelComponent from './model/ModelComponent';\r\nimport App from './components/app/App';\r\n\r\n// Copied from http:jquery-howto.blogspot.com/2009/09/get-url-parameters-values-with-jquery.html\r\nfunction getUrlVars() {\r\n    var vars = [], hash;\r\n    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');\r\n    for (var i = 0; i < hashes.length; i++) {\r\n      hash = hashes[i].split('=');\r\n      vars.push(hash[0]);\r\n      vars[hash[0]] = hash[1];\r\n    }\r\n    return vars;\r\n}\r\n  \r\nvar urlParams = getUrlVars();\r\n  \r\nswitch (urlParams[\"startPage\"]) {\r\n    case \"model\":\r\n        ReactDOM.render(<ModelComponent />, document.getElementById('root'));\r\n        break;\r\n\r\n    case undefined:\r\n    default:\r\n        ReactDOM.render(<App />, document.getElementById('root'));\r\n        break;\r\n}\r\n"],"sourceRoot":""}