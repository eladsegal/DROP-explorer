{"version":3,"sources":["api-config.js","model_components/Pane.jsx","model_components/Button.jsx","model_components/ModelIntro.jsx","model/ModelInput.jsx","model/ModelOutput.jsx","model/ModelComponent.jsx","components/Utils.js","components/file_input_button/FileInputButton.jsx","components/app/explorer-settings/dataset-loader/DatasetLocalSelector.jsx","components/app/explorer-settings/dataset-loader/DatasetListSelector.jsx","components/app/explorer-settings/dataset-loader/DatasetLoader.jsx","components/app/explorer-settings/PredictionsLoader.jsx","components/app/AnswersUtils.js","components/app/explorer-settings/SearchFilter.jsx","components/checkbox_list/CheckboxList.jsx","components/app/explorer-settings/ExplorerSettings.jsx","components/app/explorer-table/WrapDiv.jsx","components/app/explorer-table/DataUtils.js","components/app/explorer-table/ExplorerTable.jsx","components/app/App.jsx","index.js"],"names":["origin","window","location","API_ROOT","includes","replace","ResultDisplay","outputContent","outputState","this","props","placeholderTemplate","message","react_default","a","createElement","className","concat","xlinkHref","children","React","Component","PaneRight","_React$Component2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","Pane_ResultDisplay","PaneLeft","_React$Component3","Button","_this$props","enabled","onClick","type","disabled","ModelIntro","title","description","examples","passage","question","ModelInput","_this","call","handleListChange","bind","assertThisInitialized","e","target","runModel","_this2","model_components_ModelIntro","onChange","map","example","index","substring","summarizeExample","ref","x","model_components_Button","ModelOutput","answer","outputs","JSON","stringify","ModelComponent","state","responseData","inputs","setState","fetch","method","headers","Accept","Content-Type","body","then","response","json","catch","error","console","_this$state","Pane_PaneLeft","model_ModelInput","Pane_PaneRight","model_ModelOutput","mapToArray","key_name","keys","intersect","dataArr","accessor","transformToSingle","pointers","Array","length","intersection","maxIndex","agreements","i","data","currentIndex","item","reduce","sameItems","push","isChanged","changeSignals","obj","otherObj","debug","sourceName","changes","changeSignal","changed","log","join","shouldUpdate","props_updateSignals","state_updateSignals","nextProps","nextState","componentName","propsUpdated","stateUpdated","displayIndexesToViewIndex","displayIndexes","page","pageSize","returnObject","undefined","acuumulator","displayIndex","viewIndex","Math","floor","displayIndexToViewIndex","viewIndexToDisplayIndex","FileInputButton","fileInputRef","createRef","simulateClick","change","file","prevProps","prevState","current","click","files","selectedFile","style","display","id","accept","es_Button","color","size","text","name","PureComponent","DatasetLocalSelector","dataset","reader","FileReader","onloadend","array","parse","result","readAsText","file_input_button_FileInputButton","width","DatasetListSelector","toggle","dropdownOpen","datasets_names","selected","mounted","getDatasetList","getDataset","currentTarget","getAttribute","dataset_name","_this3","encodeURIComponent","_this4","Dropdown","isOpen","DropdownToggle","caret","DropdownMenu","DropdownItem","dataset-name","DatasetSelector","local","dataset_loader_DatasetLocalSelector","dataset_loader_DatasetListSelector","DatasetLoader","useLocalDatasetChange","datasetChange","useLocalDataset","onDatasetChange","toString","ListGroup","allowSourceSelection","ListGroupItem","FormGroup","check","Label","Input","use-local-dataset","checked","PredictionsLoader","predictions","split","forEach","line","noAnswerType","noPredictionType","answerTypesConst","getAnswerStringForDisplayAndType","displayAnswer","answerType","number","number_value","Number","isNaN","spans","toConsumableArray","sort","date","some","prop","getAnswerForEvaluation","answerForEvaluation","String","prepareText","toLowerCase","SearchFilter","searchTextChange","filterQuestionsChange","submit","_objectSpread","searchProps","draftSearchText","draftFilterQuestions","filterQuestions","searchText","event","newState","instantSearch","filter-questions","CheckboxList","newChecked","changedKey","changedKeyIndex","indexOf","splice","options","option","option-key","ExplorerSettings","predictionsChange","filteredAnswerTypesChange","filteredPredictionTypesChange","searchFilterChange","filteredAnswerTypes","filteredPredictionTypes","constructor","predictionTypes","predictionType","Container","fluid","CardGroup","Card","CardHeader","CardBody","dataset_loader_DatasetLoader","height","overflow","expandAllFunc","collapseAllFunc","clearSelectedAnswersFunc","checkbox_list_CheckboxList","explorer_settings_SearchFilter","explorer_settings_PredictionsLoader","WrapDiv","styled","div","_templateObject","process_row","accumulator","row","passage_id","passage_displayIndex","reduced","qa_pairs","process_qa_pair","hasValidatedAnswers","query_id_to_displayIndex","reduced_row","DataUtils_objectSpread","passage_index","passage_id_to_displayIndex","passage_id_to_queries_displayIndexes","qa_pair","query_index","query_displayIndex","validated_answers","_getAnswerStringForDi","firstDisplayAnswer","firstAnswerType","displayAnswers","answersTypes","evaluationAnswers","validatedAnswer","evaluationAnswer","addedEvaluationAnswer","_getAnswerStringForDi2","maximizingGroundTruthIndex","query_id","filterDataHelper","internals","filteredDataPerFilter","Boolean","search","searchReudcer_rows","filteredData","hasValidPredictions","answerTypes","typeFilterReudcer_rows","filteredTypes","fields","missingValue","filteredDataArr","values","filter","filtersCount","every","intersectRows","intersectFilteredData","metrics","questionsCount","predictedCount","f1","em","row_predicted","row_f1","row_em","j","prediction","sameRows","filtered_qa_pairs","sameQuestions","assign","passageTextSearchValid","hasTextSearchValidQuestions","isQuestionTextSearchValid","hasQuestions","evaluationPrediction","typeFilterReudcer_qa_pairs","typeValid","field","isArray","arr","initialInternals","initialState","passagesPageSize","questionsPageSize","expanded_passage_ids","activeQuestions","questionResized","questionSorted","filterProps","ExplorerTable","renderPassageCell","renderHighlightableQuestionCell","renderAnswersCell","activeQuestionChange","clearSelectedAnswers","expandAll","collapseAll","expandedChange","getExpanded","questionResizedChange","processData","filterData","getSortedData","pageChanged","passagesPageSizeChanged","questionsPageSizeChanged","passageSortedChange","questionSortedChange","setInternals","cloneDeep","tableRef","newInternals","sendClearSelectedAnswersFunc","sendExpandAllFunc","sendCollapseAllFunc","filteredAnswerTypesChanged","filteredPredictionTypesChanged","searchPropsChanged","refilteringRequired","onPredictionsTypeChanged","forceUpdate","newSorted","column","additive","newExpanded","matchingPosition","defaultExpanded","sortedData","set","otherSet","has","areSetsEqual","Set","viewIndexes","viewIndexToDisplayIndexes","newResized","_processDataHelper","keyToPredictionType","predicted_ability","predictionValue","displayPrediction","maximizingGroundTruth","maximizing_ground_truth","loss","findIndex","predictionSpans","processDataHelper","immediatelyAfterDatasetChange","_filterDataHelper","getResolvedState","time","timeEnd","passage_columns","Header","Cell","resizable","show","forceDecimalPlaces","qa_columns","renderAnswersTypesCell","toLocaleString","es","columns","minRows","showPaginationTop","showPaginationBottom","pageSizeOptions","onPageChange","onPageSizeChange","collapseOnSortingChange","collapseOnPageChange","collapseOnDataChange","onSortedChange","expanded","onExpandedChange","SubComponent","original","maxHeight","sorted","resized","onResizedChange","showPagination","getTrProps","rowInfo","instance","handleOriginal","searchWords","categoryPerSearchWordIndex","highlightClassNamePerCategory","activeQuestionId","find","gold_0","_searchWords","_categoryPerSearchWor","explorer_table_WrapDiv","main_default","textToHighlight","highlightClassName","Table","striped","whiteSpace","padding","borderTop","ExplorerTable_objectSpread","defineProperty","num","places","parseFloat","round","pow","toFixed","App","settingsChange","getClearSelectedAnswersFunc","getExpandAllFunc","getCollapseAllFunc","predictionTypesChanged","toggleMenu","navbarSticky","showNavbarImage","settings","func","Navbar","light","sticky","borderBottom","rel","href","paddingRight","marginBottom","src","alt","NavbarBrand","NavbarToggler","float","marginTop","Collapse","navbar","explorer_settings_ExplorerSettings","explorer_table_ExplorerTable","hash","vars","hashes","slice","getUrlVars","ReactDOM","render","model_ModelComponent","document","getElementById","app_App"],"mappings":"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","file":"static/js/main.062d89f1.chunk.js","sourcesContent":["/**\r\n * The backend always runs on port 8000. In production we also\r\n * serve the frontend from there. However, for development\r\n * we want to `npm run serve` the unminified js on port 3000.\r\n * This allows us to get the correct API root either way.\r\n */\r\n\r\nlet apiRoot;\r\n\r\nconst origin = window && window.location && window.location.origin;\r\n\r\nif (origin.includes(':3000')) {\r\n    apiRoot = origin.replace(\":3000\", \":8000\");\r\n} else {\r\n    apiRoot = origin;\r\n}\r\n\r\nexport const API_ROOT = apiRoot;\r\n","import React from 'react';\r\n\r\n\r\n/*******************************************************************************\r\n  <ResultDisplay /> Component\r\n*******************************************************************************/\r\n\r\nclass ResultDisplay extends React.Component {\r\n\r\n    render() {\r\n      const { outputState } = this.props;\r\n\r\n      const placeholderTemplate = (message) => {\r\n        return (\r\n          <div className=\"placeholder\">\r\n            <div className=\"placeholder__content\">\r\n              <svg className={`placeholder__${outputState}`}>\r\n                <use xlinkHref={`#icon__${outputState}`}></use>\r\n              </svg>\r\n              {message !== \"\" ? (\r\n                <p>{message}</p>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      let outputContent;\r\n      switch (outputState) {\r\n        case \"working\":\r\n          outputContent = placeholderTemplate(\"\");\r\n          break;\r\n        case \"received\":\r\n          outputContent = this.props.children;\r\n          break;\r\n        case \"error\":\r\n          outputContent = placeholderTemplate(\"Something went wrong. Please try again.\");\r\n          break;\r\n        default:\r\n          // outputState = \"empty\"\r\n          outputContent = placeholderTemplate(\"Run model to view results\");\r\n      }\r\n\r\n      return (\r\n        <div className={`pane__right model__output ${outputState !== \"received\" ? \"model__output--empty\" : \"\"}`}>\r\n          <div className=\"pane__thumb\"></div>\r\n          {outputContent}\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n  <PaneRight /> Component\r\n*******************************************************************************/\r\n\r\nexport class PaneRight extends React.Component {\r\n    render() {\r\n      const { outputState } = this.props;\r\n\r\n      return (\r\n        <ResultDisplay outputState={outputState}>\r\n          {this.props.children}\r\n        </ResultDisplay>\r\n      )\r\n    }\r\n}\r\n\r\n/*******************************************************************************\r\n<PaneLeft /> Component\r\n*******************************************************************************/\r\n\r\nexport class PaneLeft extends React.Component {\r\n\r\n    render () {\r\n      return (\r\n        <div className=\"pane__left model__input\">\r\n          {this.props.children}\r\n        </div>\r\n      );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\n/*******************************************************************************\r\n  <Button /> Component\r\n*******************************************************************************/\r\n\r\nclass Button extends React.Component {\r\n  render() {\r\n    const { enabled, onClick } = this.props;\r\n\r\n    return (\r\n    <button type=\"button\" disabled={!enabled} className=\"btn btn--icon-disclosure\" onClick={onClick}>Run\r\n      <svg>\r\n        <use xlinkHref=\"#icon__disclosure\"></use>\r\n      </svg>\r\n    </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\n\r\n\r\n/*******************************************************************************\r\n  <ModelIntro /> Component\r\n*******************************************************************************/\r\n\r\nclass ModelIntro extends React.Component {\r\n    render() {\r\n\r\n      const { title, description } = this.props;\r\n\r\n      return (\r\n        <div>\r\n          <h2>\r\n            <span>{title}</span>\r\n          </h2>\r\n          <p>{description}</p>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default ModelIntro;\r\n","import React from 'react';\r\nimport Button from '../model_components/Button'\r\nimport ModelIntro from '../model_components/ModelIntro'\r\n\r\n\r\n// TODO: These are some quickly-accessible examples to try out with your model.  They will get\r\n// added to the select box on the demo page, and will auto-populate your input fields when they\r\n// are selected.  The names here need to match what's read in `handleListChange` below.\r\n\r\nconst examples = [\r\n  {\r\n    passage: \"passage for example 1\",\r\n    question: \"question for example 1\"\r\n  },\r\n  {\r\n    passage: \"passage for example 2\",\r\n    question: \"question for example 2\"\r\n  },\r\n  {\r\n    passage: \"passage for example 3\",\r\n    question: \"question for example 3\"\r\n  }\r\n];\r\n\r\n// TODO: This determines what text shows up in the select box for each example.  The input to\r\n// this function will be one of the items from the `examples` list above.\r\nfunction summarizeExample(example) {\r\n  return example.passage.substring(0, 60);\r\n}\r\n\r\n// TODO: You can give a model name and description that show up in your demo.\r\nconst title = \"Your Model Name\";\r\nconst description = (\r\n  <span>\r\n  If you want a description of what this demo is showing, you can put that here.  Or just leave this\r\n  description empty if you don't need it.\r\n  </span>\r\n);\r\n\r\nclass ModelInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleListChange = this.handleListChange.bind(this);\r\n    this.onClick = this.onClick.bind(this);\r\n  }\r\n\r\n  handleListChange(e) {\r\n    if (e.target.value !== \"\") {\r\n      // TODO: This gets called when the select box gets changed.  You want to set the values of\r\n      // your input boxes with the content in your examples.\r\n      this.passage.value = examples[e.target.value].passage\r\n      this.question.value = examples[e.target.value].question\r\n    }\r\n  }\r\n\r\n  onClick() {\r\n    const { runModel } = this.props;\r\n\r\n    // TODO: You need to map the values in your input boxes to json values that get sent to your\r\n    // predictor.  The keys in this dictionary need to match what your predictor is expecting to receive.\r\n    runModel({passage: this.passage.value, question: this.question.value});\r\n  }\r\n\r\n  render() {\r\n\r\n    const { outputState } = this.props;\r\n\r\n    return (\r\n      <div className=\"model__content\">\r\n        <ModelIntro title={title} description={description} />\r\n        <div className=\"form__instructions\"><span>Enter text or</span>\r\n          <select disabled={outputState === \"working\"} onChange={this.handleListChange}>\r\n              <option value=\"\">Choose an example...</option>\r\n              {examples.map((example, index) => {\r\n                return (\r\n                    <option value={index} key={index}>{summarizeExample(example) + \"...\"}</option>\r\n                );\r\n              })}\r\n          </select>\r\n        </div>\r\n\r\n       {/*\r\n         * TODO: This is where you add your input fields.  You shouldn't have to change any of the\r\n         * code in render() above here.  We're giving a couple of example inputs here, one for a\r\n         * larger piece of text, like a paragraph (the `textarea`) and one for a shorter piece of\r\n         * text, like a question (the `input`).  You'll probably want to change the variable names\r\n         * here to match the input variable names in your model.\r\n         */}\r\n\r\n        <div className=\"form__field\">\r\n          <label>Passage</label>\r\n          <textarea ref={(x) => this.passage = x} type=\"text\"></textarea>\r\n        </div>\r\n        <div className=\"form__field\">\r\n          <label>Question</label>\r\n          <input ref={(x) => this.question = x} type=\"text\"/>\r\n        </div>\r\n\r\n       {/* You also shouldn't have to change anything below here. */}\r\n\r\n        <div className=\"form__field form__field--btn\">\r\n          <Button enabled={outputState !== \"working\"} onClick={this.onClick} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModelInput;\r\n","import React from 'react';\r\n\r\nclass ModelOutput extends React.Component {\r\n  render() {\r\n\r\n    const { outputs } = this.props;\r\n\r\n    // TODO: `outputs` will be the json dictionary returned by your predictor.  You can pull out\r\n    // whatever you want here and visualize it.  We're giving some examples of different return\r\n    // types you might have.  Change names for data types you want, and delete anything you don't\r\n    // need.\r\n    var answer = outputs['answer'];\r\n\r\n    return (\r\n      <div className=\"model__content\">\r\n\r\n       {/*\r\n         * TODO: This is where you display your output.  You can show whatever you want, however\r\n         * you want.  We've got a few examples, of text-based output, and of visualizing model\r\n         * internals using heat maps.\r\n         */}\r\n\r\n        <div className=\"form__field\">\r\n          <label>Answer</label>\r\n          <div className=\"model__content__summary\"><pre>{ JSON.stringify(answer, null, 2) }</pre></div>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModelOutput;\r\n","import React from 'react';\r\nimport { API_ROOT } from '../api-config';\r\nimport {PaneLeft, PaneRight} from '../model_components/Pane'\r\nimport ModelInput from './ModelInput'\r\nimport ModelOutput from './ModelOutput'\r\n\r\n\r\nclass ModelComponent extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        outputState: \"empty\",  // valid values: \"working\", \"empty\", \"received\", \"error\"\r\n        responseData: null\r\n      };\r\n\r\n      this.runModel = this.runModel.bind(this);\r\n    }\r\n\r\n    runModel(inputs) {\r\n      this.setState({outputState: \"working\"});\r\n\r\n      fetch(`${API_ROOT}/predict`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(inputs)\r\n      }).then((response) => {\r\n        return response.json();\r\n      }).then((json) => {\r\n        this.setState({responseData: json, outputState: 'received'})\r\n      }).catch((error) => {\r\n        console.error(error);\r\n        this.setState({outputState: \"error\"});\r\n      });\r\n    }\r\n\r\n    render() {\r\n      const { outputState, responseData } = this.state;\r\n\r\n      return (\r\n        <div className=\"pane-container\">\r\n          <div className=\"pane model\">\r\n            <PaneLeft>\r\n              <ModelInput runModel={this.runModel} outputState={this.state.outputState}/>\r\n            </PaneLeft>\r\n            <PaneRight outputState={outputState}>\r\n              <ModelOutput outputs={responseData}/>\r\n            </PaneRight>\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n    }\r\n}\r\n\r\nexport default ModelComponent;\r\n","export function mapToArray(json, key_name) {\r\n    return Object.keys(json).map(function(key) {\r\n        json[key][key_name] = key;\r\n        return json[key];\r\n    });\r\n}\r\n\r\nexport function intersect(dataArr, accessor, transformToSingle) {\r\n    const pointers = Array.apply(null, {length: dataArr.length}).map(() => 0);\r\n\r\n    const intersection = [];\r\n    let maxIndex = 0;\r\n    let agreements = 0;\r\n    while (true) {\r\n        while (agreements < dataArr.length) {\r\n            for (let i=0; i < dataArr.length; i++) {\r\n                const data = dataArr[i];\r\n        \r\n                let currentIndex = accessor(data[pointers[i]]);\r\n                while (currentIndex < maxIndex) {\r\n                    pointers[i]++;\r\n                    if (pointers[i] === data.length) {\r\n                        return intersection;\r\n                    }\r\n    \r\n                    currentIndex = accessor(data[pointers[i]]);\r\n                }\r\n                if (currentIndex > maxIndex) {\r\n                    maxIndex = currentIndex;\r\n                    agreements = 1;\r\n                } else {\r\n                    agreements++;\r\n                }\r\n            }\r\n        }\r\n\r\n        let sameItems = dataArr.reduce((sameItems, data, i) => {\r\n            sameItems.push(data[pointers[i]])\r\n            return sameItems;\r\n        }, [])\r\n\r\n        let item = transformToSingle(sameItems);\r\n        if (item) {\r\n            intersection.push(item);\r\n        }\r\n        maxIndex += 1;\r\n        agreements = 0;\r\n    }\r\n}\r\n\r\nexport function areSetsEqual(set, otherSet) {\r\n    if (set.size !== otherSet.size) return false;\r\n    for (let item in set) {\r\n        if (!otherSet.has(item)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function isChanged(changeSignals, obj, otherObj, debug, sourceName) {\r\n    const changes = []\r\n    for (let i = 0; i < changeSignals.length; i++) {\r\n        const changeSignal = changeSignals[i];\r\n        if (obj[changeSignal] !== otherObj[changeSignal]) {\r\n            if (debug) {\r\n                changes.push(changeSignal);\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    if (debug) {\r\n        let changed = changes.length > 0;\r\n\r\n        if (changed) {\r\n            console.log(`${sourceName} Caused update: ${changes.join(', ')}`);\r\n        }\r\n        return changed;\r\n    }\r\n}\r\n\r\nexport function shouldUpdate(props_updateSignals, state_updateSignals, props, state, nextProps, nextState, debug, componentName) {\r\n    \r\n    const propsUpdated = isChanged(props_updateSignals, props, nextProps, debug, `[${componentName}][props]`)\r\n    const stateUpdated = isChanged(state_updateSignals, state, nextState, debug, `[${componentName}][state]`)\r\n\r\n    return propsUpdated || stateUpdated;\r\n}\r\n\r\nexport function displayIndexToViewIndex(displayIndex, page, pageSize) {\r\n    if (Math.floor(displayIndex / pageSize) === page) {\r\n        const viewIndex = displayIndex % pageSize;\r\n        return viewIndex;\r\n    }\r\n}\r\n\r\nexport function displayIndexesToViewIndex(displayIndexes, page, pageSize, returnObject=false) {\r\n    return displayIndexes.reduce((acuumulator, displayIndex) => {\r\n        const viewIndex = displayIndexToViewIndex(displayIndex, page, pageSize)\r\n        if (viewIndex !== undefined) {\r\n            if (returnObject) {\r\n                acuumulator[viewIndex] = true;\r\n            } else {\r\n                acuumulator.push(viewIndex)\r\n            }\r\n        }\r\n        return acuumulator;\r\n    }, returnObject ? {} : []);\r\n}\r\n\r\nexport function viewIndexToDisplayIndex(viewIndex, page, pageSize) {\r\n    const displayIndex = (pageSize * page) + viewIndex;\r\n    return displayIndex;\r\n}\r\n\r\nexport function viewIndexToDisplayIndexes(viewIndexes, page, pageSize, returnObject=false) {\r\n    return viewIndexes.reduce((acuumulator, viewIndex) => {\r\n        const displayIndex = viewIndexToDisplayIndex(viewIndex, page, pageSize)\r\n        if (returnObject) {\r\n            acuumulator[displayIndex] = true;\r\n        } else {\r\n            acuumulator.push(displayIndex)\r\n        }\r\n        return acuumulator;\r\n    }, returnObject ? {} : []);\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Button\r\n} from 'reactstrap';\r\n\r\nclass FileInputButton extends React.PureComponent {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.fileInputRef = React.createRef();\r\n\t\tthis.simulateClick = this.simulateClick.bind(this);\r\n\t\tthis.change = this.change.bind(this);\r\n\t\tthis.state = {\r\n\t\t\tfile: undefined\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tif (prevState.file !== this.state.file) {\r\n\t\t\tthis.props.onChange(this.state.file);\r\n\t\t}\r\n\t}\r\n\r\n\tsimulateClick() {\r\n\t\tthis.fileInputRef.current.click();\r\n\t}\r\n\r\n    change(files) {\r\n\t\tlet selectedFile;\r\n        if (files.length > 0) {\r\n            const file = files[0]\r\n            if (file) {\r\n\t\t\t\tselectedFile = file;\r\n            }\r\n\t\t}\r\n\r\n\t\tthis.setState({ \r\n\t\t\tfile: selectedFile\r\n\t\t});\r\n    }\r\n\r\n  \trender() {      \r\n\t\treturn <div>\r\n\t\t\t<input ref={this.fileInputRef} style={{'display': 'none'}} type='file' id='file' accept={this.props.accept} onChange={ (e) => this.change(e.target.files) } />\r\n\t\t\t<Button style={this.props.style} color={this.props.color} size={this.props.size} onClick={this.simulateClick}>\r\n\t\t\t\t{this.props.text}\r\n\t\t\t</Button>\r\n\t\t\t{this.state.file ? this.state.file.name : ''}\r\n\t\t</div>\r\n  }\r\n}\r\n\r\nexport default FileInputButton;\r\n","import React from 'react';\r\nimport { mapToArray } from '../../../Utils'\r\nimport FileInputButton from '../../../file_input_button/FileInputButton';\r\n\r\nclass DatasetLocalSelector extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.change = this.change.bind(this);\r\n        this.state = {\r\n            dataset: undefined\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.dataset !== this.state.dataset) {\r\n            this.props.onChange(this.state.dataset);\r\n        }\r\n    }\r\n\r\n    change(file) {\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onloadend = (e) => {\r\n                const array = mapToArray(JSON.parse(e.target.result), 'passage_id');\r\n                this.setState({ \r\n                    dataset: array \r\n                });\r\n            };\r\n            reader.readAsText(file);\r\n        } else {\r\n            this.setState({ \r\n                dataset: undefined \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <FileInputButton accept='.json' text='Choose File' size='md' color='primary' style={{width: '100%'}}\r\n                onChange={this.change}/>\r\n    }\r\n}\r\n\r\nexport default DatasetLocalSelector;\r\n","import React from 'react';\r\nimport { API_ROOT } from '../../../../api-config';\r\nimport { mapToArray } from '../../../Utils';\r\nimport {\r\n    Dropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem\r\n} from 'reactstrap';\r\n\r\nclass DatasetListSelector extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggle = this.toggle.bind(this);\r\n        this.change = this.change.bind(this);\r\n        this.state = {\r\n            dropdownOpen: false,\r\n            datasets_names: [],\r\n            selected: undefined\r\n        };\r\n    }\r\n\r\n    toggle() {\r\n        this.setState(prevState => ({\r\n          dropdownOpen: !prevState.dropdownOpen\r\n        }));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.mounted = true;\r\n        this.getDatasetList();\r\n    }\r\n    \r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.selected !== this.state.selected) {\r\n            this.props.onChange(undefined);\r\n            this.getDataset(this.state.selected);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.mounted = false;\r\n    }\r\n\r\n    change(e) {\r\n        this.setState({selected: e.currentTarget.getAttribute(\"dataset-name\")});\r\n    }\r\n\r\n    getDatasetList() {\r\n        fetch(`${API_ROOT}/dataset-list`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            } \r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((json) => {\r\n            if (this.mounted) {\r\n                this.setState({datasets_names: json, selected: json.length > 0 ? json[0] : undefined})\r\n            }\r\n        }).catch((error) => {\r\n            console.error(error);\r\n        });\r\n    }\r\n\r\n    getDataset(dataset_name) {\r\n        if (dataset_name) {\r\n\r\n            fetch(`${API_ROOT}/dataset?name=${encodeURIComponent(dataset_name)}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                } \r\n            }).then((response) => {\r\n                return response.json();\r\n            }).then((json) => {\r\n                const array = mapToArray(json, 'passage_id')\r\n                this.props.onChange(array);\r\n            }).catch((error) => {\r\n                console.error(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const datasets_names = this.state.datasets_names;\r\n\r\n        return (\r\n          <Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggle}>\r\n            <DropdownToggle color=\"primary\" caret style={{width: '100%'}}>\r\n                {this.state.selected ? this.state.selected : \"Select...\"}\r\n            </DropdownToggle>\r\n            <DropdownMenu>\r\n                {datasets_names.map(dataset_name => <DropdownItem onClick={this.change} key={dataset_name} dataset-name={dataset_name}>{dataset_name}</DropdownItem>)}\r\n            </DropdownMenu>\r\n          </Dropdown>\r\n        );\r\n      }\r\n}\r\n\r\nexport default DatasetListSelector;\r\n","import React from 'react';\r\nimport DatasetLocalSelector from './DatasetLocalSelector';\r\nimport DatasetListSelector from './DatasetListSelector';\r\nimport {\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Input,\r\n    FormGroup,\r\n    Label\r\n} from 'reactstrap';\r\n\r\nclass DatasetLoader extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.useLocalDatasetChange = this.useLocalDatasetChange.bind(this);\r\n        this.datasetChange = this.datasetChange.bind(this);\r\n        this.state = {\r\n            dataset: undefined,\r\n            useLocalDataset: this.props.useLocalDataset\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.dataset !== this.state.dataset) {\r\n            this.props.onDatasetChange(this.state.dataset);\r\n        }\r\n    }\r\n\r\n    useLocalDatasetChange(e) {\r\n        this.setState({ \r\n            useLocalDataset: e.currentTarget.getAttribute('use-local-dataset') !== true.toString(),\r\n            dataset: undefined\r\n        });\r\n    }\r\n\r\n    datasetChange(dataset) {\r\n        this.setState({ dataset: dataset })\r\n    }\r\n\r\n    render() {\r\n        return <ListGroup>\r\n                {this.props.allowSourceSelection ? <ListGroupItem>\r\n                    <FormGroup check>\r\n                        <Label check>\r\n                            <Input type=\"checkbox\" \r\n                            onChange={this.useLocalDatasetChange}\r\n                            use-local-dataset={(this.state.useLocalDataset && \r\n                                this.state.useLocalDataset.toString()) || false.toString()} \r\n                            checked={this.state.useLocalDataset || false} \r\n                            />Use Local Dataset\r\n                        </Label>\r\n                    </FormGroup>\r\n                </ListGroupItem> : null}\r\n                <ListGroupItem>\r\n                    <DatasetSelector onChange={this.datasetChange} local={this.state.useLocalDataset}/>\r\n                </ListGroupItem>\r\n            </ListGroup>\r\n    }\r\n}\r\n\r\nfunction DatasetSelector(props) {\r\n    if (props.local) {\r\n        return <DatasetLocalSelector onChange={props.onChange} />\r\n    }\r\n    return <DatasetListSelector onChange={props.onChange} />\r\n}\r\n\r\nexport default DatasetLoader;\r\n","import React from 'react';\r\nimport FileInputButton from '../../file_input_button/FileInputButton';\r\n\r\nclass PredictionsLoader extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.change = this.change.bind(this);\r\n        this.state = {\r\n            predictions: undefined\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.predictions !== this.state.predictions) {\r\n            this.props.onChange(this.state.predictions);\r\n        }\r\n    }\r\n\r\n    change(file) {\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onloadend = (e) => {\r\n                const predictions = [];\r\n                e.target.result.split('\\n').forEach(line => {\r\n                    if (line) {\r\n                        predictions.push(JSON.parse(line));\r\n                    }\r\n                });\r\n                this.setState({ \r\n                    predictions: predictions \r\n                });\r\n            };\r\n            reader.readAsText(file);\r\n        } else {\r\n            this.setState({ \r\n                predictions: undefined \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <FileInputButton accept='.json, .jsonl' text='Choose File' size='md' color='primary' style={{width: '100%'}}\r\n        onChange={this.change}/>\r\n    }\r\n}\r\n\r\nexport default PredictionsLoader;\r\n","\r\nexport const noAnswerType = {'key': 'none', 'value': 'None'};\r\nexport const noPredictionType = {'key': 'none', 'value': 'None'};\r\nexport const answerTypesConst = [\r\n    {'key': 'multi_span', 'value': 'Multi Span', 'accessor': 'spans'},\r\n    {'key': 'single_span', 'value': 'Single Span', 'accessor': 'spans'},\r\n    {'key': 'number', 'value': 'Number', 'accessor': 'number'},\r\n    {'key': 'date', 'value': 'Date', 'accessor': 'date'}\r\n];\r\n\r\nexport function getAnswerStringForDisplayAndType(answer) {\r\n    let displayAnswer = '';\r\n    let answerType = noAnswerType;\r\n    if ('number' in answer && (answer['number'] === 0 || answer['number'])) {\r\n        const number = answer['number'];\r\n        const number_value = Number(number);\r\n        if (!isNaN(number_value)) {\r\n            displayAnswer = number_value.toString();\r\n        } else {\r\n            displayAnswer = number;\r\n        }\r\n        answerType = answerTypesConst[2]\r\n    } else if ('spans' in answer && answer['spans'] && answer['spans'].length > 0) {\r\n        const spans = answer['spans'];\r\n        if (spans.length === 1) {\r\n            displayAnswer = spans[0];\r\n            answerType = answerTypesConst[1];\r\n        } else {\r\n            displayAnswer = [...spans].sort().join(' ┆ ');           \r\n            answerType = answerTypesConst[0];\r\n        }\r\n    } else if ('date' in answer && answer['date']) {\r\n        const date = answer['date']\r\n        if (['day', 'month', 'year'].some(prop => date[prop] === 0 || date[prop])) {\r\n            displayAnswer = JSON.stringify(date, null, 2);\r\n            answerType = answerTypesConst[3]\r\n        }\r\n    }\r\n    return {'displayAnswer': displayAnswer, answerType}\r\n}\r\n\r\nexport function getAnswerForEvaluation(answer) {\r\n    // based on answer_json_to_strings from drop_eval.py of allennlp\r\n    let answerForEvaluation;\r\n    if ('number' in answer && (answer['number'] === 0 || answer['number'])) {\r\n        const number = answer['number'];\r\n        const number_value = Number(number);\r\n        if (!isNaN(number_value)) {\r\n            answerForEvaluation = [number_value.toString()];\r\n        } else {\r\n            answerForEvaluation = [String(number)];\r\n        }\r\n    } else if ('spans' in answer && answer['spans'] && answer['spans'].length > 0) {\r\n        answerForEvaluation = answer['spans']\r\n    } else if ('date' in answer && answer['date']) {\r\n        const date = answer['date']\r\n        answerForEvaluation = [];\r\n        ['day', 'month', 'year'].forEach(prop => {\r\n            if (date[prop] === 0 || date[prop]) {\r\n                answerForEvaluation.push(String(date[prop]))\r\n            }\r\n        });\r\n    }\r\n    return answerForEvaluation.sort();\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Input,\r\n    FormGroup,\r\n    Label,\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Button\r\n} from 'reactstrap';\r\n\r\nclass SearchFilter extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchTextChange = this.searchTextChange.bind(this);\r\n        this.filterQuestionsChange = this.filterQuestionsChange.bind(this);\r\n        this.submit = this.submit.bind(this);\r\n        this.state = { \r\n            ...this.props.searchProps,\r\n            draftSearchText: '',\r\n            draftFilterQuestions: this.props.searchProps.filterQuestions\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.searchText !== this.state.searchText || \r\n            prevState.filterQuestions !== this.state.filterQuestions) {\r\n            this.props.onChange({\r\n                searchText: this.state.searchText,\r\n                filterQuestions: this.state.filterQuestions\r\n            });\r\n        }\r\n    }\r\n\r\n    searchTextChange(event) {\r\n        const newState = { draftSearchText: event.target.value }\r\n        if (this.props.instantSearch) {\r\n            newState.searchText = prepareText(newState.draftSearchText);\r\n        }\r\n        this.setState(newState);\r\n    }\r\n\r\n    filterQuestionsChange(e) {\r\n        const filterQuestions = e.currentTarget.getAttribute('filter-questions') !== true.toString();\r\n        const newState = { draftFilterQuestions: filterQuestions }\r\n        if (this.props.instantSearch) {\r\n            newState.filterQuestions = newState.draftFilterQuestions;\r\n        }\r\n        this.setState(newState);\r\n    }\r\n\r\n    submit(event) {\r\n        this.setState({ \r\n            searchText: prepareText(this.state.draftSearchText),\r\n            filterQuestions: this.state.draftFilterQuestions\r\n        });\r\n    }\r\n\r\n    render() { \r\n            return <div>\r\n                <ListGroup>\r\n                    <ListGroupItem>\r\n                        <Input type='text' id='searchBox' value={this.state.draftSearchText} onChange={this.searchTextChange} />\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                        <FormGroup check>\r\n                            <Label check>\r\n                                <Input type=\"checkbox\" \r\n                                onChange={this.filterQuestionsChange}\r\n                                filter-questions={(this.state.draftFilterQuestions && \r\n                                    this.state.draftFilterQuestions.toString()) || false.toString()} \r\n                                checked={this.state.draftFilterQuestions || false} \r\n                                />Filter Questions\r\n                            </Label>\r\n                        </FormGroup>\r\n                    </ListGroupItem>\r\n                </ListGroup>\r\n                {!this.props.instantSearch ? \r\n                <ListGroup className='list-group-horizontal mt-1'>\r\n                    <ListGroupItem style={{width: '100%'}}>\r\n                        Searched{this.state.filterQuestions ? ' (Filter Questions)': ''}: <span className='text-info'>{this.state.searchText}</span>\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                        <Button color='primary' onClick={this.submit}>Submit</Button>\r\n                    </ListGroupItem>\r\n                </ListGroup> : null}\r\n            </div>;\r\n    }\r\n}\r\n\r\nfunction prepareText(text) {\r\n    return text.toLowerCase();\r\n}\r\n\r\nexport default SearchFilter;","import React from 'react';\r\nimport {\r\n    Input,\r\n    FormGroup,\r\n    Label\r\n} from 'reactstrap';\r\nimport { isChanged } from '../Utils';\r\n\r\nclass CheckboxList extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.change = this.change.bind(this);\r\n        this.state = { \r\n            checked: this.props.checked\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (isChanged(['checked'], prevProps, this.props)) {\r\n            this.setState({ checked: this.props.checked }, () => {\r\n                this.props.onChange(this.state.checked)\r\n            });\r\n        }\r\n    }\r\n\r\n    change(e) {\r\n        const changedKey = e.currentTarget.getAttribute('option-key');\r\n        const changedKeyIndex = this.state.checked.indexOf(changedKey);\r\n        let newChecked;\r\n        if (changedKeyIndex !== -1) {\r\n            newChecked = [...this.state.checked];\r\n            newChecked.splice(changedKeyIndex, 1);\r\n        } else {\r\n            newChecked = [...this.state.checked, changedKey];\r\n        }\r\n        this.setState({ checked: newChecked }, () => this.props.onChange(this.state.checked));\r\n    }\r\n\r\n    render() {\r\n        return this.props.options.map(option => {\r\n            return <FormGroup check key={option.key}>\r\n                        <Label check>\r\n                            <Input type=\"checkbox\" \r\n                            onChange={this.change}\r\n                            option-key={option.key}\r\n                            checked={(this.state.checked && \r\n                                this.state.checked.includes(option.key)) || \r\n                                false} \r\n                            />{option.value}\r\n                        </Label>\r\n                    </FormGroup>\r\n        });\r\n    }\r\n}\r\n \r\nexport default CheckboxList;","import React from 'react';\r\nimport DatasetLoader from './dataset-loader/DatasetLoader';\r\nimport PredictionsLoader from './PredictionsLoader';\r\nimport {\r\n    ListGroup,\r\n    ListGroupItem,\r\n    CardGroup,\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    Button,\r\n    Container\r\n} from 'reactstrap';\r\nimport { shouldUpdate, isChanged } from '../../Utils';\r\nimport { answerTypesConst } from '../AnswersUtils';\r\nimport SearchFilter from './SearchFilter';\r\nimport CheckboxList from '../../checkbox_list/CheckboxList';\r\n\r\nconst props_updateSignals = ['predictionTypes']\r\nconst state_updateSignals = ['dataset', 'predictions', 'filteredAnswerTypes', 'filteredPredictionTypes', 'searchProps']\r\nclass ExplorerSettings extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.datasetChange = this.datasetChange.bind(this);\r\n        this.predictionsChange = this.predictionsChange.bind(this);\r\n        this.filteredAnswerTypesChange = this.filteredAnswerTypesChange.bind(this);\r\n        this.filteredPredictionTypesChange = this.filteredPredictionTypesChange.bind(this);\r\n        this.searchFilterChange = this.searchFilterChange.bind(this);\r\n        this.state = {\r\n            filteredAnswerTypes: this.props.filteredAnswerTypes,\r\n            filteredPredictionTypes: this.props.filteredPredictionTypes,\r\n            searchProps: this.props.searchProps\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        const update = shouldUpdate(props_updateSignals, state_updateSignals, \r\n            this.props, this.state, \r\n            nextProps, nextState, \r\n            true, this.constructor.name);\r\n        return update;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (isChanged(['predictionTypes'], prevProps, this.props)) {\r\n            this.setState({ filteredPredictionTypes: this.props.predictionTypes.map(predictionType => predictionType.key) });\r\n        }\r\n        this.props.onChange(this.state);\r\n    }\r\n\r\n    datasetChange(dataset) {\r\n        this.setState({ dataset });\r\n    }\r\n\r\n    predictionsChange(predictions) {\r\n        this.setState({ predictions });\r\n    }\r\n\r\n    filteredAnswerTypesChange(filteredAnswerTypes) {\r\n        this.setState({ filteredAnswerTypes });\r\n    }\r\n    \r\n    filteredPredictionTypesChange(filteredPredictionTypes) {\r\n        this.setState({ filteredPredictionTypes });\r\n    }\r\n\r\n    searchFilterChange(searchProps) {\r\n        this.setState({ searchProps });\r\n    }\r\n\r\n    render() {\r\n        return <Container className='ml-0' fluid>\r\n            <CardGroup className='row'>\r\n                <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Dataset</CardHeader>\r\n                    <CardBody>\r\n                        <DatasetLoader onDatasetChange={this.datasetChange} \r\n                                        useLocalDataset={this.props.useLocalDataset} \r\n                                        allowSourceSelection={this.props.allowSourceSelection} />\r\n                    </CardBody>\r\n                </Card>\r\n                <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Table Operations</CardHeader>\r\n                    <CardBody style={{height: 0, overflow: 'auto'}}>\r\n                        <ListGroup>\r\n                            <ListGroupItem>\r\n                                <Button color='primary' size='sm' style={{width: '100%'}} onClick={() => {\r\n                                    if (this.props.expandAllFunc) {\r\n                                        this.props.expandAllFunc()\r\n                                    }\r\n                                }}>EXPAND ALL\r\n                                </Button>\r\n                            </ListGroupItem>\r\n                            <ListGroupItem>\r\n                                <Button color='primary' size='sm' style={{width: '100%'}} onClick={() => {\r\n                                    if (this.props.collapseAllFunc) {\r\n                                        this.props.collapseAllFunc()\r\n                                    }\r\n                                }}>COLLAPSE ALL\r\n                                </Button>\r\n                            </ListGroupItem>\r\n                            <ListGroupItem>\r\n                                <Button color='primary' size='sm' style={{width: '100%'}} onClick={() => {\r\n                                    if (this.props.clearSelectedAnswersFunc) {\r\n                                        this.props.clearSelectedAnswersFunc()\r\n                                    }\r\n                                }}>CLEAR SELECTED ANSWERS\r\n                                </Button>\r\n                            </ListGroupItem>\r\n                        </ListGroup>\r\n                    </CardBody>\r\n                </Card>\r\n                <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Filter Answer Type</CardHeader>\r\n                    <CardBody>\r\n                        <CheckboxList onChange={this.filteredAnswerTypesChange} checked={this.state.filteredAnswerTypes} options={answerTypesConst}></CheckboxList>\r\n                    </CardBody>\r\n                </Card>\r\n                <Card className='col-sm-6 p-0'>\r\n                    <CardHeader>Search</CardHeader>\r\n                    <CardBody>\r\n                        <SearchFilter onChange={this.searchFilterChange} \r\n                        instantSearch={this.props.instantSearch} searchProps={this.props.searchProps} />\r\n                    </CardBody>\r\n                </Card>\r\n            </CardGroup>\r\n            <CardGroup className='row'>\r\n                <Card className='col-sm-2 p-0'>\r\n                        <CardHeader>Predictions</CardHeader>\r\n                        <CardBody>\r\n                            <PredictionsLoader onChange={this.predictionsChange} />\r\n                        </CardBody>\r\n                </Card>\r\n                {this.state.predictions ? <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Prediction Head</CardHeader>\r\n                    <CardBody>\r\n                        <CheckboxList onChange={this.filteredPredictionTypesChange} checked={this.state.filteredPredictionTypes} options={this.props.predictionTypes}></CheckboxList>\r\n                    </CardBody>\r\n                </Card> : null}\r\n            </CardGroup>\r\n        </Container>\r\n    }\r\n}\r\n\r\nexport default ExplorerSettings;","import styled from 'styled-components';\r\n\r\nconst WrapDiv = styled.div`\r\n    white-space: pre-wrap;       /* css-3 */\r\n    white-space: -moz-pre-wrap;  /* Mozilla, since 1999 */\r\n    white-space: -pre-wrap;      /* Opera 4-6 */\r\n    white-space: -o-pre-wrap;    /* Opera 7 */\r\n    word-wrap: break-word;       /* Internet Explorer 5.5+ */\r\n`;\r\n\r\nexport default WrapDiv;","import { answerTypesConst, getAnswerStringForDisplayAndType, getAnswerForEvaluation,\r\n    noAnswerType, noPredictionType } from '../AnswersUtils';\r\nimport { intersect } from '../../Utils';\r\n\r\nexport function processDataHelper(dataset, predictions) {\r\n\r\n    let hasValidatedAnswers = false;\r\n    let hasValidPredictions = false;\r\n    let passage_id_to_displayIndex = {};\r\n    let passage_id_to_queries_displayIndexes = {};\r\n    let predictionTypes = []\r\n    let data = [];\r\n    if (dataset) {\r\n        const reduced = dataset.reduce(process_row, {\r\n            data: [],\r\n            hasValidatedAnswers: false,\r\n            passage_id_to_displayIndex: {},\r\n            passage_id_to_queries_displayIndexes: {}\r\n        });\r\n        data = reduced.data;\r\n        hasValidatedAnswers = reduced.hasValidatedAnswers;\r\n        passage_id_to_displayIndex = reduced.passage_id_to_displayIndex;\r\n        passage_id_to_queries_displayIndexes = reduced.passage_id_to_queries_displayIndexes;\r\n\r\n        if (predictions) {\r\n            const keyToPredictionType = {}\r\n            for (let i=0; i < predictions.length; i++) {\r\n                const prediction = predictions[i];\r\n\r\n                const passage_id = prediction.passage_id;\r\n                const query_id = prediction.query_id;\r\n\r\n                const passage_displayIndex =passage_id_to_displayIndex[passage_id];\r\n                if (passage_displayIndex !== undefined) {\r\n                    const row = data[passage_displayIndex];\r\n\r\n                    const query_displayIndex = passage_id_to_queries_displayIndexes[passage_id][query_id];\r\n                    if (query_displayIndex !== undefined) {\r\n                        hasValidPredictions = true;\r\n                        const qa_pair = row.qa_pairs[passage_id_to_queries_displayIndexes[passage_id][query_id]]\r\n\r\n                        let predictionType = keyToPredictionType[prediction.predicted_ability]\r\n                        if (!predictionType) {\r\n                            predictionType = keyToPredictionType[prediction.predicted_ability] = {\r\n                                'key': prediction.predicted_ability, \r\n                                'value': prediction.predicted_ability\r\n                            };\r\n                            predictionTypes.push(predictionType);\r\n                        }\r\n\r\n                        const predictionValue = prediction.answer.value;\r\n\r\n                        qa_pair.prediction = Array.isArray(predictionValue) ? predictionValue : [predictionValue];\r\n                        qa_pair.displayPrediction = getAnswerStringForDisplayAndType({'spans': qa_pair.prediction}).displayAnswer;\r\n                        qa_pair.evaluationPrediction = getAnswerForEvaluation({'spans': qa_pair.prediction});\r\n                        qa_pair.predictionType = predictionType;\r\n                        qa_pair.maximizingGroundTruth = prediction.maximizing_ground_truth.sort();\r\n                        qa_pair.f1 = prediction.f1;\r\n                        qa_pair.em = prediction.em;\r\n                        qa_pair.loss = prediction.loss;\r\n\r\n                        const maximizingGroundTruth = qa_pair.maximizingGroundTruth;\r\n                        const maximizingGroundTruthIndex = qa_pair.evaluationAnswers.findIndex(evaluationAnswer => {\r\n                            if (evaluationAnswer.length !== maximizingGroundTruth.length) {\r\n                                return false;\r\n                            }\r\n                            for (let i = 0; i < evaluationAnswer.length; i++) {\r\n                                if (evaluationAnswer[i].toLowerCase() !== maximizingGroundTruth[i].toLowerCase()) {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                            return true;\r\n                        });\r\n                        if (maximizingGroundTruthIndex !== -1) {\r\n                            qa_pair.maximizingGroundTruthIndex = maximizingGroundTruthIndex;\r\n                        }\r\n                        \r\n                        const predictionSpans = prediction.answer.spans;\r\n                        if (predictionSpans) {\r\n                            qa_pair.predictionSpans = predictionSpans;\r\n                        }\r\n                    } else {\r\n                        continue;\r\n                    }\r\n                }\r\n                else {\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    predictionTypes.sort()\r\n    predictionTypes.push(noAnswerType)\r\n\r\n    return {\r\n        data,\r\n        hasValidatedAnswers,\r\n        hasValidPredictions,\r\n        predictionTypes\r\n    };\r\n}\r\n\r\nfunction process_row(accumulator, row, index) {\r\n    const passage_id = row.passage_id;\r\n    const passage_displayIndex = accumulator.data.length;\r\n\r\n    const reduced = row.qa_pairs.reduce(process_qa_pair, {\r\n        passage_id: passage_id, \r\n        qa_pairs: [],\r\n        hasValidatedAnswers: accumulator.hasValidatedAnswers,\r\n        query_id_to_displayIndex: {}\r\n    });\r\n    const qa_pairs = reduced.qa_pairs;\r\n    accumulator.hasValidatedAnswers = reduced.hasValidatedAnswers;\r\n    const query_id_to_displayIndex = reduced.query_id_to_displayIndex;\r\n\r\n    const hasQuestions = qa_pairs.length !== 0;\r\n    const isValid = hasQuestions;\r\n\r\n    if (isValid) {\r\n        const reduced_row = {\r\n            ...row,\r\n            qa_pairs,\r\n            passage_index: index\r\n        }\r\n        \r\n        accumulator.data.push(reduced_row);\r\n        accumulator.passage_id_to_displayIndex[passage_id] = passage_displayIndex;\r\n        accumulator.passage_id_to_queries_displayIndexes[passage_id] = query_id_to_displayIndex\r\n    }\r\n    return accumulator;\r\n}\r\n\r\nfunction process_qa_pair(accumulator, qa_pair, query_index) {\r\n    const query_displayIndex = accumulator.qa_pairs.length;\r\n    const passage_id = accumulator.passage_id;\r\n\r\n    if (!accumulator.hasValidatedAnswers && qa_pair.validated_answers && qa_pair.validated_answers.length > 0) {\r\n        accumulator.hasValidatedAnswers = true;\r\n    }\r\n\r\n    const {displayAnswer: firstDisplayAnswer, answerType: firstAnswerType} = getAnswerStringForDisplayAndType(qa_pair.answer);\r\n    const displayAnswers = [firstDisplayAnswer];\r\n    const answersTypes = [firstAnswerType];\r\n\r\n    const evaluationAnswers = [getAnswerForEvaluation(qa_pair.answer)]\r\n\r\n    if (firstAnswerType === noAnswerType) {\r\n        return accumulator;\r\n    }\r\n\r\n    if (qa_pair.validated_answers && qa_pair.validated_answers.length > 0) {\r\n        qa_pair.validated_answers.forEach(validatedAnswer => {\r\n            const evaluationAnswer = getAnswerForEvaluation(validatedAnswer)\r\n\r\n            const alreadyAdded = evaluationAnswers.some(addedEvaluationAnswer => {\r\n                if (addedEvaluationAnswer.length !== evaluationAnswer.length) {\r\n                    return false;\r\n                }\r\n                for (let i = 0; i < evaluationAnswer.length; i++) {\r\n                    if (evaluationAnswer[i].toLowerCase() !== addedEvaluationAnswer[i].toLowerCase()) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n\r\n            if (!alreadyAdded) {\r\n                const {displayAnswer, answerType} = getAnswerStringForDisplayAndType(validatedAnswer);\r\n                displayAnswers.push(displayAnswer);\r\n                answersTypes.push(answerType);\r\n\r\n                evaluationAnswers.push(getAnswerForEvaluation(validatedAnswer));\r\n            }\r\n        });\r\n    }\r\n    \r\n    accumulator.qa_pairs.push({\r\n        ...qa_pair,\r\n        evaluationAnswers,\r\n        displayAnswers,\r\n        answersTypes,\r\n        maximizingGroundTruthIndex: 0,\r\n        query_index,\r\n        passage_id\r\n    })\r\n    accumulator.query_id_to_displayIndex[qa_pair.query_id] = query_displayIndex;\r\n    \r\n    return accumulator;\r\n}\r\n\r\n\r\nexport function filterDataHelper(internals, filteredAnswerTypes, filteredPredictionTypes, searchProps) {\r\n\r\n    const data = internals.data; \r\n    const filteredDataPerFilter = internals.filteredDataPerFilter;       \r\n\r\n    const searchText = searchProps.searchText;\r\n    const useTextSearch = Boolean(searchText);\r\n\r\n    if (useTextSearch) {\r\n        if (!filteredDataPerFilter.search) {\r\n            const reduced = data.reduce(searchReudcer_rows, {\r\n                filteredData: [],\r\n                searchProps,\r\n                hasValidPredictions: internals.hasValidPredictions\r\n            })\r\n            const result = reduced.filteredData;\r\n\r\n            filteredDataPerFilter.search = result;\r\n        }\r\n    }\r\n\r\n    if (!filteredDataPerFilter.answerTypes) {\r\n        if (filteredAnswerTypes.length > 0) {\r\n            if (filteredAnswerTypes.length < answerTypesConst.length) {\r\n                const reduced = data.reduce(typeFilterReudcer_rows, {\r\n                    filteredData: [],\r\n                    filteredTypes: filteredAnswerTypes,\r\n                    fields: ['answersTypes'],\r\n                    missingValue: noAnswerType\r\n                });\r\n                const result = reduced.filteredData;\r\n\r\n                filteredDataPerFilter.answerTypes = result;\r\n            }\r\n        } else {\r\n            filteredDataPerFilter.answerTypes = [];\r\n        }\r\n    }\r\n\r\n    if (internals.hasValidPredictions && !filteredDataPerFilter.predictionTypes) {\r\n        if (filteredPredictionTypes.length > 0) {\r\n            const reduced = data.reduce(typeFilterReudcer_rows, {\r\n                filteredData: [],\r\n                filteredTypes: filteredPredictionTypes,\r\n                fields: ['predictionType'],\r\n                missingValue: noPredictionType\r\n            });\r\n            const result = reduced.filteredData;\r\n\r\n            filteredDataPerFilter.predictionTypes = result;\r\n        } else {\r\n            filteredDataPerFilter.predictionTypes = [];\r\n        }\r\n    }\r\n\r\n    let filteredData = intersectFilteredData(filteredDataPerFilter, data.length);\r\n\r\n    if (!filteredData) {\r\n        filteredData = data;\r\n    }\r\n\r\n    // Add mean metrics for passage and overall?\r\n    const metrics = {\r\n        questionsCount: 0,\r\n        predictedCount: 0,\r\n        f1: 0,\r\n        em: 0\r\n    }\r\n\r\n    for (let i=0; i < filteredData.length; i++) {\r\n        const row = filteredData[i];\r\n\r\n        metrics.questionsCount += row.qa_pairs.length;\r\n\r\n        let row_predicted = 0;\r\n        let row_f1 = 0;\r\n        let row_em = 0;\r\n        if (internals.hasValidPredictions) {\r\n            for (let j=0; j < row.qa_pairs.length; j++) {\r\n                const qa_pair = row.qa_pairs[j];\r\n    \r\n                if (qa_pair.prediction) {\r\n                    row_predicted += 1;\r\n                    row_f1 += qa_pair.f1;\r\n                    row_em += qa_pair.em;\r\n                }\r\n            }\r\n        }\r\n        metrics.f1 += row_f1;\r\n        metrics.em += row_em;\r\n        metrics.predictedCount += row_predicted;\r\n\r\n        row.f1 = row_f1 / row_predicted;\r\n        row.em = row_em / row_predicted;\r\n    }\r\n    metrics.f1 /= metrics.predictedCount;\r\n    metrics.em /= metrics.predictedCount;\r\n\r\n\r\n    return {\r\n        filteredData,\r\n        filteredDataPerFilter,\r\n        metrics\r\n    };\r\n}\r\n\r\nfunction intersectFilteredData(filteredDataPerFilter) {\r\n    const filteredDataArr = Object.values(filteredDataPerFilter).filter(filteredData => Boolean(filteredData))\r\n    const filtersCount = filteredDataArr.length;\r\n\r\n    if (filtersCount === 0) {\r\n        return;\r\n    }\r\n\r\n    if (filtersCount === 1) {\r\n        return filteredDataArr[0];\r\n    }\r\n\r\n    const allNonEmpty = filteredDataArr.every(filteredData => filteredData.length > 0);\r\n    if (!allNonEmpty) {\r\n        return [];\r\n    }\r\n\r\n    return intersect(filteredDataArr, row => row.passage_index, intersectRows);\r\n}\r\n\r\nfunction intersectRows(sameRows) {\r\n    const qa_pairs_arr = sameRows.map(row => row.qa_pairs);\r\n\r\n    const filtered_qa_pairs = intersect(qa_pairs_arr, qa_pair => qa_pair.query_index, (sameQuestions) => {\r\n        return Object.assign({}, ...sameQuestions);\r\n    });\r\n\r\n    if (filtered_qa_pairs.length > 0) {\r\n        return Object.assign({}, ...sameRows, {'qa_pairs': filtered_qa_pairs});\r\n    }\r\n    return;\r\n}\r\n\r\n// Text Search Filtering\r\nfunction searchReudcer_rows(accumulator, row) {\r\n    const searchProps = accumulator.searchProps;\r\n    const searchText = searchProps.searchText;\r\n\r\n    const passageTextSearchValid = row.passage.toLowerCase().includes(searchText) || \r\n                                    row.passage_id.toLowerCase().includes(searchText);\r\n\r\n    let filtered_qa_pairs = row.qa_pairs;\r\n    let hasTextSearchValidQuestions = false;\r\n\r\n    if (searchProps.filterQuestions) {\r\n        filtered_qa_pairs = row.qa_pairs.filter(qa_pair => {\r\n            return isQuestionTextSearchValid(qa_pair, searchText, accumulator.hasValidPredictions);\r\n        });\r\n\r\n        hasTextSearchValidQuestions = filtered_qa_pairs.length > 0;\r\n\r\n    } else if (!passageTextSearchValid) {\r\n\r\n        hasTextSearchValidQuestions = row.qa_pairs.some(qa_pair => {\r\n            return isQuestionTextSearchValid(qa_pair, searchText, accumulator.hasValidPredictions);\r\n        });\r\n    }\r\n\r\n    const hasQuestions = filtered_qa_pairs.length > 0;\r\n    const isValid = (passageTextSearchValid && hasQuestions) || hasTextSearchValidQuestions;\r\n\r\n    if (isValid) {\r\n        accumulator.filteredData.push({\r\n            ...row,\r\n            qa_pairs: filtered_qa_pairs,\r\n        });\r\n    }\r\n    return accumulator;\r\n}\r\nfunction isQuestionTextSearchValid(qa_pair, searchText, hasValidPredictions) {\r\n    let result = qa_pair.question.toLowerCase().includes(searchText) ||\r\n                qa_pair.query_id.toLowerCase().includes(searchText);\r\n    if (result) {\r\n        return true;\r\n    }\r\n\r\n    for (let i = 0; i < qa_pair.evaluationAnswers.length; i++) {\r\n        const evaluationAnswer = qa_pair.evaluationAnswers[i];\r\n        for (let j = 0; j < evaluationAnswer.length; j++) {\r\n            result |= evaluationAnswer[j].toLowerCase().includes(searchText);\r\n\r\n            if (result) {\r\n                break;\r\n            }\r\n        }\r\n        if (result) {\r\n            break;\r\n        }\r\n    }\r\n    if (result) {\r\n        return true;\r\n    }\r\n\r\n    if (hasValidPredictions) {\r\n        const evaluationPrediction = qa_pair.evaluationPrediction;\r\n        if (evaluationPrediction) {\r\n            result = evaluationPrediction.some(x => {\r\n                return x.toLowerCase().includes(searchText)\r\n            });\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n// Type Filtering\r\nfunction typeFilterReudcer_rows(accumulator, row) {\r\n    const filteredTypes = accumulator.filteredTypes;\r\n\r\n    const { filtered_qa_pairs } = row.qa_pairs.reduce(typeFilterReudcer_qa_pairs, {\r\n        filtered_qa_pairs: [],\r\n        filteredTypes,\r\n        fields: accumulator.fields,\r\n        missingValue: accumulator.missingValue\r\n    });\r\n\r\n    const hasQuestions = filtered_qa_pairs.length > 0;\r\n    const isValid = hasQuestions;\r\n\r\n    if (isValid) {\r\n        accumulator.filteredData.push({\r\n            ...row,\r\n            qa_pairs: filtered_qa_pairs,\r\n        });\r\n    }\r\n    return accumulator;\r\n}\r\nfunction typeFilterReudcer_qa_pairs(accumulator, qa_pair) {\r\n    const filteredTypes = accumulator.filteredTypes;\r\n    const fields = accumulator.fields;\r\n\r\n    let typeValid = false;\r\n    for (let i = 0; i < fields.length; i++) {\r\n        const field = fields[i];\r\n\r\n        const obj = qa_pair[field] ? qa_pair[field] : accumulator.missingValue;\r\n        if (Array.isArray(obj)) {\r\n            const arr = obj;\r\n            for (let j = 0; j < arr.length; j++) {\r\n                const value = arr[j];\r\n                typeValid = filteredTypes.includes(value.key);\r\n                if (typeValid) {\r\n                    break;\r\n                }\r\n            }\r\n            if (typeValid) {\r\n                break;\r\n            } \r\n        } else {\r\n            const value = obj;\r\n            typeValid = filteredTypes.includes(value.key);\r\n            if (typeValid) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    const isValid = typeValid;\r\n\r\n    if (isValid) {\r\n        accumulator.filtered_qa_pairs.push({\r\n            ...qa_pair\r\n        });\r\n    }\r\n\r\n    return accumulator;\r\n}\r\n","import React from 'react';\r\nimport ReactTable from 'react-table'\r\nimport cloneDeep from 'clone-deep'\r\nimport 'react-table/react-table.css';\r\nimport '../../../scss/highlighter.css';\r\nimport '../../../scss/react-table.css';\r\nimport WrapDiv from './WrapDiv'\r\nimport { shouldUpdate, isChanged, areSetsEqual, \r\n    displayIndexesToViewIndex, viewIndexToDisplayIndex, viewIndexToDisplayIndexes } from '../../Utils';\r\nimport { processDataHelper, filterDataHelper } from './DataUtils';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { \r\n    Table \r\n} from 'reactstrap';\r\n\r\nconst MAX_QUESTIONS_PER_PASSAGE_ASSUMPTION = 150;\r\n\r\nconst initialInternals = {\r\n    data: undefined,\r\n    filteredData: undefined,\r\n    filteredDataPerFilter: {\r\n        answerTypes: undefined,\r\n        predictionTypes: undefined,\r\n        search: undefined\r\n    },\r\n    predictionTypes: [],\r\n\r\n    hasValidatedAnswers: false,\r\n    hasValidPredictions: false,\r\n    metrics: undefined\r\n}\r\n\r\nconst initialState = {\r\n    page: 0,\r\n    passagesPageSize: 5,\r\n    questionsPageSize: MAX_QUESTIONS_PER_PASSAGE_ASSUMPTION,\r\n    expanded_passage_ids: [],\r\n    activeQuestions: {},\r\n    questionResized: [],\r\n    questionSorted: []\r\n};\r\n\r\nconst filterProps = ['filteredAnswerTypes', 'filteredPredictionTypes', 'searchProps']\r\nconst props_updateSignals = ['dataset', 'predictions', ...filterProps]\r\nconst state_updateSignals = ['page', 'passagesPageSize', 'questionsPageSize', 'expanded_passage_ids', 'activeQuestions', 'questionResized', 'questionSorted']\r\nclass ExplorerTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        renderPassageCell = renderPassageCell.bind(this);\r\n        renderHighlightableQuestionCell = renderHighlightableQuestionCell.bind(this);\r\n        renderAnswersCell = renderAnswersCell.bind(this);\r\n        activeQuestionChange = activeQuestionChange.bind(this);\r\n\r\n        this.clearSelectedAnswers = this.clearSelectedAnswers.bind(this);\r\n        this.expandAll = this.expandAll.bind(this);\r\n        this.collapseAll = this.collapseAll.bind(this);\r\n        this.expandedChange = this.expandedChange.bind(this);\r\n        this.getExpanded = this.getExpanded.bind(this);\r\n        this.questionResizedChange = this.questionResizedChange.bind(this);\r\n\r\n        this.processData = this.processData.bind(this);\r\n        this.filterData = this.filterData.bind(this);\r\n        this.getSortedData = this.getSortedData.bind(this);\r\n\r\n        this.pageChanged = this.pageChanged.bind(this);\r\n        this.passagesPageSizeChanged = this.passagesPageSizeChanged.bind(this);\r\n        this.questionsPageSizeChanged = this.questionsPageSizeChanged.bind(this);\r\n        this.passageSortedChange = this.passageSortedChange.bind(this);\r\n        this.questionSortedChange = this.questionSortedChange.bind(this);\r\n\r\n        this.setInternals = this.setInternals.bind(this);\r\n        this.internals = cloneDeep(initialInternals);\r\n        this.state = cloneDeep(initialState);\r\n\r\n        this.tableRef = React.createRef();\r\n    }\r\n\r\n    setInternals(newInternals) {\r\n        Object.assign(this.internals, newInternals)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.sendClearSelectedAnswersFunc(this.clearSelectedAnswers);\r\n        this.props.sendExpandAllFunc(this.expandAll);\r\n        this.props.sendCollapseAllFunc(this.collapseAll);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.props.dataset !== nextProps.dataset) {\r\n            // reset all when the dataset is switched\r\n            this.setInternals(cloneDeep(initialInternals));\r\n            this.setState(cloneDeep(initialState));\r\n        } else if (this.props.predictions !== nextProps.predictions) {\r\n             this.setInternals({data: undefined, filteredData: undefined});\r\n        } else if (isChanged(filterProps, this.props, nextProps)) {\r\n            // update only the changed filter\r\n            const filteredAnswerTypesChanged = this.props.filteredAnswerTypes !== nextProps.filteredAnswerTypes;\r\n            const filteredPredictionTypesChanged = this.props.filteredPredictionTypes !== nextProps.filteredPredictionTypes;\r\n            const searchPropsChanged = this.props.searchProps !== nextProps.searchProps;\r\n            const refilteringRequired = filteredAnswerTypesChanged || filteredPredictionTypesChanged || searchPropsChanged;\r\n\r\n            this.setInternals({\r\n                filteredData: refilteringRequired ? undefined : this.internals.filteredData\r\n            });\r\n            if (filteredAnswerTypesChanged) {\r\n                this.internals.filteredDataPerFilter.answerTypes = undefined;\r\n            }\r\n            if (filteredPredictionTypesChanged) {\r\n                this.internals.filteredDataPerFilter.predictionTypes = undefined;\r\n            }\r\n            if (searchPropsChanged) {\r\n                this.internals.filteredDataPerFilter.search = undefined;\r\n            }\r\n        }\r\n        \r\n        const update = shouldUpdate(props_updateSignals, state_updateSignals, \r\n            this.props, this.state, \r\n            nextProps, nextState, \r\n            true, this.constructor.name);\r\n        return update;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (isChanged(['dataset', 'predictions'], prevProps, this.props)) {\r\n            this.props.onPredictionsTypeChanged(this.internals.predictionTypes);\r\n        }\r\n        if (isChanged(filterProps, prevProps, this.props)) {\r\n            // force updated is needed for getExpanded() to be called again,\r\n            // so it will use the filtered sorted data to find the expanded rows\r\n            this.forceUpdate(() => {\r\n                this.setState({ page: 0 });\r\n            })\r\n        }\r\n    }\r\n\r\n    pageChanged(page) {\r\n        this.setState({ page });\r\n    }\r\n\r\n    passagesPageSizeChanged(pageSize, page) {\r\n        this.setState({ passagesPageSize: pageSize, page });\r\n    }\r\n\r\n    questionsPageSizeChanged(pageSize, page) {\r\n        this.setState({ questionsPageSize: pageSize, page });\r\n    }\r\n\r\n    passageSortedChange(newSorted, column, additive) {\r\n        // force updated is needed for getExpanded() to be called,\r\n        // so it will use the filtered sorted data to find the expanded rows\r\n        this.forceUpdate();\r\n    }\r\n\r\n    questionSortedChange(newSorted, column, additive) {\r\n        this.setState({\r\n            questionSorted: newSorted\r\n        });\r\n    }\r\n\r\n    expandedChange(newExpanded, index, event) {\r\n        const pageSize = this.state.passagesPageSize;\r\n        const page = this.state.page;\r\n\r\n        const viewIndex = index[0];\r\n        const displayIndex = viewIndexToDisplayIndex(viewIndex, page, pageSize);\r\n\r\n        const sortedData = this.getSortedData();\r\n        const passage_id = sortedData[displayIndex].passage_id; \r\n        \r\n        const matchingPosition = this.state.expanded_passage_ids.indexOf(passage_id);\r\n        if (matchingPosition === -1) {\r\n            this.setState({\r\n                expanded_passage_ids: [...this.state.expanded_passage_ids, passage_id]\r\n            });\r\n        } else {\r\n            const expanded_passage_ids = [...this.state.expanded_passage_ids];\r\n            expanded_passage_ids.splice(matchingPosition, 1);\r\n            this.setState({\r\n                expanded_passage_ids\r\n            });\r\n        }\r\n    }\r\n\r\n    expandAll() {\r\n        this.setState({\r\n            expanded_passage_ids: [...this.internals.filteredData.map(row => row.passage_id)]\r\n        });\r\n    }\r\n\r\n    collapseAll() {\r\n        this.setState({\r\n            expanded_passage_ids: []\r\n        });\r\n    }\r\n\r\n    getExpanded() {\r\n        const defaultExpanded = {};\r\n        if (!this.tableRef.current) {\r\n            return defaultExpanded;\r\n        }\r\n\r\n        const sortedData = this.getSortedData();\r\n\r\n        const indexesFromSorted = new Set(sortedData.map(row => row.passage_index))\r\n        const indexesFromFiltered = new Set(this.internals.filteredData.map(row => row.passage_index))\r\n        if (!areSetsEqual(indexesFromSorted, indexesFromFiltered)) {\r\n            return defaultExpanded;\r\n        }\r\n\r\n        const pageSize = this.state.passagesPageSize;\r\n        const page = this.state.page;\r\n\r\n        const viewIndexes = [...Array(pageSize).keys()];\r\n        const displayIndexsInPage = viewIndexToDisplayIndexes(viewIndexes, page, pageSize);\r\n\r\n        const expandedDisplayIndexes = displayIndexsInPage.filter(displayIndex => {\r\n            if (displayIndex < sortedData.length) {\r\n                const passage_id = sortedData[displayIndex].passage_id;\r\n                return this.state.expanded_passage_ids.includes(passage_id)\r\n            }\r\n            return false;\r\n        });\r\n\r\n        let expandedInPage = displayIndexesToViewIndex(expandedDisplayIndexes, page, pageSize, true);\r\n\r\n        return expandedInPage;\r\n    }\r\n\r\n    questionResizedChange(newResized, event) {\r\n        this.setState({\r\n            questionResized: newResized\r\n        });\r\n    }\r\n\r\n    clearSelectedAnswers() {\r\n        this.setState({\r\n            activeQuestions: {}\r\n        });\r\n    }\r\n\r\n    processData() {\r\n        const dataset = this.props.dataset;\r\n        const predictions = this.props.predictions;\r\n\r\n        const {\r\n            data, \r\n            hasValidatedAnswers,\r\n            hasValidPredictions,\r\n            predictionTypes\r\n        } = processDataHelper(dataset, predictions);\r\n\r\n        this.setInternals({\r\n            data,\r\n            hasValidatedAnswers,\r\n            hasValidPredictions,\r\n            predictionTypes\r\n        });\r\n    }\r\n\r\n    filterData(immediatelyAfterDatasetChange) {\r\n        const filteredAnswerTypes = this.props.filteredAnswerTypes;\r\n        const filteredPredictionTypes = this.props.filteredPredictionTypes;\r\n        const searchProps = this.props.searchProps;\r\n\r\n        const {\r\n            filteredData,\r\n            filteredDataPerFilter,\r\n            metrics\r\n        } = filterDataHelper(this.internals, filteredAnswerTypes, filteredPredictionTypes, searchProps, immediatelyAfterDatasetChange);\r\n        \r\n        this.setInternals({\r\n            filteredData,\r\n            filteredDataPerFilter,\r\n            metrics\r\n        });\r\n    }\r\n\r\n    getSortedData() {\r\n        return this.tableRef.current.getResolvedState().sortedData;\r\n    }\r\n\r\n    render() {\r\n\r\n        console.time('processData');\r\n        let immediatelyAfterDatasetChange = false;\r\n        if (!this.internals.data) {\r\n            this.processData();\r\n            immediatelyAfterDatasetChange = true;\r\n        }\r\n        console.timeEnd('processData');\r\n        \r\n        console.time('filterData');\r\n        if (!this.internals.filteredData) {\r\n            this.filterData(immediatelyAfterDatasetChange);\r\n        }        \r\n        console.timeEnd('filterData');\r\n\r\n        const passage_columns = [\r\n            {\r\n                Header: '#',\r\n                id: 'passage_index',\r\n                accessor: 'passage_index',\r\n                width: 50\r\n            },\r\n            {\r\n                Header: 'Passage ID',\r\n                accessor: 'passage_id',\r\n                width: 110\r\n            }, \r\n            {\r\n                Header: 'Passage',\r\n                accessor: 'passage',\r\n                Cell: renderPassageCell\r\n            }, \r\n            {\r\n                Header: 'Count',\r\n                id: 'questions_count',\r\n                accessor: row => row.qa_pairs.length,\r\n                width: 50,\r\n                resizable: false\r\n            },\r\n            {\r\n                Header: 'F1',\r\n                id: 'f1',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: qa_pair => forceDecimalPlaces(qa_pair.f1, 2),\r\n                width: 40,\r\n                resizable: false\r\n            }, {\r\n                Header: 'EM',\r\n                id: 'em',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: qa_pair => forceDecimalPlaces(qa_pair.em, 2),\r\n                width: 40,\r\n                resizable: false\r\n            }\r\n        ]\r\n\r\n        const qa_columns = [\r\n            {\r\n                Header: '#',\r\n                accessor: 'query_index',\r\n                width: 40\r\n            },\r\n            {\r\n                Header: 'Question ID',\r\n                accessor: 'query_id',\r\n                width: 100\r\n            },\r\n            {\r\n                Header: 'Question',\r\n                accessor: 'question',\r\n                Cell: renderHighlightableQuestionCell\r\n            },\r\n            {\r\n                Header: 'Answer Options',\r\n                accessor: 'displayAnswers',\r\n                Cell: renderAnswersCell,\r\n                width: 150\r\n            },\r\n            {\r\n                Header: '→ Type',\r\n                id: 'answersTypes',\r\n                accessor: qa_pair => qa_pair.answersTypes,\r\n                Cell: renderAnswersTypesCell,\r\n                width: 100,\r\n                resizable: false\r\n            },\r\n            {\r\n                Header: 'Prediction',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: 'displayPrediction',\r\n                Cell: renderHighlightableQuestionCell,\r\n                width: 150\r\n            },\r\n            {\r\n                Header: 'Prediction Head',\r\n                id: 'predictionType',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: qa_pair => qa_pair.predictionType ? qa_pair.predictionType.value : '',\r\n                width: 110,\r\n                resizable: false\r\n            },\r\n            {\r\n                Header: 'F1',\r\n                id: 'f1',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: qa_pair => forceDecimalPlaces(qa_pair.f1, 2),\r\n                width: 40,\r\n                resizable: false\r\n            }, {\r\n                Header: 'EM',\r\n                id: 'em',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: qa_pair => forceDecimalPlaces(qa_pair.em, 2),\r\n                width: 40,\r\n                resizable: false\r\n            }\r\n        ]\r\n\r\n        return <div className='container-fluid'>\r\n            <div className='row justify-content-center'>\r\n                <div className='col-3'>\r\n                    <h4>\r\n                    Passage Count: {this.internals.filteredData.length.toLocaleString()}\r\n                    </h4>\r\n                </div>\r\n                <div className='col-3'>\r\n                    <h4>\r\n                        Questions Count: {this.internals.metrics.questionsCount.toLocaleString()}\r\n                    </h4>\r\n                </div>\r\n                {this.props.predictions ? <div className='col-3'>\r\n                    <h4>\r\n                        {this.internals.hasValidPredictions ?\r\n                        `Predictions Count: ${this.internals.metrics.predictedCount.toLocaleString()}` :\r\n                        'Predictions do not match the dataset'\r\n                        }\r\n                    </h4>\r\n                </div> : null}\r\n                {(this.props.predictions && this.internals.hasValidPredictions) ? <div className='col-3'>\r\n                    <h4>\r\n                        F1: {forceDecimalPlaces(this.internals.metrics.f1, 3)}, EM: {forceDecimalPlaces(this.internals.metrics.em, 3)}\r\n                    </h4>\r\n                </div> : null}\r\n            </div>\r\n            <div className='row'><div className='col-12'>\r\n                <ReactTable ref={this.tableRef} className=\"-striped-passage -highlight-passage\"\r\n                data={this.internals.filteredData} \r\n                columns={passage_columns}\r\n                minRows={0}\r\n                showPaginationTop={true}\r\n                showPaginationBottom={true}\r\n                page={this.state.page}\r\n                pageSize={this.state.passagesPageSize}\r\n                pageSizeOptions={[1, 5, 10, 20, 25, 50, 100]}\r\n                onPageChange={this.pageChanged}\r\n                onPageSizeChange={this.passagesPageSizeChanged}\r\n                collapseOnSortingChange={false}\r\n                collapseOnPageChange={false}\r\n                collapseOnDataChange={false}\r\n                onSortedChange={this.passageSortedChange}\r\n                expanded={this.getExpanded()}\r\n                onExpandedChange={(newExpanded, index, event) => this.expandedChange(newExpanded, index, event)}\r\n                SubComponent={row => {\r\n                    const qa_pairs = row.original.qa_pairs\r\n                    return (\r\n                        <ReactTable className=\"-striped-question -highlight-question\" style={{maxHeight: '400px'}}\r\n                        data={qa_pairs}\r\n                        columns={qa_columns}\r\n                        minRows={0}\r\n                        sorted={this.state.questionSorted}\r\n                        onSortedChange={this.questionSortedChange}\r\n                        resized={this.state.questionResized}\r\n                        onResizedChange={this.questionResizedChange}\r\n                        pageSize={this.state.questionsPageSize}\r\n                        pageSizeOptions={[1, 5, 10, 20, 25, MAX_QUESTIONS_PER_PASSAGE_ASSUMPTION]}\r\n                        onPageSizeChange={this.questionsPageSizeChanged}\r\n                        showPagination={false}\r\n                        getTrProps={(state, rowInfo, column, instance) => {\r\n                            return {\r\n                                onClick: (e, handleOriginal) => {\r\n                                    activeQuestionChange(rowInfo, e);\r\n\r\n                                    if (handleOriginal) {\r\n                                        handleOriginal();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }}\r\n                        />\r\n                    )\r\n                }}\r\n                />\r\n            </div></div>\r\n            </div>\r\n    }\r\n}\r\n\r\nlet renderPassageCell = function(props) {\r\n    let searchWords = [];\r\n    let categoryPerSearchWordIndex = undefined;\r\n    let spans = [];\r\n    let categoryPerSpanIndex = undefined;\r\n    let highlightClassNamePerCategory = undefined;\r\n    const activeQuestionId = this.state.activeQuestions[props.original.passage_id];\r\n    if (activeQuestionId) {\r\n        const qa_pair = props.original.qa_pairs\r\n                        .find(qa_pair => qa_pair.query_id === activeQuestionId);\r\n        if (qa_pair) {\r\n            searchWords = [...qa_pair.evaluationAnswers[qa_pair.maximizingGroundTruthIndex]];\r\n\r\n            categoryPerSearchWordIndex = searchWords.map(() => 'gold_0')\r\n            highlightClassNamePerCategory = {'gold_0': 'highlight-gold'}\r\n\r\n            if (qa_pair.prediction) {\r\n                if (!['arithmetic', 'counting'].includes(qa_pair.predictionType.key)) {\r\n                    const predictionSpans = qa_pair.predictionSpans;\r\n                    if (predictionSpans && false) { // TODO: Fix when the prediction file is corrected\r\n                        spans = predictionSpans;\r\n                    } else {\r\n                        const evaluationPrediction = qa_pair.evaluationPrediction;\r\n                        if (evaluationPrediction) {\r\n                            searchWords.push(...evaluationPrediction);\r\n                            categoryPerSearchWordIndex.push(...evaluationPrediction.map(x => 'prediction_1'));\r\n                        }\r\n                    }\r\n\r\n                    highlightClassNamePerCategory['prediction_1'] = 'highlight-predicted';\r\n                    highlightClassNamePerCategory['gold_0-prediction_1'] = 'highlight-correct'\r\n                } else {\r\n                    searchWords = [];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return <WrapDiv><Highlighter \r\n            searchWords={searchWords} categoryPerSearchWordIndex={categoryPerSearchWordIndex}\r\n            //spans={spans} categoryPerSpanIndex={categoryPerSpanIndex}\r\n            highlightClassNamePerCategory={highlightClassNamePerCategory}\r\n            textToHighlight={props.value} /></WrapDiv>\r\n}\r\nlet renderHighlightableQuestionCell = function(props) {\r\n    let searchWords = [];\r\n    const highlightClassName = props.column.id === 'displayPrediction' ? 'highlight-predicted' : 'highlight-gold';\r\n    const activeQuestionId = this.state.activeQuestions[props.original.passage_id];\r\n    if (activeQuestionId === props.original.query_id) {        \r\n        if (props.column.id === 'displayPrediction') {\r\n            searchWords = props.original.evaluationPrediction;\r\n        } else {\r\n            searchWords = props.original.evaluationAnswers[props.original.maximizingGroundTruthIndex];\r\n        }\r\n    }\r\n    return <WrapDiv><Highlighter highlightClassName={highlightClassName} searchWords={searchWords} textToHighlight={props.value || ''} /></WrapDiv>\r\n}\r\nlet renderAnswersCell = function(props) {\r\n    let searchWords = [];\r\n    const highlightClassName = props.column.id === 'displayPrediction' ? 'highlight-predicted' : 'highlight-gold';\r\n    const activeQuestionId = this.state.activeQuestions[props.original.passage_id];\r\n    if (activeQuestionId === props.original.query_id) {        \r\n        searchWords = props.original.evaluationAnswers[props.original.maximizingGroundTruthIndex];\r\n    }\r\n    return <Table style={{height: '100%'}} striped>\r\n        <tbody>\r\n            {props.value.map((answer, index) => {\r\n                return <tr key={index}>\r\n                    <td style={{whiteSpace: 'pre-wrap', padding: 0, 'borderTop': 0}}>\r\n                        <WrapDiv><Highlighter highlightClassName={highlightClassName} \r\n                            searchWords={props.original.maximizingGroundTruthIndex === index ? searchWords : []} \r\n                            textToHighlight={answer} /></WrapDiv>\r\n                    </td>\r\n                </tr>\r\n            })}\r\n        </tbody>\r\n    </Table>\r\n}\r\nlet renderAnswersTypesCell = function(props) {\r\n    return <Table style={{height: '100%'}} striped>\r\n        <tbody>\r\n            {props.value.map((answerType, index) => \r\n                <tr key={index}>\r\n                    <td style={{whiteSpace: 'pre-wrap', padding: 0, 'borderTop': 0}}>\r\n                        {answerType.value}\r\n                    </td>\r\n                </tr>\r\n            )}\r\n        </tbody>\r\n    </Table>\r\n}\r\n\r\nlet activeQuestionChange = function(rowInfo, e) {\r\n    const passage_id = rowInfo.original.passage_id\r\n    const query_id = rowInfo.original.query_id\r\n\r\n    if (this.state.activeQuestions[passage_id] === query_id) {\r\n        const activeQuestions = {...this.state.activeQuestions};\r\n        delete activeQuestions[passage_id]\r\n        this.setState({\r\n            activeQuestions\r\n        });\r\n    } else {\r\n        this.setState({\r\n            activeQuestions: {\r\n                //...this.state.activeQuestions, // controls whether to allow selection of multiple questions accross different paragrahps\r\n                [passage_id]: query_id\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction forceDecimalPlaces(num, places) {\r\n    return num !== undefined ? parseFloat(Math.round(num * Math.pow(10, places)) / Math.pow(10, places)).toFixed(places) : undefined;\r\n}\r\n\r\nexport default ExplorerTable;\r\n","import React from 'react';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n} from 'reactstrap';\r\nimport { shouldUpdate } from './../Utils';\r\nimport ExplorerSettings from './explorer-settings/ExplorerSettings';\r\nimport ExplorerTable from './explorer-table/ExplorerTable';\r\n\r\nconst props_updateSignals = []\r\nconst state_updateSignals = ['dataset', 'predictions', 'filteredAnswerTypes', 'predictionTypes', 'filteredPredictionTypes', 'searchProps', 'navbarSticky', 'isOpen']\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.settingsChange = this.settingsChange.bind(this);\r\n        this.getClearSelectedAnswersFunc = this.getClearSelectedAnswersFunc.bind(this);\r\n        this.getExpandAllFunc = this.getExpandAllFunc.bind(this);\r\n        this.getCollapseAllFunc = this.getCollapseAllFunc.bind(this);\r\n        this.predictionTypesChanged = this.predictionTypesChanged.bind(this);\r\n        this.toggleMenu = this.toggleMenu.bind(this);\r\n        this.state = {\r\n            useLocalDataset: true,\r\n            allowSourceSelection: false,\r\n            filteredAnswerTypes: ['multi_span', 'single_span', 'number', 'date'],\r\n            predictionTypes: [],\r\n            filteredPredictionTypes: [],\r\n            instantSearch: true,\r\n            searchProps: {\r\n                searchText: '',\r\n                filterQuestions: false\r\n            },\r\n            navbarSticky: 'top', // can be 'top' or undefined\r\n            isOpen: true,\r\n            showNavbarImage: false,\r\n            // ^ startup settings available for configuration\r\n\r\n            dataset: undefined,\r\n            predictions: undefined,\r\n            clearSelectedAnswersFunc: undefined,\r\n            expandAllFunc: undefined,\r\n            collapseAll: undefined\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        const update = shouldUpdate(props_updateSignals, state_updateSignals, \r\n            this.props, this.state, \r\n            nextProps, nextState, \r\n            true, this.constructor.name);\r\n        return update;\r\n    }\r\n\r\n    settingsChange(settings) {\r\n        this.setState({\r\n            filteredAnswerTypes: settings.filteredAnswerTypes,\r\n            filteredPredictionTypes: settings.filteredPredictionTypes,\r\n            searchProps: settings.searchProps,\r\n            dataset: settings.dataset,\r\n            predictions: settings.predictions\r\n        });\r\n    }\r\n    \r\n    getClearSelectedAnswersFunc(func) {\r\n        this.setState({ clearSelectedAnswersFunc: func });\r\n    }\r\n\r\n    getExpandAllFunc(func) {\r\n        this.setState({ expandAllFunc: func });\r\n    }\r\n\r\n    getCollapseAllFunc(func) {\r\n        this.setState({ collapseAllFunc: func });\r\n    }\r\n\r\n    predictionTypesChanged(predictionTypes) {\r\n        this.setState({ predictionTypes });\r\n    }\r\n\r\n    toggleMenu() {\r\n        this.setState({\r\n          isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n                    <Navbar color=\"light\" light sticky={this.state.navbarSticky} \r\n                            style={{borderBottom: '1px solid rgba(0,0,0,0.15)'}}>\r\n                        <div style={{width: '100%'}}>\r\n                            {this.state.showNavbarImage ? \r\n                            <div className='navbar-brand'>\r\n                                {<a target='_blank' rel='noopener noreferrer' href='https://allennlp.org/drop'>\r\n                                    <img style={{paddingRight: '15px', marginBottom: '3px'}} src='https://allennlp.org/assets/allennlp-logo-color.png' height='14' alt='' />\r\n                                </a>}\r\n                                <button className='fakeLink' onClick={() => {this.setState({ navbarSticky: this.state.navbarSticky === 'top' ? undefined : 'top' })}}>DROP Explorer</button>\r\n                            </div> : \r\n                            <NavbarBrand onClick={() => {this.setState({ navbarSticky: this.state.navbarSticky === 'top' ? undefined : 'top' })}}>\r\n                                DROP Explorer\r\n                            </NavbarBrand>}\r\n                            <NavbarToggler style={{float: 'right', marginTop: '0.25rem'}} onClick={this.toggleMenu} />\r\n                        </div>\r\n                        <Collapse isOpen={this.state.isOpen} navbar>\r\n                            <ExplorerSettings onChange={this.settingsChange}\r\n                                useLocalDataset={this.state.useLocalDataset}\r\n                                allowSourceSelection={this.state.allowSourceSelection}\r\n                                expandAllFunc={this.state.expandAllFunc}\r\n                                collapseAllFunc={this.state.collapseAllFunc}\r\n                                filteredAnswerTypes={this.state.filteredAnswerTypes}\r\n                                filteredPredictionTypes={this.state.filteredPredictionTypes}\r\n                                predictionTypes={this.state.predictionTypes}\r\n                                instantSearch={this.state.instantSearch}\r\n                                searchProps={this.state.searchProps}\r\n                                clearSelectedAnswersFunc={this.state.clearSelectedAnswersFunc} />\r\n                        </Collapse>\r\n                    </Navbar>\r\n                    <ExplorerTable \r\n                        dataset={this.state.dataset} \r\n                        predictions={this.state.predictions}\r\n                        filteredAnswerTypes={this.state.filteredAnswerTypes}\r\n                        filteredPredictionTypes={this.state.filteredPredictionTypes}\r\n                        searchProps={this.state.searchProps}\r\n                        sendClearSelectedAnswersFunc={this.getClearSelectedAnswersFunc}\r\n                        sendExpandAllFunc={this.getExpandAllFunc}\r\n                        sendCollapseAllFunc={this.getCollapseAllFunc}\r\n                        onPredictionsTypeChanged={this.predictionTypesChanged}\r\n                    />\r\n                </div>\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './scss/custom.scss';\r\nimport ModelComponent from './model/ModelComponent';\r\nimport App from './components/app/App';\r\n\r\n// Copied from http:jquery-howto.blogspot.com/2009/09/get-url-parameters-values-with-jquery.html\r\nfunction getUrlVars() {\r\n    var vars = [], hash;\r\n    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');\r\n    for (var i = 0; i < hashes.length; i++) {\r\n      hash = hashes[i].split('=');\r\n      vars.push(hash[0]);\r\n      vars[hash[0]] = hash[1];\r\n    }\r\n    return vars;\r\n}\r\n  \r\nvar urlParams = getUrlVars();\r\n  \r\nswitch (urlParams[\"startPage\"]) {\r\n    case \"model\":\r\n        ReactDOM.render(<ModelComponent />, document.getElementById('root'));\r\n        break;\r\n\r\n    case undefined:\r\n    default:\r\n        ReactDOM.render(<App />, document.getElementById('root'));\r\n        break;\r\n}\r\n"],"sourceRoot":""}