{"version":3,"sources":["components/Utils.js","components/file_input_button/FileInputButton.jsx","components/app/explorer-settings/dataset-loader/DatasetLocalSelector.jsx","api-config.js","components/app/explorer-settings/dataset-loader/DatasetListSelector.jsx","components/checkbox/Checkbox.jsx","components/app/explorer-settings/dataset-loader/DatasetLoader.jsx","components/app/explorer-settings/PredictionsLoader.jsx","components/app/AnswersUtils.js","components/app/explorer-settings/SearchFilter.jsx","components/checkbox_list/CheckboxList.jsx","components/range_input/RangeInput.jsx","components/app/explorer-settings/ExplorerSettings.jsx","components/app/explorer-table/WrapDiv.jsx","components/app/explorer-table/DataUtils.js","components/app/explorer-table/ExplorerTable.jsx","components/app/App.jsx","index.js"],"names":["mapToArray","json","key_name","Object","keys","map","key","intersect","dataArr","accessor","transformToSingle","pointers","Array","apply","length","intersection","maxIndex","agreements","i","data","currentIndex","item","reduce","sameItems","push","isChanged","changeSignals","obj","otherObj","debug","sourceName","changes","changeSignal","changed","console","log","concat","join","shouldUpdate","props_updateSignals","state_updateSignals","props","state","nextProps","nextState","componentName","propsUpdated","stateUpdated","displayIndexesToViewIndex","displayIndexes","page","pageSize","returnObject","arguments","undefined","acuumulator","displayIndex","viewIndex","Math","floor","displayIndexToViewIndex","viewIndexToDisplayIndex","FileInputButton","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fileInputRef","React","createRef","simulateClick","bind","assertThisInitialized","change","file","prevProps","prevState","onChange","current","click","files","selectedFile","setState","_this2","react_default","a","createElement","ref","style","display","type","id","accept","e","target","Button","color","size","onClick","text","name","PureComponent","DatasetLocalSelector","dataset","reader","FileReader","onloadend","array","JSON","parse","result","readAsText","file_input_button_FileInputButton","width","origin","window","location","API_ROOT","includes","replace","DatasetListSelector","toggle","dropdownOpen","datasets_names","selected","mounted","getDatasetList","getDataset","currentTarget","getAttribute","fetch","method","headers","Accept","Content-Type","then","response","catch","error","dataset_name","_this3","encodeURIComponent","_this4","Dropdown","isOpen","DropdownToggle","caret","DropdownMenu","DropdownItem","dataset-name","Checkbox","checked","FormGroup","check","_objectSpread","inline","Label","Input","fontSize","marginLeft","marginTop","DatasetSelector","local","dataset_loader_DatasetLocalSelector","dataset_loader_DatasetListSelector","DatasetLoader","useLocalDatasetChange","datasetChange","useLocalDataset","onDatasetChange","newChecked","ListGroup","allowSourceSelection","ListGroupItem","checkbox_Checkbox","PredictionsLoader","predictions","split","forEach","line","noAnswerType","value","noPredictionType","answerTypesConst","getAnswerStringForDisplayAndType","answer","displayAnswer","answerType","number","number_value","Number","isNaN","toString","spans","toConsumableArray","sort","date","some","prop","stringify","getAnswerForEvaluation","answerForEvaluation","String","prepareText","toLowerCase","SearchFilter","searchTextChange","filterQuestionsChange","submit","SearchFilter_objectSpread","searchProps","draftSearchText","draftFilterQuestions","filterQuestions","searchText","event","newState","instantSearch","className","CheckboxList","changedKey","changedKeyIndex","indexOf","splice","options","option","option-key","RangeInput","lowChange","highChange","low","initial","high","metric","newLow","parseFloat","newHigh","InputGroup","tag","step","padding","textAlign","InputGroupAddon","addonType","InputGroupText","alignItems","margin","ExplorerSettings","predictionsChange","filteredAnswerTypesChange","answerTypeFilterFirstOnlyChange","answerTypeFilterStrictChange","truncatedFilterChange","untruncatedFilterChange","filteredPredictionTypesChange","searchFilterChange","rangeFilterChange","filteredAnswerTypes","answerTypeFilterFirstOnly","answerTypeFilterStrict","truncatedFilter","untruncatedFilter","filteredPredictionTypes","F1Range","EMRange","constructor","predictionTypes","predictionType","range","defineProperty","Container","fluid","CardGroup","Card","CardHeader","CardBody","dataset_loader_DatasetLoader","height","overflow","expandAllFunc","collapseAllFunc","clearSelectedAnswersFunc","checkbox_list_CheckboxList","explorer_settings_SearchFilter","explorer_settings_PredictionsLoader","range_input_RangeInput","Component","WrapDiv","styled","div","_templateObject","process_row","accumulator","row","index","passage_id","passage_displayIndex","reduced","qa_pairs","process_qa_pair","hasValidatedAnswers","query_id_to_displayIndex","reduced_row","DataUtils_objectSpread","passage","trim","passage_index","passage_id_to_displayIndex","passage_id_to_queries_displayIndexes","qa_pair","query_index","query_displayIndex","validated_answers","_getAnswerStringForDi","firstDisplayAnswer","firstAnswerType","displayAnswers","answersTypes","evaluationAnswers","validatedAnswer","evaluationAnswer","addedEvaluationAnswer","_getAnswerStringForDi2","question","maximizingGroundTruthIndex","query_id","filterDataHelper","internals","filteredDataPerFilter","Boolean","search","searchReudcer_rows","filteredData","hasValidPredictions","answerTypes","typeFilterReudcer_rows","filteredTypes","fields","missingValue","firstOnly","strict","rangeFilterReudcer_rows","field","truncated","showTruncated","showUntruncated","truncatedFilterReudcer_rows","filteredDataArr","values","filter","filtersCount","every","intersectRows","intersectFilteredData","metrics","questionsCount","predictedCount","f1","em","row_predicted","row_f1","row_em","j","prediction","sameRows","filtered_qa_pairs","sameQuestions","assign","passageTextSearchValid","hasTextSearchValidQuestions","isQuestionTextSearchValid","hasQuestions","evaluationPrediction","x","typeFilterReudcer_qa_pairs","foundTypes","Set","typeValid","isArray","arr","add","has","rangeFilterReudcer_qa_pairs","rangeValid","truncatedFilterReudcer_qa_pairs","isValid","max_passage_length","initialInternals","initialState","passagesPageSize","questionsPageSize","expanded_passage_ids","activeQuestions","questionResized","questionSorted","filterProps","ExplorerTable","renderPassageOrQuestionCell","renderPredictionCell","renderAnswersCell","activeQuestionChange","clearSelectedAnswers","expandAll","collapseAll","expandedChange","getExpanded","questionResizedChange","processData","filterData","getSortedData","pageChanged","passagesPageSizeChanged","questionsPageSizeChanged","passageSortedChange","questionSortedChange","setInternals","cloneDeep","tableRef","newInternals","sendClearSelectedAnswersFunc","sendExpandAllFunc","sendCollapseAllFunc","filteredAnswerTypesChanged","filteredPredictionTypesChanged","searchPropsChanged","F1RangeChanged","EMRangeChanged","truncatedFilterChanged","refilteringRequired","onPredictionsTypeChanged","forceUpdate","newSorted","column","additive","newExpanded","matchingPosition","defaultExpanded","sortedData","set","otherSet","areSetsEqual","viewIndexes","viewIndexToDisplayIndexes","newResized","_processDataHelper","keyToPredictionType","find","q","predicted_ability","predictionValue","displayPrediction","maximizingGroundTruth","maximizing_ground_truth","loss","numbers","signs","sign","numbersStrs","toLocaleString","predictionNumberStr","numberStr","findIndex","predictionSpans","processDataHelper","_filterDataHelper","getResolvedState","passage_columns","Header","Cell","resizable","show","fixDecimalPlaces","qa_columns","renderAnswersTypesCell","es","columns","minRows","showPaginationTop","showPaginationBottom","pageSizeOptions","onPageChange","onPageSizeChange","collapseOnSortingChange","collapseOnPageChange","collapseOnDataChange","onSortedChange","expanded","onExpandedChange","SubComponent","original","maxHeight","sorted","resized","onResizedChange","showPagination","getTrProps","rowInfo","instance","handleOriginal","searchWords","categoryPerSearchWordIndex","categoryPerSpanIndex","highlightClassNamePerCategory","activeQuestionId","gold_1","context","spansAcc","span","_searchWords","_categoryPerSearchWor","explorer_table_WrapDiv","main_default","autoEscape","textToHighlight","paddingMultiplier","highlightClassName","Table","striped","whiteSpace","borderTop","ExplorerTable_objectSpread","num","places","convertToPercentage","round","pow","toFixed","App","settingsChange","getClearSelectedAnswersFunc","getExpandAllFunc","getCollapseAllFunc","predictionTypesChanged","toggleMenu","navbarSticky","showNavbarImage","settings","func","Navbar","light","sticky","borderBottom","rel","href","paddingRight","marginBottom","src","alt","NavbarBrand","NavbarToggler","float","Collapse","navbar","explorer_settings_ExplorerSettings","explorer_table_ExplorerTable","ReactDOM","render","app_App","document","getElementById"],"mappings":"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","file":"static/js/main.500c6e7e.chunk.js","sourcesContent":["export function mapToArray(json, key_name) {\r\n    return Object.keys(json).map(function(key) {\r\n        json[key][key_name] = key;\r\n        return json[key];\r\n    });\r\n}\r\n\r\nexport function intersect(dataArr, accessor, transformToSingle) {\r\n    const pointers = Array.apply(null, {length: dataArr.length}).map(() => 0);\r\n\r\n    const intersection = [];\r\n    let maxIndex = 0;\r\n    let agreements = 0;\r\n    while (true) {\r\n        while (agreements < dataArr.length) {\r\n            for (let i=0; i < dataArr.length; i++) {\r\n                const data = dataArr[i];\r\n        \r\n                let currentIndex = accessor(data[pointers[i]]);\r\n                while (currentIndex < maxIndex) {\r\n                    pointers[i]++;\r\n                    if (pointers[i] === data.length) {\r\n                        return intersection;\r\n                    }\r\n    \r\n                    currentIndex = accessor(data[pointers[i]]);\r\n                }\r\n                if (currentIndex > maxIndex) {\r\n                    maxIndex = currentIndex;\r\n                    agreements = 1;\r\n                } else {\r\n                    agreements++;\r\n                }\r\n            }\r\n        }\r\n\r\n        let sameItems = dataArr.reduce((sameItems, data, i) => {\r\n            sameItems.push(data[pointers[i]])\r\n            return sameItems;\r\n        }, [])\r\n\r\n        let item = transformToSingle(sameItems);\r\n        if (item) {\r\n            intersection.push(item);\r\n        }\r\n        maxIndex += 1;\r\n        agreements = 0;\r\n    }\r\n}\r\n\r\nexport function areSetsEqual(set, otherSet) {\r\n    if (set.size !== otherSet.size) return false;\r\n    for (let item in set) {\r\n        if (!otherSet.has(item)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function isChanged(changeSignals, obj, otherObj, debug, sourceName) {\r\n    const changes = []\r\n    for (let i = 0; i < changeSignals.length; i++) {\r\n        const changeSignal = changeSignals[i];\r\n        if (obj[changeSignal] !== otherObj[changeSignal]) {\r\n            if (debug) {\r\n                changes.push(changeSignal);\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    let changed = changes.length > 0;\r\n    if (debug) {\r\n        if (changed) {\r\n            console.log(`${sourceName} Caused update: ${changes.join(', ')}`);\r\n        }\r\n    }\r\n    return changed;\r\n}\r\n\r\nexport function shouldUpdate(props_updateSignals, state_updateSignals, props, state, nextProps, nextState, debug, componentName) {\r\n    \r\n    const propsUpdated = isChanged(props_updateSignals, props, nextProps, debug, `[${componentName}][props]`)\r\n    const stateUpdated = isChanged(state_updateSignals, state, nextState, debug, `[${componentName}][state]`)\r\n\r\n    return propsUpdated || stateUpdated;\r\n}\r\n\r\nexport function displayIndexToViewIndex(displayIndex, page, pageSize) {\r\n    if (Math.floor(displayIndex / pageSize) === page) {\r\n        const viewIndex = displayIndex % pageSize;\r\n        return viewIndex;\r\n    }\r\n}\r\n\r\nexport function displayIndexesToViewIndex(displayIndexes, page, pageSize, returnObject=false) {\r\n    return displayIndexes.reduce((acuumulator, displayIndex) => {\r\n        const viewIndex = displayIndexToViewIndex(displayIndex, page, pageSize)\r\n        if (viewIndex !== undefined) {\r\n            if (returnObject) {\r\n                acuumulator[viewIndex] = true;\r\n            } else {\r\n                acuumulator.push(viewIndex)\r\n            }\r\n        }\r\n        return acuumulator;\r\n    }, returnObject ? {} : []);\r\n}\r\n\r\nexport function viewIndexToDisplayIndex(viewIndex, page, pageSize) {\r\n    const displayIndex = (pageSize * page) + viewIndex;\r\n    return displayIndex;\r\n}\r\n\r\nexport function viewIndexToDisplayIndexes(viewIndexes, page, pageSize, returnObject=false) {\r\n    return viewIndexes.reduce((acuumulator, viewIndex) => {\r\n        const displayIndex = viewIndexToDisplayIndex(viewIndex, page, pageSize)\r\n        if (returnObject) {\r\n            acuumulator[displayIndex] = true;\r\n        } else {\r\n            acuumulator.push(displayIndex)\r\n        }\r\n        return acuumulator;\r\n    }, returnObject ? {} : []);\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Button\r\n} from 'reactstrap';\r\n\r\nclass FileInputButton extends React.PureComponent {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.fileInputRef = React.createRef();\r\n\t\tthis.simulateClick = this.simulateClick.bind(this);\r\n\t\tthis.change = this.change.bind(this);\r\n\t\tthis.state = {\r\n\t\t\tfile: undefined\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tif (prevState.file !== this.state.file) {\r\n\t\t\tthis.props.onChange(this.state.file);\r\n\t\t}\r\n\t}\r\n\r\n\tsimulateClick() {\r\n\t\tthis.fileInputRef.current.click();\r\n\t}\r\n\r\n    change(files) {\r\n\t\tlet selectedFile;\r\n        if (files.length > 0) {\r\n            const file = files[0]\r\n            if (file) {\r\n\t\t\t\tselectedFile = file;\r\n            }\r\n\t\t}\r\n\r\n\t\tthis.setState({ \r\n\t\t\tfile: selectedFile\r\n\t\t});\r\n    }\r\n\r\n  \trender() {      \r\n\t\treturn <div>\r\n\t\t\t<input ref={this.fileInputRef} style={{'display': 'none'}} type='file' id='file' accept={this.props.accept} onChange={ (e) => this.change(e.target.files) } />\r\n\t\t\t<Button style={this.props.style} color={this.props.color} size={this.props.size} onClick={this.simulateClick}>\r\n\t\t\t\t{this.props.text}\r\n\t\t\t</Button>\r\n\t\t\t{this.state.file ? this.state.file.name : ''}\r\n\t\t</div>\r\n  }\r\n}\r\n\r\nexport default FileInputButton;\r\n","import React from 'react';\r\nimport { mapToArray } from '../../../Utils'\r\nimport FileInputButton from '../../../file_input_button/FileInputButton';\r\n\r\nclass DatasetLocalSelector extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.change = this.change.bind(this);\r\n        this.state = {\r\n            dataset: undefined\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.dataset !== this.state.dataset) {\r\n            this.props.onChange(this.state.dataset);\r\n        }\r\n    }\r\n\r\n    change(file) {\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onloadend = (e) => {\r\n                const array = mapToArray(JSON.parse(e.target.result), 'passage_id');\r\n                this.setState({ \r\n                    dataset: array \r\n                });\r\n            };\r\n            reader.readAsText(file);\r\n        } else {\r\n            this.setState({ \r\n                dataset: undefined \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <FileInputButton accept='.json' text='Choose File' size='md' color='primary' style={{width: '100%'}}\r\n                onChange={this.change}/>\r\n    }\r\n}\r\n\r\nexport default DatasetLocalSelector;\r\n","/**\r\n * The backend always runs on port 8000. In production we also\r\n * serve the frontend from there. However, for development\r\n * we want to `npm run serve` the unminified js on port 3000.\r\n * This allows us to get the correct API root either way.\r\n */\r\n\r\nlet apiRoot;\r\n\r\nconst origin = window && window.location && window.location.origin;\r\n\r\nif (origin.includes(':3000')) {\r\n    apiRoot = origin.replace(\":3000\", \":8000\");\r\n} else {\r\n    apiRoot = origin;\r\n}\r\n\r\nexport const API_ROOT = apiRoot;\r\n","import React from 'react';\r\nimport { API_ROOT } from '../../../../api-config';\r\nimport { mapToArray } from '../../../Utils';\r\nimport {\r\n    Dropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem\r\n} from 'reactstrap';\r\n\r\nclass DatasetListSelector extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggle = this.toggle.bind(this);\r\n        this.change = this.change.bind(this);\r\n        this.state = {\r\n            dropdownOpen: false,\r\n            datasets_names: [],\r\n            selected: undefined\r\n        };\r\n    }\r\n\r\n    toggle() {\r\n        this.setState(prevState => ({\r\n          dropdownOpen: !prevState.dropdownOpen\r\n        }));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.mounted = true;\r\n        this.getDatasetList();\r\n    }\r\n    \r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.selected !== this.state.selected) {\r\n            this.props.onChange(undefined);\r\n            this.getDataset(this.state.selected);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.mounted = false;\r\n    }\r\n\r\n    change(e) {\r\n        this.setState({selected: e.currentTarget.getAttribute(\"dataset-name\")});\r\n    }\r\n\r\n    getDatasetList() {\r\n        fetch(`${API_ROOT}/dataset-list`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            } \r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((json) => {\r\n            if (this.mounted) {\r\n                this.setState({datasets_names: json, selected: json.length > 0 ? json[0] : undefined})\r\n            }\r\n        }).catch((error) => {\r\n            console.error(error);\r\n        });\r\n    }\r\n\r\n    getDataset(dataset_name) {\r\n        if (dataset_name) {\r\n\r\n            fetch(`${API_ROOT}/dataset?name=${encodeURIComponent(dataset_name)}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                } \r\n            }).then((response) => {\r\n                return response.json();\r\n            }).then((json) => {\r\n                const array = mapToArray(json, 'passage_id')\r\n                this.props.onChange(array);\r\n            }).catch((error) => {\r\n                console.error(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const datasets_names = this.state.datasets_names;\r\n\r\n        return (\r\n          <Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggle}>\r\n            <DropdownToggle color=\"primary\" caret style={{width: '100%'}}>\r\n                {this.state.selected ? this.state.selected : \"Select...\"}\r\n            </DropdownToggle>\r\n            <DropdownMenu>\r\n                {datasets_names.map(dataset_name => <DropdownItem onClick={this.change} key={dataset_name} dataset-name={dataset_name}>{dataset_name}</DropdownItem>)}\r\n            </DropdownMenu>\r\n          </Dropdown>\r\n        );\r\n      }\r\n}\r\n\r\nexport default DatasetListSelector;\r\n","import React from 'react';\r\nimport {\r\n    Input,\r\n    FormGroup,\r\n    Label\r\n} from 'reactstrap';\r\n\r\nclass Checkbox extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.change = this.change.bind(this);\r\n        this.state = { \r\n            checked: this.props.checked\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        this.props.onChange(this.state.checked)\r\n    }\r\n\r\n    change() {\r\n        this.setState({ checked: !this.state.checked });\r\n    }\r\n\r\n    render() {\r\n        return <FormGroup check style={{...(this.props.inline ? {display: 'inline'} : {}), ...this.props.style}}>\r\n            <Label check>\r\n                <Input type=\"checkbox\" \r\n                style={(this.props.style && \r\n                        this.props.style.fontSize && \r\n                        this.props.style.fontSize === 'smaller') ? {marginLeft: '-1rem', marginTop: '0.15rem'}: {}}\r\n                onChange={this.change}\r\n                checked={this.state.checked || false} \r\n                />{this.props.text}\r\n            </Label>\r\n        </FormGroup>;\r\n    }\r\n}\r\n \r\nexport default Checkbox;","import React from 'react';\r\nimport DatasetLocalSelector from './DatasetLocalSelector';\r\nimport DatasetListSelector from './DatasetListSelector';\r\nimport {\r\n    ListGroup,\r\n    ListGroupItem\r\n} from 'reactstrap';\r\nimport Checkbox from '../../../checkbox/Checkbox';\r\n\r\nclass DatasetLoader extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.useLocalDatasetChange = this.useLocalDatasetChange.bind(this);\r\n        this.datasetChange = this.datasetChange.bind(this);\r\n        this.state = {\r\n            dataset: undefined,\r\n            useLocalDataset: this.props.useLocalDataset\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.dataset !== this.state.dataset) {\r\n            this.props.onDatasetChange(this.state.dataset);\r\n        }\r\n    }\r\n\r\n    useLocalDatasetChange(newChecked) {\r\n        this.setState({ \r\n            useLocalDataset: newChecked,\r\n            dataset: undefined\r\n        });\r\n    }\r\n\r\n    datasetChange(dataset) {\r\n        this.setState({ dataset: dataset })\r\n    }\r\n\r\n    render() {\r\n        return <ListGroup>\r\n                {this.props.allowSourceSelection ? <ListGroupItem>\r\n                    <Checkbox text={'Use Local Dataset'} \r\n                            checked={this.state.useLocalDataset} \r\n                            onChange={this.useLocalDatasetChange}></Checkbox>\r\n                </ListGroupItem> : null}\r\n                <ListGroupItem>\r\n                    <DatasetSelector onChange={this.datasetChange} local={this.state.useLocalDataset}/>\r\n                </ListGroupItem>\r\n            </ListGroup>\r\n    }\r\n}\r\n\r\nfunction DatasetSelector(props) {\r\n    if (props.local) {\r\n        return <DatasetLocalSelector onChange={props.onChange} />\r\n    }\r\n    return <DatasetListSelector onChange={props.onChange} />\r\n}\r\n\r\nexport default DatasetLoader;\r\n","import React from 'react';\r\nimport FileInputButton from '../../file_input_button/FileInputButton';\r\n\r\nclass PredictionsLoader extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.change = this.change.bind(this);\r\n        this.state = {\r\n            predictions: undefined\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.predictions !== this.state.predictions) {\r\n            this.props.onChange(this.state.predictions);\r\n        }\r\n    }\r\n\r\n    change(file) {\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onloadend = (e) => {\r\n                const predictions = [];\r\n                e.target.result.split('\\n').forEach(line => {\r\n                    if (line) {\r\n                        predictions.push(JSON.parse(line));\r\n                    }\r\n                });\r\n                this.setState({ \r\n                    predictions: predictions \r\n                });\r\n            };\r\n            reader.readAsText(file);\r\n        } else {\r\n            this.setState({ \r\n                predictions: undefined \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <FileInputButton accept='.json, .jsonl' text='Choose File' size='md' color='primary' style={{width: '100%'}}\r\n        onChange={this.change}/>\r\n    }\r\n}\r\n\r\nexport default PredictionsLoader;\r\n","\r\nexport const noAnswerType = {'key': 'none', 'value': 'None'};\r\nexport const noPredictionType = {'key': 'none', 'value': 'None'};\r\nexport const answerTypesConst = [\r\n    {'key': 'multi_span', 'value': 'Multi Span', 'accessor': 'spans'},\r\n    {'key': 'single_span', 'value': 'Single Span', 'accessor': 'spans'},\r\n    {'key': 'number', 'value': 'Number', 'accessor': 'number'},\r\n    {'key': 'date', 'value': 'Date', 'accessor': 'date'}\r\n];\r\n\r\nexport function getAnswerStringForDisplayAndType(answer) {\r\n    let displayAnswer = '';\r\n    let answerType = noAnswerType;\r\n    if ('number' in answer && (answer['number'] === 0 || answer['number'])) {\r\n        const number = answer['number'];\r\n        const number_value = Number(number);\r\n        if (!isNaN(number_value)) {\r\n            displayAnswer = number_value.toString();\r\n        } else {\r\n            displayAnswer = number;\r\n        }\r\n        answerType = answerTypesConst[2]\r\n    } else if ('spans' in answer && answer['spans'] && answer['spans'].length > 0) {\r\n        const spans = answer['spans'];\r\n        if (spans.length === 1) {\r\n            displayAnswer = spans[0];\r\n            answerType = answerTypesConst[1];\r\n        } else {\r\n            displayAnswer = [...spans].sort().join(' ┆ ');           \r\n            answerType = answerTypesConst[0];\r\n        }\r\n    } else if ('date' in answer && answer['date']) {\r\n        const date = answer['date']\r\n        if (['day', 'month', 'year'].some(prop => date[prop] === 0 || date[prop])) {\r\n            displayAnswer = JSON.stringify(date, null, 2);\r\n            answerType = answerTypesConst[3]\r\n        }\r\n    }\r\n    return {'displayAnswer': displayAnswer, answerType}\r\n}\r\n\r\nexport function getAnswerForEvaluation(answer) {\r\n    // based on answer_json_to_strings from drop_eval.py of allennlp\r\n    let answerForEvaluation = [];\r\n    if ('number' in answer && (answer['number'] === 0 || answer['number'])) {\r\n        const number = answer['number'];\r\n        const number_value = Number(number);\r\n        if (!isNaN(number_value)) {\r\n            answerForEvaluation = [number_value.toString()];\r\n        } else {\r\n            answerForEvaluation = [String(number)];\r\n        }\r\n    } else if ('spans' in answer && answer['spans'] && answer['spans'].length > 0) {\r\n        answerForEvaluation = answer['spans']\r\n    } else if ('date' in answer && answer['date']) {\r\n        const date = answer['date']\r\n        answerForEvaluation = [];\r\n        ['day', 'month', 'year'].forEach(prop => {\r\n            if (date[prop] === 0 || date[prop]) {\r\n                /* \r\n                better than creating a single string, as it\r\n                allows us to search the passage per date member\r\n                */\r\n                answerForEvaluation.push(String(date[prop]))\r\n            }\r\n        });\r\n    }\r\n    return answerForEvaluation.sort();\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Input,\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Button\r\n} from 'reactstrap';\r\nimport Checkbox from '../../checkbox/Checkbox';\r\n\r\nclass SearchFilter extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchTextChange = this.searchTextChange.bind(this);\r\n        this.filterQuestionsChange = this.filterQuestionsChange.bind(this);\r\n        this.submit = this.submit.bind(this);\r\n        this.state = { \r\n            ...this.props.searchProps,\r\n            draftSearchText: '',\r\n            draftFilterQuestions: this.props.searchProps.filterQuestions\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.searchText !== this.state.searchText || \r\n            prevState.filterQuestions !== this.state.filterQuestions) {\r\n            this.props.onChange({\r\n                searchText: this.state.searchText,\r\n                filterQuestions: this.state.filterQuestions\r\n            });\r\n        }\r\n    }\r\n\r\n    searchTextChange(event) {\r\n        const newState = { draftSearchText: event.target.value }\r\n        if (this.props.instantSearch) {\r\n            newState.searchText = prepareText(newState.draftSearchText);\r\n        }\r\n        this.setState(newState);\r\n    }\r\n\r\n    filterQuestionsChange(newChecked) {\r\n        const filterQuestions = newChecked;\r\n        const newState = { draftFilterQuestions: filterQuestions }\r\n        if (this.props.instantSearch) {\r\n            newState.filterQuestions = newState.draftFilterQuestions;\r\n        }\r\n        this.setState(newState);\r\n    }\r\n\r\n    submit(event) {\r\n        this.setState({ \r\n            searchText: prepareText(this.state.draftSearchText),\r\n            filterQuestions: this.state.draftFilterQuestions\r\n        });\r\n    }\r\n\r\n    render() { \r\n            return <div>\r\n                <ListGroup>\r\n                    <ListGroupItem>\r\n                        <Input type='text' value={this.state.draftSearchText} onChange={this.searchTextChange} />\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                        <Checkbox text={'Filter Questions'} \r\n                                checked={this.state.draftFilterQuestions}\r\n                                onChange={this.filterQuestionsChange}></Checkbox>\r\n                    </ListGroupItem>\r\n                </ListGroup>\r\n                {!this.props.instantSearch ? \r\n                <ListGroup className='list-group-horizontal mt-1'>\r\n                    <ListGroupItem style={{width: '100%'}}>\r\n                        Searched{this.state.filterQuestions ? ' (Filter Questions)': ''}: <span className='text-info'>{this.state.searchText}</span>\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                        <Button color='primary' onClick={this.submit}>Submit</Button>\r\n                    </ListGroupItem>\r\n                </ListGroup> : null}\r\n            </div>;\r\n    }\r\n}\r\n\r\nfunction prepareText(text) {\r\n    return text.toLowerCase();\r\n}\r\n\r\nexport default SearchFilter;","import React from 'react';\r\nimport {\r\n    Input,\r\n    FormGroup,\r\n    Label\r\n} from 'reactstrap';\r\nimport { isChanged } from '../Utils';\r\n\r\nclass CheckboxList extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.change = this.change.bind(this);\r\n        this.state = { \r\n            checked: this.props.checked\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (isChanged(['checked'], prevProps, this.props)) {\r\n            this.setState({ checked: this.props.checked }, () => {\r\n                this.props.onChange(this.state.checked)\r\n            });\r\n        }\r\n    }\r\n\r\n    change(e) {\r\n        const changedKey = e.currentTarget.getAttribute('option-key');\r\n        const changedKeyIndex = this.state.checked.indexOf(changedKey);\r\n        let newChecked;\r\n        if (changedKeyIndex !== -1) {\r\n            newChecked = [...this.state.checked];\r\n            newChecked.splice(changedKeyIndex, 1);\r\n        } else {\r\n            newChecked = [...this.state.checked, changedKey];\r\n        }\r\n        this.setState({ checked: newChecked }, () => this.props.onChange(this.state.checked));\r\n    }\r\n\r\n    render() {\r\n        return this.props.options.map(option => {\r\n            return <FormGroup check key={option.key}>\r\n                        <Label check>\r\n                            <Input type=\"checkbox\" \r\n                            onChange={this.change}\r\n                            option-key={option.key}\r\n                            checked={(this.state.checked && \r\n                                this.state.checked.includes(option.key)) || \r\n                                false} \r\n                            />{option.value}\r\n                        </Label>\r\n                    </FormGroup>\r\n        });\r\n    }\r\n}\r\n \r\nexport default CheckboxList;","import React from 'react';\r\nimport {\r\n    Input,\r\n    InputGroupAddon,\r\n    InputGroupText,\r\n    InputGroup\r\n} from 'reactstrap';\r\nimport { isChanged } from '../Utils';\r\n\r\nclass RangeInput extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.lowChange = this.lowChange.bind(this);\r\n        this.highChange = this.highChange.bind(this);\r\n        this.state = { \r\n            low: this.props.initial.low,\r\n            high: this.props.initial.high,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (isChanged(['low', 'high'], prevState, this.state)) {\r\n            this.props.onChange(this.props.metric, this.state)\r\n        }\r\n    }\r\n\r\n    lowChange(event) {\r\n        if (!isNaN(event.target.value)) {\r\n            const newLow = parseFloat(event.target.value)\r\n            this.setState({ \r\n                low: newLow\r\n            });\r\n        }\r\n    }\r\n    highChange(event) {\r\n        if (!isNaN(event.target.value)) {\r\n            const newHigh = parseFloat(event.target.value)\r\n            this.setState({ \r\n                high: newHigh\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n        <InputGroup tag='span'>\r\n            <Input onChange={this.lowChange} value={this.state.low} type='number' step={this.props.step} style={{padding: '0px', textAlign: 'center'}}></Input>\r\n            <InputGroupAddon tag='span' addonType=\"append\">\r\n                <InputGroupText>≤</InputGroupText>\r\n            </InputGroupAddon>\r\n            <span style={{display: 'flex', alignItems: 'center', margin: '5px'}}>{this.props.metric}</span>\r\n            <InputGroupAddon tag='span' addonType=\"prepend\">\r\n                <InputGroupText>≤</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onChange={this.highChange} value={this.state.high} type='number' step={this.props.step} style={{padding: '0px', textAlign: 'center'}}></Input>\r\n        </InputGroup>\r\n      </div>;\r\n    }\r\n}\r\n \r\nexport default RangeInput;","import React from 'react';\r\nimport DatasetLoader from './dataset-loader/DatasetLoader';\r\nimport PredictionsLoader from './PredictionsLoader';\r\nimport {\r\n    ListGroup,\r\n    ListGroupItem,\r\n    CardGroup,\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    Button,\r\n    Container\r\n} from 'reactstrap';\r\nimport { shouldUpdate, isChanged } from '../../Utils';\r\nimport { answerTypesConst } from '../AnswersUtils';\r\nimport SearchFilter from './SearchFilter';\r\nimport CheckboxList from '../../checkbox_list/CheckboxList';\r\nimport RangeInput from '../../range_input/RangeInput';\r\nimport Checkbox from '../../checkbox/Checkbox';\r\n\r\nconst props_updateSignals = ['predictionTypes']\r\nconst state_updateSignals = ['dataset', 'predictions', 'filteredAnswerTypes', 'answerTypeFilterFirstOnly', \r\n                            'answerTypeFilterStrict', 'truncatedFilter', 'untruncatedFilter',\r\n                            'filteredPredictionTypes', 'searchProps', 'F1Range', 'EMRange']\r\nclass ExplorerSettings extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.datasetChange = this.datasetChange.bind(this);\r\n        this.predictionsChange = this.predictionsChange.bind(this);\r\n        this.filteredAnswerTypesChange = this.filteredAnswerTypesChange.bind(this);\r\n        this.answerTypeFilterFirstOnlyChange = this.answerTypeFilterFirstOnlyChange.bind(this);\r\n        this.answerTypeFilterStrictChange = this.answerTypeFilterStrictChange.bind(this);\r\n        this.truncatedFilterChange = this.truncatedFilterChange.bind(this);\r\n        this.untruncatedFilterChange = this.untruncatedFilterChange.bind(this);\r\n        this.filteredPredictionTypesChange = this.filteredPredictionTypesChange.bind(this);\r\n        this.searchFilterChange = this.searchFilterChange.bind(this);\r\n        this.rangeFilterChange = this.rangeFilterChange.bind(this);\r\n        this.state = {\r\n            filteredAnswerTypes: this.props.filteredAnswerTypes,\r\n            answerTypeFilterFirstOnly: this.props.answerTypeFilterFirstOnly,\r\n            answerTypeFilterStrict: this.props.answerTypeFilterStrict,\r\n            truncatedFilter: this.props.truncatedFilter,\r\n            untruncatedFilter: this.props.untruncatedFilter,\r\n            filteredPredictionTypes: this.props.filteredPredictionTypes,\r\n            searchProps: this.props.searchProps,\r\n            F1Range: this.props.F1Range,\r\n            EMRange: this.props.EMRange\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        const update = shouldUpdate(props_updateSignals, state_updateSignals, \r\n            this.props, this.state, \r\n            nextProps, nextState, \r\n            false, this.constructor.name);\r\n        return update;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (isChanged(['predictionTypes'], prevProps, this.props)) {\r\n            this.setState({ filteredPredictionTypes: this.props.predictionTypes.map(predictionType => predictionType.key) });\r\n        }\r\n        this.props.onChange(this.state);\r\n    }\r\n\r\n    datasetChange(dataset) {\r\n        this.setState({ dataset });\r\n    }\r\n\r\n    predictionsChange(predictions) {\r\n        this.setState({ predictions });\r\n    }\r\n\r\n    filteredAnswerTypesChange(filteredAnswerTypes) {\r\n        this.setState({ filteredAnswerTypes });\r\n    }\r\n    \r\n    answerTypeFilterFirstOnlyChange(answerTypeFilterFirstOnly) {\r\n        this.setState({ answerTypeFilterFirstOnly });\r\n    }\r\n\r\n    answerTypeFilterStrictChange(answerTypeFilterStrict) {\r\n        this.setState({ answerTypeFilterStrict });\r\n    }\r\n\r\n    truncatedFilterChange(truncatedFilter) {\r\n        this.setState({ truncatedFilter });\r\n    }\r\n\r\n    untruncatedFilterChange(untruncatedFilter) {\r\n        this.setState({ untruncatedFilter });\r\n    }\r\n\r\n    filteredPredictionTypesChange(filteredPredictionTypes) {\r\n        this.setState({ filteredPredictionTypes });\r\n    }\r\n\r\n    searchFilterChange(searchProps) {\r\n        this.setState({ searchProps });\r\n    }\r\n\r\n    rangeFilterChange(metric, range) {\r\n        this.setState({ [`${metric}Range`]: range });\r\n    }\r\n\r\n    render() {\r\n        return <Container className='ml-0' fluid>\r\n            <CardGroup className='row'>\r\n                <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Dataset</CardHeader>\r\n                    <CardBody>\r\n                        <DatasetLoader onDatasetChange={this.datasetChange} \r\n                                        useLocalDataset={this.props.useLocalDataset} \r\n                                        allowSourceSelection={this.props.allowSourceSelection} />\r\n                    </CardBody>\r\n                </Card>\r\n                <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Table Operations</CardHeader>\r\n                    <CardBody style={{height: 0, overflow: 'auto'}}>\r\n                        <ListGroup>\r\n                            <ListGroupItem>\r\n                                <Button color='primary' size='sm' style={{width: '100%'}} onClick={() => {\r\n                                    if (this.props.expandAllFunc) {\r\n                                        this.props.expandAllFunc()\r\n                                    }\r\n                                }}>EXPAND ALL\r\n                                </Button>\r\n                            </ListGroupItem>\r\n                            <ListGroupItem>\r\n                                <Button color='primary' size='sm' style={{width: '100%'}} onClick={() => {\r\n                                    if (this.props.collapseAllFunc) {\r\n                                        this.props.collapseAllFunc()\r\n                                    }\r\n                                }}>COLLAPSE ALL\r\n                                </Button>\r\n                            </ListGroupItem>\r\n                            <ListGroupItem>\r\n                                <Button color='primary' size='sm' style={{width: '100%'}} onClick={() => {\r\n                                    if (this.props.clearSelectedAnswersFunc) {\r\n                                        this.props.clearSelectedAnswersFunc()\r\n                                    }\r\n                                }}>CLEAR SELECTED ANSWERS\r\n                                </Button>\r\n                            </ListGroupItem>\r\n                        </ListGroup>\r\n                    </CardBody>\r\n                </Card>\r\n                <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>\r\n                        Answer Type Filter\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                        <ListGroup className='list-group-horizontal'>\r\n                            <ListGroupItem style={{width: '100%'}}>\r\n                                <CheckboxList \r\n                                    onChange={this.filteredAnswerTypesChange} \r\n                                    checked={this.state.filteredAnswerTypes} \r\n                                    options={answerTypesConst}></CheckboxList>\r\n                            </ListGroupItem>\r\n                            <ListGroupItem style={{width: '100%'}}>\r\n                                <Checkbox text={'Primary Only'} inline={false}\r\n                                    checked={this.state.answerTypeFilterFirstOnly}\r\n                                    onChange={this.answerTypeFilterFirstOnlyChange}></Checkbox>\r\n                                <Checkbox text={'Strict'} inline={false}\r\n                                    checked={this.state.answerTypeFilterStrict}\r\n                                    onChange={this.answerTypeFilterStrictChange}></Checkbox>\r\n                            </ListGroupItem>\r\n                        </ListGroup>\r\n                    </CardBody>\r\n                </Card>\r\n                <Card className='col-sm-6 p-0'>\r\n                    <CardHeader>Search</CardHeader>\r\n                    <CardBody>\r\n                        <SearchFilter onChange={this.searchFilterChange} \r\n                        instantSearch={this.props.instantSearch} searchProps={this.props.searchProps} />\r\n                    </CardBody>\r\n                </Card>\r\n            </CardGroup>\r\n            <CardGroup className='row'>\r\n                <Card className='col-sm-2 p-0'>\r\n                        <CardHeader>Predictions</CardHeader>\r\n                        <CardBody>\r\n                            <PredictionsLoader onChange={this.predictionsChange} />\r\n                        </CardBody>\r\n                </Card>\r\n                {this.state.predictions ? <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Prediction Head</CardHeader>\r\n                    <CardBody>\r\n                        <CheckboxList onChange={this.filteredPredictionTypesChange} checked={this.state.filteredPredictionTypes} options={this.props.predictionTypes}></CheckboxList>\r\n                    </CardBody>\r\n                </Card> : null}\r\n                {this.state.predictions ? <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Score Filter</CardHeader>\r\n                    <CardBody>\r\n                    <ListGroup>\r\n                    <ListGroupItem>\r\n                        <RangeInput metric='F1' initial={this.props.F1Range} step='0.01' onChange={this.rangeFilterChange}></RangeInput>\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                        <RangeInput metric='EM' initial={this.props.EMRange} step='0.01' onChange={this.rangeFilterChange}></RangeInput>\r\n                    </ListGroupItem>\r\n                    </ListGroup>\r\n                    </CardBody>\r\n                </Card> : null}\r\n                {this.state.predictions ? <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Truncated Filter</CardHeader>\r\n                    <CardBody>\r\n                        <Checkbox text={'Show Truncated'} inline={false}\r\n                            checked={this.state.truncatedFilter}\r\n                            onChange={this.truncatedFilterChange}></Checkbox>\r\n                        <Checkbox text={'Show Untruncated'} inline={false}\r\n                            checked={this.state.untruncatedFilter}\r\n                            onChange={this.untruncatedFilterChange}></Checkbox>\r\n                    </CardBody>\r\n                </Card> : null}\r\n            </CardGroup>\r\n        </Container>\r\n    }\r\n}\r\n\r\nexport default ExplorerSettings;","import styled from 'styled-components';\r\n\r\nconst WrapDiv = styled.div`\r\n    white-space: pre-wrap;       /* css-3 */\r\n    white-space: -moz-pre-wrap;  /* Mozilla, since 1999 */\r\n    white-space: -pre-wrap;      /* Opera 4-6 */\r\n    white-space: -o-pre-wrap;    /* Opera 7 */\r\n    word-wrap: break-word;       /* Internet Explorer 5.5+ */\r\n`;\r\n\r\nexport default WrapDiv;","import { answerTypesConst, getAnswerStringForDisplayAndType, getAnswerForEvaluation,\r\n    noAnswerType, noPredictionType } from '../AnswersUtils';\r\nimport { intersect } from '../../Utils';\r\n\r\nexport function processDataHelper(dataset, predictions) {\r\n\r\n    let hasValidatedAnswers = false;\r\n    let hasValidPredictions = false;\r\n    let passage_id_to_displayIndex = {};\r\n    let passage_id_to_queries_displayIndexes = {};\r\n    let predictionTypes = []\r\n    let data = [];\r\n    if (dataset) {\r\n        const reduced = dataset.reduce(process_row, {\r\n            data: [],\r\n            hasValidatedAnswers: false,\r\n            passage_id_to_displayIndex: {},\r\n            passage_id_to_queries_displayIndexes: {}\r\n        });\r\n        data = reduced.data;\r\n        hasValidatedAnswers = reduced.hasValidatedAnswers;\r\n        passage_id_to_displayIndex = reduced.passage_id_to_displayIndex;\r\n        passage_id_to_queries_displayIndexes = reduced.passage_id_to_queries_displayIndexes;\r\n\r\n        if (predictions) {\r\n            const keyToPredictionType = {}\r\n            for (let i=0; i < predictions.length; i++) {\r\n                const prediction = predictions[i];\r\n\r\n                const passage_id = prediction.passage_id;\r\n                const query_id = prediction.query_id;\r\n\r\n                const passage_displayIndex =passage_id_to_displayIndex[passage_id];\r\n                if (passage_displayIndex !== undefined) {\r\n                    const row = data[passage_displayIndex];\r\n\r\n                    const query_displayIndex = passage_id_to_queries_displayIndexes[passage_id][query_id];\r\n                    if (query_displayIndex !== undefined) {\r\n                        hasValidPredictions = true;\r\n                        let qa_pair = row.qa_pairs[passage_id_to_queries_displayIndexes[passage_id][query_id]]\r\n                        if (qa_pair.prediction) {\r\n                            // only needed because there's a duplication of query_id in the dev dataset\r\n                            qa_pair = row.qa_pairs.find(q => q.query_id === qa_pair.query_id && !q.prediction)\r\n                            if (!qa_pair) {\r\n                                continue;\r\n                            }\r\n                        }\r\n\r\n                        let predictionType = keyToPredictionType[prediction.predicted_ability]\r\n                        if (!predictionType) {\r\n                            predictionType = keyToPredictionType[prediction.predicted_ability] = {\r\n                                'key': prediction.predicted_ability, \r\n                                'value': prediction.predicted_ability\r\n                            };\r\n                            predictionTypes.push(predictionType);\r\n                        }\r\n\r\n                        const predictionValue = prediction.answer.value;\r\n\r\n                        qa_pair.prediction = Array.isArray(predictionValue) ? predictionValue : [predictionValue];\r\n                        qa_pair.displayPrediction = getAnswerStringForDisplayAndType({'spans': qa_pair.prediction}).displayAnswer;\r\n                        qa_pair.predictionType = predictionType;\r\n                        qa_pair.maximizingGroundTruth = prediction.maximizing_ground_truth.sort();\r\n                        qa_pair.f1 = prediction.f1;\r\n                        qa_pair.em = prediction.em;\r\n                        qa_pair.loss = prediction.loss;\r\n                        qa_pair.max_passage_length = prediction.max_passage_length === -1 ? undefined : prediction.max_passage_length;\r\n\r\n                        if (predictionType.key !== 'arithmetic') {\r\n                            qa_pair.evaluationPrediction = getAnswerForEvaluation({'spans': qa_pair.prediction});\r\n                        } else {\r\n                            const numbers = []\r\n                            const signs = []                           \r\n                            prediction.answer.numbers.filter(number => number.sign !== 0).forEach(number => {\r\n                                numbers.push(number.value)\r\n                                signs.push(number.sign === -1 ? '-' : '+')\r\n                            })\r\n\r\n                            if (numbers.length <= 1) {\r\n                                qa_pair.evaluationPrediction = getAnswerForEvaluation({'spans': qa_pair.prediction});\r\n                            } else {\r\n                                const numbersStrs = numbers.map(number => {\r\n                                    if (number === parseFloat(number.toLocaleString().replace(/,/g, ''))) {\r\n                                        return number.toLocaleString()\r\n                                    }\r\n                                    return number.toString()\r\n                                });\r\n                                const predictionNumberStr = Number(qa_pair.displayPrediction) === parseFloat(Number(qa_pair.displayPrediction).toLocaleString().replace(/,/g, '')) ? \r\n                                                                Number(qa_pair.displayPrediction).toLocaleString() : \r\n                                                                qa_pair.displayPrediction;\r\n                                qa_pair.displayPrediction = `${\r\n                                    numbersStrs.map((numberStr, index) => {\r\n                                        const sign = signs[index]\r\n                                        return `${index === 0 && sign === '+' ? '' : sign}${index === 0 ? '' : ' '}${numberStr}`;\r\n                                    }).join(' ')\r\n                                } = ${predictionNumberStr}`\r\n\r\n                                qa_pair.evaluationPrediction = getAnswerForEvaluation({'spans': [...numbersStrs, predictionNumberStr]});\r\n                            }\r\n                        }\r\n\r\n                        const maximizingGroundTruth = qa_pair.maximizingGroundTruth;\r\n                        const maximizingGroundTruthIndex = qa_pair.evaluationAnswers.findIndex(evaluationAnswer => {\r\n                            if (evaluationAnswer.length !== maximizingGroundTruth.length) {\r\n                                return false;\r\n                            }\r\n                            for (let i = 0; i < evaluationAnswer.length; i++) {\r\n                                if (evaluationAnswer[i].toLowerCase() !== maximizingGroundTruth[i].toLowerCase()) {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                            return true;\r\n                        });\r\n                        if (maximizingGroundTruthIndex !== -1) {\r\n                            qa_pair.maximizingGroundTruthIndex = maximizingGroundTruthIndex;\r\n                        }\r\n                        \r\n                        const predictionSpans = prediction.answer.spans;\r\n                        if (predictionSpans && predictionSpans.length > 0) {\r\n                            qa_pair.predictionSpans = predictionSpans;\r\n                        }\r\n                    } else {\r\n                        continue;\r\n                    }\r\n                }\r\n                else {\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    predictionTypes.sort()\r\n    predictionTypes.push(noAnswerType)\r\n\r\n    return {\r\n        data,\r\n        hasValidatedAnswers,\r\n        hasValidPredictions,\r\n        predictionTypes\r\n    };\r\n}\r\n\r\nfunction process_row(accumulator, row, index) {\r\n    const passage_id = row.passage_id;\r\n    const passage_displayIndex = accumulator.data.length;\r\n\r\n    const reduced = row.qa_pairs.reduce(process_qa_pair, {\r\n        passage_id: passage_id, \r\n        qa_pairs: [],\r\n        hasValidatedAnswers: accumulator.hasValidatedAnswers,\r\n        query_id_to_displayIndex: {}\r\n    });\r\n    const qa_pairs = reduced.qa_pairs;\r\n    accumulator.hasValidatedAnswers = reduced.hasValidatedAnswers;\r\n    const query_id_to_displayIndex = reduced.query_id_to_displayIndex;\r\n\r\n    const hasQuestions = qa_pairs.length !== 0;\r\n    const isValid = hasQuestions;\r\n\r\n    if (isValid) {\r\n        const reduced_row = {\r\n            ...row,\r\n            passage: row.passage.trim(),\r\n            qa_pairs,\r\n            passage_index: index\r\n        }\r\n        \r\n        accumulator.data.push(reduced_row);\r\n        accumulator.passage_id_to_displayIndex[passage_id] = passage_displayIndex;\r\n        accumulator.passage_id_to_queries_displayIndexes[passage_id] = query_id_to_displayIndex\r\n    }\r\n    return accumulator;\r\n}\r\n\r\nfunction process_qa_pair(accumulator, qa_pair, query_index) {\r\n    const query_displayIndex = accumulator.qa_pairs.length;\r\n    const passage_id = accumulator.passage_id;\r\n\r\n    if (!accumulator.hasValidatedAnswers && qa_pair.validated_answers && qa_pair.validated_answers.length > 0) {\r\n        accumulator.hasValidatedAnswers = true;\r\n    }\r\n\r\n    const {displayAnswer: firstDisplayAnswer, answerType: firstAnswerType} = getAnswerStringForDisplayAndType(qa_pair.answer);\r\n    const displayAnswers = [firstDisplayAnswer];\r\n    const answersTypes = [firstAnswerType];\r\n\r\n    const evaluationAnswers = [getAnswerForEvaluation(qa_pair.answer)]\r\n\r\n    if (firstAnswerType === noAnswerType) {\r\n        return accumulator;\r\n    }\r\n\r\n    if (qa_pair.validated_answers && qa_pair.validated_answers.length > 0) {\r\n        qa_pair.validated_answers.forEach(validatedAnswer => {\r\n            const evaluationAnswer = getAnswerForEvaluation(validatedAnswer)\r\n\r\n            const alreadyAdded = evaluationAnswers.some(addedEvaluationAnswer => {\r\n                if (addedEvaluationAnswer.length !== evaluationAnswer.length) {\r\n                    return false;\r\n                }\r\n                for (let i = 0; i < evaluationAnswer.length; i++) {\r\n                    if (evaluationAnswer[i].toLowerCase() !== addedEvaluationAnswer[i].toLowerCase()) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n\r\n            if (!alreadyAdded) {\r\n                const {displayAnswer, answerType} = getAnswerStringForDisplayAndType(validatedAnswer);\r\n                displayAnswers.push(displayAnswer);\r\n                answersTypes.push(answerType);\r\n\r\n                evaluationAnswers.push(getAnswerForEvaluation(validatedAnswer));\r\n            }\r\n        });\r\n    }\r\n    \r\n    accumulator.qa_pairs.push({\r\n        ...qa_pair,\r\n        question: qa_pair.question.trim(),\r\n        evaluationAnswers,\r\n        displayAnswers,\r\n        answersTypes,\r\n        maximizingGroundTruthIndex: 0,\r\n        query_index,\r\n        passage_id\r\n    })\r\n    accumulator.query_id_to_displayIndex[qa_pair.query_id] = query_displayIndex;\r\n    \r\n    return accumulator;\r\n}\r\n\r\n\r\nexport function filterDataHelper(internals, filteredAnswerTypes, answerTypeFilterFirstOnly, answerTypeFilterStrict, \r\n                                filteredPredictionTypes, searchProps, F1Range, EMRange, truncatedFilter) {\r\n    const data = internals.data; \r\n    const filteredDataPerFilter = internals.filteredDataPerFilter;       \r\n\r\n    const searchText = searchProps.searchText;\r\n    const useTextSearch = Boolean(searchText);\r\n\r\n    if (useTextSearch) {\r\n        if (!filteredDataPerFilter.search) {\r\n            const reduced = data.reduce(searchReudcer_rows, {\r\n                filteredData: [],\r\n                searchProps,\r\n                hasValidPredictions: internals.hasValidPredictions\r\n            })\r\n            const result = reduced.filteredData;\r\n\r\n            filteredDataPerFilter.search = result;\r\n        }\r\n    }\r\n\r\n    if (!filteredDataPerFilter.answerTypes) {\r\n        if (filteredAnswerTypes.length > 0) {\r\n            if (filteredAnswerTypes.length < answerTypesConst.length || answerTypeFilterStrict) {\r\n                const reduced = data.reduce(typeFilterReudcer_rows, {\r\n                    filteredData: [],\r\n                    filteredTypes: filteredAnswerTypes,\r\n                    fields: ['answersTypes'],\r\n                    missingValue: noAnswerType,\r\n                    firstOnly: answerTypeFilterFirstOnly,\r\n                    strict: answerTypeFilterStrict\r\n                });\r\n                const result = reduced.filteredData;\r\n\r\n                filteredDataPerFilter.answerTypes = result;\r\n            }\r\n        } else {\r\n            filteredDataPerFilter.answerTypes = [];\r\n        }\r\n    }\r\n\r\n    if (internals.hasValidPredictions && !filteredDataPerFilter.predictionTypes) {\r\n        if (filteredPredictionTypes.length > 0) {\r\n            const reduced = data.reduce(typeFilterReudcer_rows, {\r\n                filteredData: [],\r\n                filteredTypes: filteredPredictionTypes,\r\n                fields: ['predictionType'],\r\n                missingValue: noPredictionType,\r\n                strict: false\r\n            });\r\n            const result = reduced.filteredData;\r\n\r\n            filteredDataPerFilter.predictionTypes = result;\r\n        } else {\r\n            filteredDataPerFilter.predictionTypes = [];\r\n        }\r\n    }\r\n\r\n    if (internals.hasValidPredictions && !filteredDataPerFilter.F1Range) {\r\n        const range = F1Range;\r\n        if (range.low <= range.high) {\r\n            const reduced = data.reduce(rangeFilterReudcer_rows, {\r\n                filteredData: [],\r\n                range,\r\n                field: 'f1'\r\n            });\r\n            const result = reduced.filteredData;\r\n\r\n            filteredDataPerFilter.F1Range = result;\r\n        } else {\r\n            filteredDataPerFilter.F1Range = [];\r\n        }\r\n    }\r\n\r\n    if (internals.hasValidPredictions && !filteredDataPerFilter.EMRange) {\r\n        const range = EMRange;\r\n        if (range.low <= range.high) {\r\n            const reduced = data.reduce(rangeFilterReudcer_rows, {\r\n                filteredData: [],\r\n                range,\r\n                field: 'em'\r\n            });\r\n            const result = reduced.filteredData;\r\n\r\n            filteredDataPerFilter.EMRange = result;\r\n        } else {\r\n            filteredDataPerFilter.EMRange = [];\r\n        }\r\n    }\r\n\r\n    if (internals.hasValidPredictions && !filteredDataPerFilter.truncated) {\r\n        const showTruncated = truncatedFilter.showTruncated;\r\n        const showUntruncated = truncatedFilter.showUntruncated;\r\n        if (showTruncated || showUntruncated) {\r\n            if (showTruncated && showUntruncated) {\r\n                filteredDataPerFilter.truncated = data;\r\n            } else {\r\n                const reduced = data.reduce(truncatedFilterReudcer_rows, {\r\n                    filteredData: [],\r\n                    showTruncated,\r\n                    showUntruncated,\r\n                });\r\n                const result = reduced.filteredData;\r\n    \r\n                filteredDataPerFilter.truncated = result;\r\n            }\r\n        } else {\r\n            filteredDataPerFilter.truncated = []\r\n        }\r\n    }\r\n\r\n    let filteredData = intersectFilteredData(filteredDataPerFilter, data.length);\r\n\r\n    if (!filteredData) {\r\n        filteredData = data;\r\n    }\r\n\r\n    const metrics = {\r\n        questionsCount: 0,\r\n        predictedCount: 0,\r\n        f1: 0,\r\n        em: 0\r\n    }\r\n\r\n    for (let i=0; i < filteredData.length; i++) {\r\n        const row = filteredData[i];\r\n\r\n        metrics.questionsCount += row.qa_pairs.length;\r\n\r\n        let row_predicted = 0;\r\n        let row_f1 = 0;\r\n        let row_em = 0;\r\n        if (internals.hasValidPredictions) {\r\n            for (let j=0; j < row.qa_pairs.length; j++) {\r\n                const qa_pair = row.qa_pairs[j];\r\n    \r\n                if (qa_pair.prediction) {\r\n                    row_predicted += 1;\r\n                    row_f1 += qa_pair.f1;\r\n                    row_em += qa_pair.em;\r\n                }\r\n            }\r\n        }\r\n        metrics.f1 += row_f1;\r\n        metrics.em += row_em;\r\n        metrics.predictedCount += row_predicted;\r\n\r\n        if (row_predicted > 0) {\r\n            row.f1 = row_f1 / row_predicted;\r\n            row.em = row_em / row_predicted;\r\n        }\r\n    }\r\n    if (metrics.predictedCount > 0) {\r\n        metrics.f1 /= metrics.predictedCount;\r\n        metrics.em /= metrics.predictedCount;\r\n    } else {\r\n        metrics.f1 = undefined;\r\n        metrics.em = undefined;\r\n    }\r\n\r\n\r\n    return {\r\n        filteredData,\r\n        filteredDataPerFilter,\r\n        metrics\r\n    };\r\n}\r\n\r\nfunction intersectFilteredData(filteredDataPerFilter) {\r\n    const filteredDataArr = Object.values(filteredDataPerFilter).filter(filteredData => Boolean(filteredData))\r\n    const filtersCount = filteredDataArr.length;\r\n\r\n    if (filtersCount === 0) {\r\n        return;\r\n    }\r\n\r\n    if (filtersCount === 1) {\r\n        return filteredDataArr[0];\r\n    }\r\n\r\n    const allNonEmpty = filteredDataArr.every(filteredData => filteredData.length > 0);\r\n    if (!allNonEmpty) {\r\n        return [];\r\n    }\r\n\r\n    return intersect(filteredDataArr, row => row.passage_index, intersectRows);\r\n}\r\n\r\nfunction intersectRows(sameRows) {\r\n    const qa_pairs_arr = sameRows.map(row => row.qa_pairs);\r\n\r\n    const filtered_qa_pairs = intersect(qa_pairs_arr, qa_pair => qa_pair.query_index, (sameQuestions) => {\r\n        return Object.assign({}, ...sameQuestions);\r\n    });\r\n\r\n    if (filtered_qa_pairs.length > 0) {\r\n        return Object.assign({}, ...sameRows, {'qa_pairs': filtered_qa_pairs});\r\n    }\r\n    return;\r\n}\r\n\r\n// Text Search Filtering\r\nfunction searchReudcer_rows(accumulator, row) {\r\n    const searchProps = accumulator.searchProps;\r\n    const searchText = searchProps.searchText;\r\n\r\n    const passageTextSearchValid = row.passage.toLowerCase().includes(searchText) || \r\n                                    row.passage_id.toLowerCase().includes(searchText);\r\n\r\n    let filtered_qa_pairs = row.qa_pairs;\r\n    let hasTextSearchValidQuestions = false;\r\n\r\n    if (searchProps.filterQuestions) {\r\n        filtered_qa_pairs = row.qa_pairs.filter(qa_pair => {\r\n            return isQuestionTextSearchValid(qa_pair, searchText, accumulator.hasValidPredictions);\r\n        });\r\n\r\n        hasTextSearchValidQuestions = filtered_qa_pairs.length > 0;\r\n\r\n    } else if (!passageTextSearchValid) {\r\n\r\n        hasTextSearchValidQuestions = row.qa_pairs.some(qa_pair => {\r\n            return isQuestionTextSearchValid(qa_pair, searchText, accumulator.hasValidPredictions);\r\n        });\r\n    }\r\n\r\n    const hasQuestions = filtered_qa_pairs.length > 0;\r\n    const isValid = (passageTextSearchValid && hasQuestions) || hasTextSearchValidQuestions;\r\n\r\n    if (isValid) {\r\n        accumulator.filteredData.push({\r\n            ...row,\r\n            qa_pairs: filtered_qa_pairs,\r\n        });\r\n    }\r\n    return accumulator;\r\n}\r\nfunction isQuestionTextSearchValid(qa_pair, searchText, hasValidPredictions) {\r\n    let result = qa_pair.question.toLowerCase().includes(searchText) ||\r\n                qa_pair.query_id.toLowerCase().includes(searchText);\r\n    if (result) {\r\n        return true;\r\n    }\r\n\r\n    for (let i = 0; i < qa_pair.evaluationAnswers.length; i++) {\r\n        const evaluationAnswer = qa_pair.evaluationAnswers[i];\r\n        for (let j = 0; j < evaluationAnswer.length; j++) {\r\n            result |= evaluationAnswer[j].toLowerCase().includes(searchText);\r\n\r\n            if (result) {\r\n                break;\r\n            }\r\n        }\r\n        if (result) {\r\n            break;\r\n        }\r\n    }\r\n    if (result) {\r\n        return true;\r\n    }\r\n\r\n    if (hasValidPredictions) {\r\n        const evaluationPrediction = qa_pair.evaluationPrediction;\r\n        if (evaluationPrediction) {\r\n            result = evaluationPrediction.some(x => {\r\n                return x.toLowerCase().includes(searchText)\r\n            });\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n// Type Filtering\r\nfunction typeFilterReudcer_rows(accumulator, row) {\r\n    const filteredTypes = accumulator.filteredTypes;\r\n\r\n    const { filtered_qa_pairs } = row.qa_pairs.reduce(typeFilterReudcer_qa_pairs, {\r\n        filtered_qa_pairs: [],\r\n        filteredTypes,\r\n        fields: accumulator.fields,\r\n        missingValue: accumulator.missingValue,\r\n        firstOnly: accumulator.firstOnly,\r\n        strict: accumulator.strict\r\n    });\r\n\r\n    const hasQuestions = filtered_qa_pairs.length > 0;\r\n    const isValid = hasQuestions;\r\n\r\n    if (isValid) {\r\n        accumulator.filteredData.push({\r\n            ...row,\r\n            qa_pairs: filtered_qa_pairs,\r\n        });\r\n    }\r\n    return accumulator;\r\n}\r\nfunction typeFilterReudcer_qa_pairs(accumulator, qa_pair) {\r\n    const filteredTypes = accumulator.filteredTypes;\r\n    const fields = accumulator.fields;\r\n    const firstOnly = accumulator.firstOnly;\r\n    const strict = accumulator.strict;\r\n\r\n    const foundTypes = new Set();\r\n    let typeValid = false;\r\n    for (let i = 0; i < fields.length; i++) {\r\n        const field = fields[i];\r\n\r\n        const obj = qa_pair[field] ? qa_pair[field] : accumulator.missingValue;\r\n        if (Array.isArray(obj)) {\r\n            const arr = obj;\r\n            for (let j = 0; j < arr.length; j++) {\r\n                const value = arr[j];\r\n                if (!strict) {\r\n                    typeValid = filteredTypes.includes(value.key);\r\n                    if (typeValid) {\r\n                        break;\r\n                    }\r\n                } else {\r\n                    foundTypes.add(value.key)\r\n                }\r\n\r\n                if (firstOnly) {\r\n                    break;\r\n                }\r\n            }\r\n            if (strict && foundTypes.size === filteredTypes.length && filteredTypes.every(x => foundTypes.has(x))) {\r\n                typeValid = true;\r\n            }\r\n            if (typeValid) {\r\n                break;\r\n            } \r\n        } else {\r\n            const value = obj;\r\n            typeValid = filteredTypes.includes(value.key);\r\n            if (typeValid) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    const isValid = typeValid;\r\n\r\n    if (isValid) {\r\n        accumulator.filtered_qa_pairs.push({\r\n            ...qa_pair\r\n        });\r\n    }\r\n\r\n    return accumulator;\r\n}\r\n\r\n// Range Filtering\r\nfunction rangeFilterReudcer_rows(accumulator, row) {\r\n    const range = accumulator.range;\r\n\r\n    const { filtered_qa_pairs } = row.qa_pairs.reduce(rangeFilterReudcer_qa_pairs, {\r\n        filtered_qa_pairs: [],\r\n        range,\r\n        field: accumulator.field\r\n    });\r\n\r\n    const hasQuestions = filtered_qa_pairs.length > 0;\r\n    const isValid = hasQuestions;\r\n\r\n    if (isValid) {\r\n        accumulator.filteredData.push({\r\n            ...row,\r\n            qa_pairs: filtered_qa_pairs,\r\n        });\r\n    }\r\n    return accumulator;\r\n}\r\nfunction rangeFilterReudcer_qa_pairs(accumulator, qa_pair) {\r\n    const range = accumulator.range;\r\n    const field = accumulator.field;\r\n\r\n    let rangeValid = false;\r\n    if (qa_pair[field] !== undefined) {\r\n        const value = qa_pair[field]\r\n        rangeValid = value >= range.low && value <= range.high;\r\n    } else {\r\n        rangeValid = true;\r\n    }    \r\n\r\n    const isValid = rangeValid;\r\n\r\n    if (isValid) {\r\n        accumulator.filtered_qa_pairs.push({\r\n            ...qa_pair\r\n        });\r\n    }\r\n\r\n    return accumulator;\r\n}\r\n\r\n// Truncated Filtering\r\nfunction truncatedFilterReudcer_rows(accumulator, row) {\r\n    const showTruncated = accumulator.showTruncated;\r\n    const showUntruncated = accumulator.showUntruncated;\r\n\r\n    const { filtered_qa_pairs } = row.qa_pairs.reduce(truncatedFilterReudcer_qa_pairs, {\r\n        filtered_qa_pairs: [],\r\n        showTruncated,\r\n        showUntruncated,\r\n    });\r\n\r\n    const hasQuestions = filtered_qa_pairs.length > 0;\r\n    const isValid = hasQuestions;\r\n\r\n    if (isValid) {\r\n        accumulator.filteredData.push({\r\n            ...row,\r\n            qa_pairs: filtered_qa_pairs,\r\n        });\r\n    }\r\n    return accumulator;\r\n}\r\n\r\nfunction truncatedFilterReudcer_qa_pairs(accumulator, qa_pair) {\r\n    const showTruncated = accumulator.showTruncated;\r\n    const showUntruncated = accumulator.showUntruncated;\r\n\r\n    let isValid = false;\r\n    if (showTruncated) {\r\n        isValid |= qa_pair.max_passage_length !== undefined;\r\n    }\r\n    if (showUntruncated) {\r\n        isValid |= qa_pair.max_passage_length === undefined;\r\n    }\r\n\r\n    if (isValid) {\r\n        accumulator.filtered_qa_pairs.push({\r\n            ...qa_pair\r\n        });\r\n    }\r\n\r\n    return accumulator;\r\n}\r\n","import React from 'react';\r\nimport ReactTable from 'react-table'\r\nimport cloneDeep from 'clone-deep'\r\nimport 'react-table/react-table.css';\r\nimport '../../../scss/highlighter.css';\r\nimport '../../../scss/react-table.css';\r\nimport WrapDiv from './WrapDiv'\r\nimport { shouldUpdate, isChanged, areSetsEqual, \r\n    displayIndexesToViewIndex, viewIndexToDisplayIndex, viewIndexToDisplayIndexes } from '../../Utils';\r\nimport { processDataHelper, filterDataHelper } from './DataUtils';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { \r\n    Table \r\n} from 'reactstrap';\r\n\r\nconst MAX_QUESTIONS_PER_PASSAGE_ASSUMPTION = 150;\r\n\r\nconst initialInternals = {\r\n    data: undefined,\r\n    filteredData: undefined,\r\n    filteredDataPerFilter: {\r\n        answerTypes: undefined,\r\n        predictionTypes: undefined,\r\n        search: undefined,\r\n        F1Range: undefined,\r\n        EMRange: undefined,\r\n        truncated: undefined\r\n    },\r\n    predictionTypes: [],\r\n\r\n    hasValidatedAnswers: false,\r\n    hasValidPredictions: false,\r\n    metrics: undefined\r\n}\r\n\r\nconst initialState = {\r\n    page: 0,\r\n    passagesPageSize: 5,\r\n    questionsPageSize: MAX_QUESTIONS_PER_PASSAGE_ASSUMPTION,\r\n    expanded_passage_ids: [],\r\n    activeQuestions: {},\r\n    questionResized: [],\r\n    questionSorted: []\r\n};\r\n\r\nconst filterProps = ['filteredAnswerTypes', 'answerTypeFilterFirstOnly', 'answerTypeFilterStrict',\r\n                    'truncatedFilter', 'untruncatedFilter',\r\n                    'filteredPredictionTypes', 'searchProps', 'F1Range', 'EMRange']\r\nconst props_updateSignals = ['dataset', 'predictions', ...filterProps]\r\nconst state_updateSignals = ['page', 'passagesPageSize', 'questionsPageSize', 'expanded_passage_ids', 'activeQuestions', 'questionResized', 'questionSorted']\r\nclass ExplorerTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        renderPassageOrQuestionCell = renderPassageOrQuestionCell.bind(this);\r\n        renderPredictionCell = renderPredictionCell.bind(this);\r\n        renderAnswersCell = renderAnswersCell.bind(this);\r\n        activeQuestionChange = activeQuestionChange.bind(this);\r\n\r\n        this.clearSelectedAnswers = this.clearSelectedAnswers.bind(this);\r\n        this.expandAll = this.expandAll.bind(this);\r\n        this.collapseAll = this.collapseAll.bind(this);\r\n        this.expandedChange = this.expandedChange.bind(this);\r\n        this.getExpanded = this.getExpanded.bind(this);\r\n        this.questionResizedChange = this.questionResizedChange.bind(this);\r\n\r\n        this.processData = this.processData.bind(this);\r\n        this.filterData = this.filterData.bind(this);\r\n        this.getSortedData = this.getSortedData.bind(this);\r\n\r\n        this.pageChanged = this.pageChanged.bind(this);\r\n        this.passagesPageSizeChanged = this.passagesPageSizeChanged.bind(this);\r\n        this.questionsPageSizeChanged = this.questionsPageSizeChanged.bind(this);\r\n        this.passageSortedChange = this.passageSortedChange.bind(this);\r\n        this.questionSortedChange = this.questionSortedChange.bind(this);\r\n\r\n        this.setInternals = this.setInternals.bind(this);\r\n        this.internals = cloneDeep(initialInternals);\r\n        this.state = cloneDeep(initialState);\r\n\r\n        this.tableRef = React.createRef();\r\n    }\r\n\r\n    setInternals(newInternals) {\r\n        Object.assign(this.internals, newInternals)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.sendClearSelectedAnswersFunc(this.clearSelectedAnswers);\r\n        this.props.sendExpandAllFunc(this.expandAll);\r\n        this.props.sendCollapseAllFunc(this.collapseAll);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (isChanged(['dataset'], this.props, nextProps)) {\r\n            // reset all when the dataset is switched\r\n            this.setInternals(cloneDeep(initialInternals));\r\n            this.setState(cloneDeep(initialState));\r\n        } else if (isChanged(['predictions'], this.props, nextProps)) {\r\n             this.setInternals(cloneDeep(initialInternals));\r\n        } else if (isChanged(filterProps, this.props, nextProps)) {\r\n            // update only the changed filter\r\n            const filteredAnswerTypesChanged = isChanged(['filteredAnswerTypes', 'answerTypeFilterFirstOnly', 'answerTypeFilterStrict'], this.props, nextProps);\r\n            const filteredPredictionTypesChanged = isChanged(['filteredPredictionTypes'], this.props, nextProps);\r\n            const searchPropsChanged = isChanged(['searchProps'], this.props, nextProps);\r\n            const F1RangeChanged = isChanged(['F1Range'], this.props, nextProps);\r\n            const EMRangeChanged = isChanged(['EMRange'], this.props, nextProps);\r\n            const truncatedFilterChanged = isChanged(['truncatedFilter', 'untruncatedFilter'], this.props, nextProps);\r\n\r\n            const refilteringRequired = filteredAnswerTypesChanged || filteredPredictionTypesChanged || \r\n                                    searchPropsChanged || F1RangeChanged || EMRangeChanged || truncatedFilterChanged;\r\n\r\n            this.setInternals({\r\n                filteredData: refilteringRequired ? undefined : this.internals.filteredData\r\n            });\r\n            if (filteredAnswerTypesChanged) {\r\n                this.internals.filteredDataPerFilter.answerTypes = undefined;\r\n            }\r\n            if (filteredPredictionTypesChanged) {\r\n                this.internals.filteredDataPerFilter.predictionTypes = undefined;\r\n            }\r\n            if (searchPropsChanged) {\r\n                this.internals.filteredDataPerFilter.search = undefined;\r\n            }\r\n            if (F1RangeChanged) {\r\n                this.internals.filteredDataPerFilter.F1Range = undefined;\r\n            }\r\n            if (EMRangeChanged) {\r\n                this.internals.filteredDataPerFilter.EMRange = undefined;\r\n            }\r\n            if (truncatedFilterChanged) {\r\n                this.internals.filteredDataPerFilter.truncated = undefined;\r\n            }\r\n        }\r\n        \r\n        const update = shouldUpdate(props_updateSignals, state_updateSignals, \r\n            this.props, this.state, \r\n            nextProps, nextState, \r\n            false, this.constructor.name);\r\n        return update;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (isChanged(['dataset', 'predictions'], prevProps, this.props)) {\r\n            this.props.onPredictionsTypeChanged(this.internals.predictionTypes);\r\n        }\r\n        if (isChanged(filterProps, prevProps, this.props)) {\r\n            // force updated is needed for getExpanded() to be called again,\r\n            // so it will use the filtered sorted data to find the expanded rows\r\n            this.forceUpdate(() => {\r\n                this.setState({ page: 0 });\r\n            })\r\n        }\r\n    }\r\n\r\n    pageChanged(page) {\r\n        this.setState({ page });\r\n    }\r\n\r\n    passagesPageSizeChanged(pageSize, page) {\r\n        this.setState({ passagesPageSize: pageSize, page });\r\n    }\r\n\r\n    questionsPageSizeChanged(pageSize, page) {\r\n        this.setState({ questionsPageSize: pageSize, page });\r\n    }\r\n\r\n    passageSortedChange(newSorted, column, additive) {\r\n        // force updated is needed for getExpanded() to be called,\r\n        // so it will use the filtered sorted data to find the expanded rows\r\n        this.forceUpdate();\r\n    }\r\n\r\n    questionSortedChange(newSorted, column, additive) {\r\n        this.setState({\r\n            questionSorted: newSorted\r\n        });\r\n    }\r\n\r\n    expandedChange(newExpanded, index, event) {\r\n        const pageSize = this.state.passagesPageSize;\r\n        const page = this.state.page;\r\n\r\n        const viewIndex = index[0];\r\n        const displayIndex = viewIndexToDisplayIndex(viewIndex, page, pageSize);\r\n\r\n        const sortedData = this.getSortedData();\r\n        const passage_id = sortedData[displayIndex].passage_id; \r\n        \r\n        const matchingPosition = this.state.expanded_passage_ids.indexOf(passage_id);\r\n        if (matchingPosition === -1) {\r\n            this.setState({\r\n                expanded_passage_ids: [...this.state.expanded_passage_ids, passage_id]\r\n            });\r\n        } else {\r\n            const expanded_passage_ids = [...this.state.expanded_passage_ids];\r\n            expanded_passage_ids.splice(matchingPosition, 1);\r\n            this.setState({\r\n                expanded_passage_ids\r\n            });\r\n        }\r\n    }\r\n\r\n    expandAll() {\r\n        this.setState({\r\n            expanded_passage_ids: [...this.internals.filteredData.map(row => row.passage_id)]\r\n        });\r\n    }\r\n\r\n    collapseAll() {\r\n        this.setState({\r\n            expanded_passage_ids: []\r\n        });\r\n    }\r\n\r\n    getExpanded() {\r\n        const defaultExpanded = {};\r\n        if (!this.tableRef.current) {\r\n            return defaultExpanded;\r\n        }\r\n\r\n        const sortedData = this.getSortedData();\r\n\r\n        const indexesFromSorted = new Set(sortedData.map(row => row.passage_index))\r\n        const indexesFromFiltered = new Set(this.internals.filteredData.map(row => row.passage_index))\r\n        if (!areSetsEqual(indexesFromSorted, indexesFromFiltered)) {\r\n            return defaultExpanded;\r\n        }\r\n\r\n        const pageSize = this.state.passagesPageSize;\r\n        const page = this.state.page;\r\n\r\n        const viewIndexes = [...Array(pageSize).keys()];\r\n        const displayIndexsInPage = viewIndexToDisplayIndexes(viewIndexes, page, pageSize);\r\n\r\n        const expandedDisplayIndexes = displayIndexsInPage.filter(displayIndex => {\r\n            if (displayIndex < sortedData.length) {\r\n                const passage_id = sortedData[displayIndex].passage_id;\r\n                return this.state.expanded_passage_ids.includes(passage_id)\r\n            }\r\n            return false;\r\n        });\r\n\r\n        let expandedInPage = displayIndexesToViewIndex(expandedDisplayIndexes, page, pageSize, true);\r\n\r\n        return expandedInPage;\r\n    }\r\n\r\n    questionResizedChange(newResized, event) {\r\n        this.setState({\r\n            questionResized: newResized\r\n        });\r\n    }\r\n\r\n    clearSelectedAnswers() {\r\n        this.setState({\r\n            activeQuestions: {}\r\n        });\r\n    }\r\n\r\n    processData() {\r\n        const dataset = this.props.dataset;\r\n        const predictions = this.props.predictions;\r\n\r\n        const {\r\n            data, \r\n            hasValidatedAnswers,\r\n            hasValidPredictions,\r\n            predictionTypes\r\n        } = processDataHelper(dataset, predictions);\r\n\r\n        this.setInternals({\r\n            data,\r\n            hasValidatedAnswers,\r\n            hasValidPredictions,\r\n            predictionTypes\r\n        });\r\n    }\r\n\r\n    filterData() {\r\n        const filteredAnswerTypes = this.props.filteredAnswerTypes;\r\n        const answerTypeFilterFirstOnly = this.props.answerTypeFilterFirstOnly;\r\n        const answerTypeFilterStrict = this.props.answerTypeFilterStrict;\r\n        const filteredPredictionTypes = this.props.filteredPredictionTypes;\r\n        const searchProps = this.props.searchProps;\r\n        const F1Range = this.props.F1Range;\r\n        const EMRange = this.props.EMRange;\r\n        const truncatedFilter = {'showTruncated': this.props.truncatedFilter, 'showUntruncated': this.props.untruncatedFilter};\r\n\r\n        const {\r\n            filteredData,\r\n            filteredDataPerFilter,\r\n            metrics\r\n        } = filterDataHelper(this.internals, filteredAnswerTypes, answerTypeFilterFirstOnly, answerTypeFilterStrict, \r\n                            filteredPredictionTypes, searchProps, F1Range, EMRange, truncatedFilter);\r\n        \r\n        this.setInternals({\r\n            filteredData,\r\n            filteredDataPerFilter,\r\n            metrics\r\n        });\r\n    }\r\n\r\n    getSortedData() {\r\n        return this.tableRef.current.getResolvedState().sortedData;\r\n    }\r\n\r\n    render() {\r\n\r\n        if (!this.internals.data) {\r\n            this.processData();\r\n        }\r\n        \r\n        if (!this.internals.filteredData) {\r\n            this.filterData();\r\n        }        \r\n\r\n        const passage_columns = [\r\n            {\r\n                Header: '#',\r\n                id: 'passage_index',\r\n                accessor: 'passage_index',\r\n                width: 50\r\n            },\r\n            {\r\n                Header: 'Passage ID',\r\n                accessor: 'passage_id',\r\n                width: 110\r\n            }, \r\n            {\r\n                Header: 'Passage',\r\n                accessor: 'passage',\r\n                Cell: renderPassageOrQuestionCell\r\n            }, \r\n            {\r\n                Header: 'Count',\r\n                id: 'questions_count',\r\n                accessor: row => row.qa_pairs.length,\r\n                width: 50,\r\n                resizable: false\r\n            },\r\n            {\r\n                Header: 'F1',\r\n                id: 'f1',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: qa_pair => fixDecimalPlaces(qa_pair.f1, 4),\r\n                width: 50,\r\n                resizable: false\r\n            }, {\r\n                Header: 'EM',\r\n                id: 'em',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: qa_pair => fixDecimalPlaces(qa_pair.em, 4),\r\n                width: 50,\r\n                resizable: false\r\n            }\r\n        ]\r\n\r\n        const qa_columns = [\r\n            {\r\n                Header: '#',\r\n                accessor: 'query_index',\r\n                width: 40\r\n            },\r\n            {\r\n                Header: 'Question ID',\r\n                accessor: 'query_id',\r\n                width: 100\r\n            },\r\n            {\r\n                Header: 'Question',\r\n                accessor: 'question',\r\n                Cell: renderPassageOrQuestionCell\r\n            },\r\n            {\r\n                Header: 'Answer Options',\r\n                accessor: 'displayAnswers',\r\n                Cell: renderAnswersCell,\r\n                width: 150\r\n            },\r\n            {\r\n                Header: '→ Type',\r\n                id: 'answersTypes',\r\n                accessor: qa_pair => qa_pair.answersTypes,\r\n                Cell: renderAnswersTypesCell,\r\n                width: 100,\r\n                resizable: false\r\n            },\r\n            {\r\n                Header: 'Prediction',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: 'displayPrediction',\r\n                Cell: renderPredictionCell,\r\n                width: 150\r\n            },\r\n            {\r\n                Header: 'Prediction Head',\r\n                id: 'predictionType',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: qa_pair => qa_pair.predictionType ? qa_pair.predictionType.value : '',\r\n                width: 110\r\n            },\r\n            {\r\n                Header: 'F1',\r\n                id: 'f1',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: qa_pair => fixDecimalPlaces(qa_pair.f1, 4),\r\n                width: 50,\r\n                resizable: false\r\n            }, {\r\n                Header: 'EM',\r\n                id: 'em',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: qa_pair => fixDecimalPlaces(qa_pair.em, 4),\r\n                width: 50,\r\n                resizable: false\r\n            }\r\n        ]\r\n\r\n        return <div className='container-fluid'>\r\n            <div className='row justify-content-center'>\r\n                <div className='col-3'>\r\n                    <h4>\r\n                    Passage Count: {this.internals.filteredData.length.toLocaleString()}\r\n                    </h4>\r\n                </div>\r\n                <div className='col-3'>\r\n                    <h4>\r\n                        Questions Count: {this.internals.metrics.questionsCount.toLocaleString()}\r\n                    </h4>\r\n                </div>\r\n                {this.props.predictions ? <div className='col-3'>\r\n                    <h4>\r\n                        {this.internals.hasValidPredictions ?\r\n                        `Predictions Count: ${this.internals.metrics.predictedCount.toLocaleString()}` :\r\n                        'Predictions do not match the dataset'\r\n                        }\r\n                    </h4>\r\n                </div> : null}\r\n                {(this.props.predictions && this.internals.hasValidPredictions) ? <div className='col-3'>\r\n                    <h4>\r\n                        F1: {fixDecimalPlaces(this.internals.metrics.f1, 4)}, EM: {fixDecimalPlaces(this.internals.metrics.em, 4)}\r\n                    </h4>\r\n                </div> : null}\r\n            </div>\r\n            <div className='row'><div className='col-12'>\r\n                <ReactTable ref={this.tableRef} className=\"-striped-passage -highlight-passage\"\r\n                data={this.internals.filteredData} \r\n                columns={passage_columns}\r\n                minRows={0}\r\n                showPaginationTop={true}\r\n                showPaginationBottom={true}\r\n                page={this.state.page}\r\n                pageSize={this.state.passagesPageSize}\r\n                pageSizeOptions={[1, 5, 10, 20, 25, 50, 100]}\r\n                onPageChange={this.pageChanged}\r\n                onPageSizeChange={this.passagesPageSizeChanged}\r\n                collapseOnSortingChange={false}\r\n                collapseOnPageChange={false}\r\n                collapseOnDataChange={false}\r\n                onSortedChange={this.passageSortedChange}\r\n                expanded={this.getExpanded()}\r\n                onExpandedChange={(newExpanded, index, event) => this.expandedChange(newExpanded, index, event)}\r\n                SubComponent={row => {\r\n                    const qa_pairs = row.original.qa_pairs\r\n                    return (\r\n                        <ReactTable className=\"-striped-question -highlight-question\" style={{maxHeight: '400px'}}\r\n                        data={qa_pairs}\r\n                        columns={qa_columns}\r\n                        minRows={0}\r\n                        sorted={this.state.questionSorted}\r\n                        onSortedChange={this.questionSortedChange}\r\n                        resized={this.state.questionResized}\r\n                        onResizedChange={this.questionResizedChange}\r\n                        pageSize={this.state.questionsPageSize}\r\n                        pageSizeOptions={[1, 5, 10, 20, 25, MAX_QUESTIONS_PER_PASSAGE_ASSUMPTION]}\r\n                        onPageSizeChange={this.questionsPageSizeChanged}\r\n                        showPagination={false}\r\n                        getTrProps={(state, rowInfo, column, instance) => {\r\n                            return {\r\n                                onClick: (e, handleOriginal) => {\r\n                                    activeQuestionChange(rowInfo, e);\r\n\r\n                                    if (handleOriginal) {\r\n                                        handleOriginal();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }}\r\n                        />\r\n                    )\r\n                }}\r\n                />\r\n            </div></div>\r\n            </div>\r\n    }\r\n}\r\n\r\nlet renderPassageOrQuestionCell = function(props) {\r\n    let searchWords = [];\r\n    let categoryPerSearchWordIndex = undefined;\r\n    let spans = [];\r\n    let categoryPerSpanIndex = [];\r\n    let highlightClassNamePerCategory = undefined;\r\n    const activeQuestionId = this.state.activeQuestions[props.original.passage_id];\r\n    if (activeQuestionId) {\r\n        let qa_pair;\r\n        if (props.column.id === 'passage') {\r\n            qa_pair = props.original.qa_pairs\r\n                        .find(qa_pair => qa_pair.query_id === activeQuestionId);\r\n        } else {\r\n            if (activeQuestionId === props.original.query_id) {\r\n                qa_pair = props.original;\r\n            }\r\n        }\r\n        if (qa_pair) {\r\n            searchWords = [...qa_pair.evaluationAnswers[qa_pair.maximizingGroundTruthIndex]];\r\n\r\n            categoryPerSearchWordIndex = searchWords.map(() => 'gold_1')\r\n            highlightClassNamePerCategory = {'gold_1': 'highlight-gold'}\r\n\r\n            if (qa_pair.prediction) {\r\n                if (qa_pair.predictionType.key === 'arithmetic') {\r\n                    searchWords = [];\r\n                    categoryPerSearchWordIndex = [];\r\n                    highlightClassNamePerCategory = {};\r\n                }\r\n\r\n                const context = props.column.id === 'passage' ? 'p' : 'q'\r\n\r\n                highlightClassNamePerCategory['truncated_0'] = 'truncated-passage'\r\n                const max_passage_length = qa_pair.max_passage_length;\r\n                if (max_passage_length !== undefined && context === 'p') {\r\n                    spans.push([max_passage_length, props.original.passage.length]);\r\n                    categoryPerSpanIndex.push('truncated_0');\r\n                }\r\n                \r\n                if (!['counting'].includes(qa_pair.predictionType.key)) {\r\n                    const predictionSpans = qa_pair.predictionSpans;\r\n                    if (predictionSpans) {\r\n                        predictionSpans.reduce((spansAcc, span) => {\r\n                            if (span[0] === context) {\r\n                                spansAcc.push([span[1], span[2]]);\r\n                            }\r\n                            return spansAcc;\r\n                        }, spans)\r\n                        spans.forEach(() => categoryPerSpanIndex.push('focus_3'))\r\n                    }\r\n\r\n                    const evaluationPrediction = qa_pair.evaluationPrediction;\r\n                    if (evaluationPrediction) {\r\n                        searchWords.push(...evaluationPrediction);\r\n                        categoryPerSearchWordIndex.push(...(evaluationPrediction.map(x => 'prediction_2')));\r\n                    }\r\n\r\n                    highlightClassNamePerCategory['prediction_2'] = 'highlight-predicted';\r\n                    highlightClassNamePerCategory['prediction_2-focus_3'] = 'highlight-predicted-focus';\r\n                    highlightClassNamePerCategory['truncated_0-prediction_2-focus_3'] = 'highlight-predicted-focus-truncated';\r\n                    highlightClassNamePerCategory['gold_1-prediction_2'] = 'highlight-correct';\r\n                    highlightClassNamePerCategory['truncated_0-gold_1-prediction_2'] = 'highlight-correct-truncated';\r\n                    highlightClassNamePerCategory['gold_1-prediction_2-focus_3'] = 'highlight-correct-focus';\r\n                    highlightClassNamePerCategory['truncated_0-gold_1-prediction_2-focus_3'] = 'highlight-correct-focus-truncated';\r\n                } else {\r\n                    searchWords = [];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return <WrapDiv><Highlighter autoEscape={true}\r\n            searchWords={searchWords} categoryPerSearchWordIndex={categoryPerSearchWordIndex}\r\n            spans={spans} categoryPerSpanIndex={categoryPerSpanIndex}\r\n            highlightClassNamePerCategory={highlightClassNamePerCategory}\r\n            textToHighlight={props.value} paddingMultiplier={0} /></WrapDiv>\r\n}\r\nlet renderPredictionCell = function(props) {\r\n    let searchWords = [];\r\n    const highlightClassName = 'highlight-predicted-regular';\r\n    const qa_pair = props.original;\r\n    const activeQuestionId = this.state.activeQuestions[qa_pair.passage_id];\r\n    if (activeQuestionId === qa_pair.query_id) {\r\n        if (qa_pair.prediction) {\r\n            searchWords = qa_pair.evaluationPrediction;\r\n        }\r\n    }\r\n    return <WrapDiv><Highlighter autoEscape={true} highlightClassName={highlightClassName} searchWords={searchWords} textToHighlight={props.value || ''} /></WrapDiv>\r\n}\r\nlet renderAnswersCell = function(props) {\r\n    let searchWords = [];\r\n    const highlightClassName = 'highlight-gold';\r\n    const activeQuestionId = this.state.activeQuestions[props.original.passage_id];\r\n    if (activeQuestionId === props.original.query_id) {        \r\n        searchWords = props.original.evaluationAnswers[props.original.maximizingGroundTruthIndex];\r\n    }\r\n    return <Table style={{height: '100%'}} striped>\r\n        <tbody>\r\n            {props.value.map((answer, index) => {\r\n                return <tr key={index}>\r\n                    <td style={{whiteSpace: 'pre-wrap', padding: 0, 'borderTop': 0}}>\r\n                        <WrapDiv><Highlighter autoEscape={true} highlightClassName={highlightClassName} \r\n                            searchWords={props.original.maximizingGroundTruthIndex === index ? searchWords : []} \r\n                            textToHighlight={answer} /></WrapDiv>\r\n                    </td>\r\n                </tr>\r\n            })}\r\n        </tbody>\r\n    </Table>\r\n}\r\nlet renderAnswersTypesCell = function(props) {\r\n    return <Table style={{height: '100%'}} striped>\r\n        <tbody>\r\n            {props.value.map((answerType, index) => \r\n                <tr key={index}>\r\n                    <td style={{whiteSpace: 'pre-wrap', padding: 0, 'borderTop': 0}}>\r\n                        {answerType.value}\r\n                    </td>\r\n                </tr>\r\n            )}\r\n        </tbody>\r\n    </Table>\r\n}\r\n\r\nlet activeQuestionChange = function(rowInfo, e) {\r\n    const passage_id = rowInfo.original.passage_id\r\n    const query_id = rowInfo.original.query_id\r\n\r\n    if (this.state.activeQuestions[passage_id] === query_id) {\r\n        const activeQuestions = {...this.state.activeQuestions};\r\n        delete activeQuestions[passage_id]\r\n        this.setState({\r\n            activeQuestions\r\n        });\r\n    } else {\r\n        this.setState({\r\n            activeQuestions: {\r\n                //...this.state.activeQuestions, // controls whether to allow selection of multiple questions accross different paragrahps\r\n                [passage_id]: query_id\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction fixDecimalPlaces(num, places, convertToPercentage) {\r\n    if (convertToPercentage) {\r\n        num *= 100\r\n    }\r\n    return num !== undefined ? parseFloat((Math.round((num) * Math.pow(10, places)) / Math.pow(10, places)).toFixed(places)) : undefined;\r\n}\r\n\r\nexport default ExplorerTable;\r\n","import React from 'react';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n} from 'reactstrap';\r\nimport { shouldUpdate } from './../Utils';\r\nimport ExplorerSettings from './explorer-settings/ExplorerSettings';\r\nimport ExplorerTable from './explorer-table/ExplorerTable';\r\n\r\nconst props_updateSignals = []\r\nconst state_updateSignals = ['dataset', 'predictions', 'filteredAnswerTypes', 'answerTypeFilterFirstOnly', \r\n                            'answerTypeFilterStrict', 'truncatedFilter', 'untruncatedFilter',\r\n                            'predictionTypes', 'filteredPredictionTypes', 'searchProps', \r\n                            'F1Range', 'EMRange',\r\n                            'navbarSticky', 'isOpen']\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.settingsChange = this.settingsChange.bind(this);\r\n        this.getClearSelectedAnswersFunc = this.getClearSelectedAnswersFunc.bind(this);\r\n        this.getExpandAllFunc = this.getExpandAllFunc.bind(this);\r\n        this.getCollapseAllFunc = this.getCollapseAllFunc.bind(this);\r\n        this.predictionTypesChanged = this.predictionTypesChanged.bind(this);\r\n        this.toggleMenu = this.toggleMenu.bind(this);\r\n        this.state = {\r\n            useLocalDataset: true,\r\n            allowSourceSelection: false,\r\n            filteredAnswerTypes: ['multi_span', 'single_span', 'number', 'date'],\r\n            answerTypeFilterFirstOnly: true,\r\n            answerTypeFilterStrict: false,\r\n            truncatedFilter: true,\r\n            untruncatedFilter: true,\r\n            predictionTypes: [],\r\n            filteredPredictionTypes: [],\r\n            instantSearch: true,\r\n            searchProps: {\r\n                searchText: '',\r\n                filterQuestions: false\r\n            },\r\n            F1Range: { low: 0.0, high: 1.0 },\r\n            EMRange: { low: 0.0, high: 1.0 },\r\n            navbarSticky: undefined, // can be 'top' or undefined\r\n            isOpen: true,\r\n            showNavbarImage: false,\r\n            // ^ startup settings available for configuration\r\n\r\n            dataset: undefined,\r\n            predictions: undefined,\r\n            clearSelectedAnswersFunc: undefined,\r\n            expandAllFunc: undefined,\r\n            collapseAll: undefined\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        const update = shouldUpdate(props_updateSignals, state_updateSignals, \r\n            this.props, this.state, \r\n            nextProps, nextState, \r\n            false, this.constructor.name);\r\n        return update;\r\n    }\r\n\r\n    settingsChange(settings) {\r\n        this.setState({\r\n            filteredAnswerTypes: settings.filteredAnswerTypes,\r\n            answerTypeFilterFirstOnly: settings.answerTypeFilterFirstOnly,\r\n            answerTypeFilterStrict: settings.answerTypeFilterStrict,\r\n            truncatedFilter: settings.truncatedFilter,\r\n            untruncatedFilter: settings.untruncatedFilter,\r\n            filteredPredictionTypes: settings.filteredPredictionTypes,\r\n            searchProps: settings.searchProps,\r\n            dataset: settings.dataset,\r\n            predictions: settings.predictions,\r\n            F1Range: settings.F1Range,\r\n            EMRange: settings.EMRange\r\n        });\r\n    }\r\n    \r\n    getClearSelectedAnswersFunc(func) {\r\n        this.setState({ clearSelectedAnswersFunc: func });\r\n    }\r\n\r\n    getExpandAllFunc(func) {\r\n        this.setState({ expandAllFunc: func });\r\n    }\r\n\r\n    getCollapseAllFunc(func) {\r\n        this.setState({ collapseAllFunc: func });\r\n    }\r\n\r\n    predictionTypesChanged(predictionTypes) {\r\n        this.setState({ predictionTypes });\r\n    }\r\n\r\n    toggleMenu() {\r\n        this.setState({\r\n          isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n                    <Navbar color=\"light\" light sticky={this.state.navbarSticky} \r\n                            style={{borderBottom: '1px solid rgba(0,0,0,0.15)'}}>\r\n                        <div style={{width: '100%'}}>\r\n                            {this.state.showNavbarImage ? \r\n                            <div className='navbar-brand'>\r\n                                {<a target='_blank' rel='noopener noreferrer' href='https://allennlp.org/drop'>\r\n                                    <img style={{paddingRight: '15px', marginBottom: '3px'}} src='https://allennlp.org/assets/allennlp-logo-color.png' height='14' alt='' />\r\n                                </a>}\r\n                                <button className='fakeLink' onClick={() => {this.setState({ navbarSticky: this.state.navbarSticky === 'top' ? undefined : 'top' })}}>DROP Explorer</button>\r\n                            </div> : \r\n                            <NavbarBrand onClick={() => {this.setState({ navbarSticky: this.state.navbarSticky === 'top' ? undefined : 'top' })}}>\r\n                                DROP Explorer\r\n                            </NavbarBrand>}\r\n                            <NavbarToggler style={{float: 'right', marginTop: '0.25rem'}} onClick={this.toggleMenu} />\r\n                        </div>\r\n                        <Collapse isOpen={this.state.isOpen} navbar>\r\n                            <ExplorerSettings onChange={this.settingsChange}\r\n                                useLocalDataset={this.state.useLocalDataset}\r\n                                allowSourceSelection={this.state.allowSourceSelection}\r\n                                expandAllFunc={this.state.expandAllFunc}\r\n                                collapseAllFunc={this.state.collapseAllFunc}\r\n                                filteredAnswerTypes={this.state.filteredAnswerTypes}\r\n                                answerTypeFilterFirstOnly={this.state.answerTypeFilterFirstOnly}\r\n                                answerTypeFilterStrict={this.state.answerTypeFilterStrict}\r\n                                truncatedFilter={this.state.truncatedFilter}\r\n                                untruncatedFilter={this.state.untruncatedFilter}\r\n                                filteredPredictionTypes={this.state.filteredPredictionTypes}\r\n                                predictionTypes={this.state.predictionTypes}\r\n                                instantSearch={this.state.instantSearch}\r\n                                searchProps={this.state.searchProps}\r\n                                F1Range={this.state.F1Range}\r\n                                EMRange={this.state.EMRange}\r\n                                clearSelectedAnswersFunc={this.state.clearSelectedAnswersFunc} />\r\n                        </Collapse>\r\n                    </Navbar>\r\n                    <ExplorerTable \r\n                        dataset={this.state.dataset} \r\n                        predictions={this.state.predictions}\r\n                        filteredAnswerTypes={this.state.filteredAnswerTypes}\r\n                        answerTypeFilterFirstOnly={this.state.answerTypeFilterFirstOnly}\r\n                        answerTypeFilterStrict={this.state.answerTypeFilterStrict}\r\n                        truncatedFilter={this.state.truncatedFilter}\r\n                        untruncatedFilter={this.state.untruncatedFilter}\r\n                        filteredPredictionTypes={this.state.filteredPredictionTypes}\r\n                        searchProps={this.state.searchProps}\r\n                        F1Range={this.state.F1Range}\r\n                        EMRange={this.state.EMRange}\r\n                        sendClearSelectedAnswersFunc={this.getClearSelectedAnswersFunc}\r\n                        sendExpandAllFunc={this.getExpandAllFunc}\r\n                        sendCollapseAllFunc={this.getCollapseAllFunc}\r\n                        onPredictionsTypeChanged={this.predictionTypesChanged}\r\n                    />\r\n                </div>\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './scss/custom.scss';\r\nimport App from './components/app/App';\r\n \r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}