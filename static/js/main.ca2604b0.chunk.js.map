{"version":3,"sources":["api-config.js","model_components/Pane.jsx","model_components/Button.jsx","model_components/ModelIntro.jsx","model/ModelInput.jsx","model/ModelOutput.jsx","model/ModelComponent.jsx","components/Utils.js","components/file_input_button/FileInputButton.jsx","components/app/explorer-settings/dataset-loader/DatasetLocalSelector.jsx","components/app/explorer-settings/dataset-loader/DatasetListSelector.jsx","components/app/explorer-settings/dataset-loader/DatasetLoader.jsx","components/app/explorer-settings/PredictionsLoader.jsx","components/app/AnswersUtils.js","components/app/explorer-settings/SearchFilter.jsx","components/checkbox_list/CheckboxList.jsx","components/app/explorer-settings/ExplorerSettings.jsx","components/app/explorer-table/WrapDiv.jsx","components/app/explorer-table/DataUtils.js","components/app/explorer-table/ExplorerTable.jsx","components/app/App.jsx","index.js"],"names":["origin","window","location","API_ROOT","includes","replace","ResultDisplay","outputContent","outputState","this","props","placeholderTemplate","message","react_default","a","createElement","className","concat","xlinkHref","children","React","Component","PaneRight","_React$Component2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","Pane_ResultDisplay","PaneLeft","_React$Component3","Button","_this$props","enabled","onClick","type","disabled","ModelIntro","title","description","examples","passage","question","ModelInput","_this","call","handleListChange","bind","assertThisInitialized","e","target","runModel","_this2","model_components_ModelIntro","onChange","map","example","index","substring","summarizeExample","ref","x","model_components_Button","ModelOutput","answer","outputs","JSON","stringify","ModelComponent","state","responseData","inputs","setState","fetch","method","headers","Accept","Content-Type","body","then","response","json","catch","error","console","_this$state","Pane_PaneLeft","model_ModelInput","Pane_PaneRight","model_ModelOutput","mapToArray","key_name","keys","intersect","dataArr","accessor","transformToSingle","pointers","Array","length","intersection","maxIndex","agreements","i","data","currentIndex","item","reduce","sameItems","push","isChanged","changeSignals","obj","otherObj","debug","sourceName","changes","changeSignal","changed","log","join","shouldUpdate","props_updateSignals","state_updateSignals","nextProps","nextState","componentName","propsUpdated","stateUpdated","displayIndexesToViewIndex","displayIndexes","page","pageSize","returnObject","undefined","acuumulator","displayIndex","viewIndex","Math","floor","displayIndexToViewIndex","viewIndexToDisplayIndex","FileInputButton","fileInputRef","createRef","simulateClick","change","file","prevProps","prevState","current","click","files","selectedFile","style","display","id","accept","es_Button","color","size","text","name","PureComponent","DatasetLocalSelector","dataset","reader","FileReader","onloadend","array","parse","result","readAsText","file_input_button_FileInputButton","width","DatasetListSelector","toggle","dropdownOpen","datasets_names","selected","mounted","getDatasetList","getDataset","currentTarget","getAttribute","dataset_name","_this3","encodeURIComponent","_this4","Dropdown","isOpen","DropdownToggle","caret","DropdownMenu","DropdownItem","dataset-name","DatasetSelector","local","dataset_loader_DatasetLocalSelector","dataset_loader_DatasetListSelector","DatasetLoader","useLocalDatasetChange","datasetChange","useLocalDataset","onDatasetChange","toString","ListGroup","ListGroupItem","FormGroup","check","Label","Input","use-local-dataset","checked","PredictionsLoader","predictions","split","forEach","line","nonAnswerType","answerTypes","predictionTypes","getAnswerType","answerDict","answerType","span_count","date","day","month","year","getAnswerField","answerField","getAnswerForDisplay","raw_value","isArray","toConsumableArray","sort","Number","answerAccessor","qa_pair","answerTypeAccessor","predictionAccessor","prediction","predictionTypeAccessor","spans","prepareText","toLowerCase","SearchFilter","searchTextChange","filterQuestionsChange","submit","_objectSpread","searchProps","draftSearchText","draftFilterQuestions","filterQuestions","searchText","event","newState","instantSearch","filter-questions","CheckboxList","newChecked","changedKey","changedKeyIndex","indexOf","splice","options","option","option-key","ExplorerSettings","predictionsChange","filteredAnswerTypesChange","filteredPredictionTypesChange","searchFilterChange","filteredAnswerTypes","filteredPredictionTypes","constructor","Container","fluid","CardGroup","Card","CardHeader","CardBody","dataset_loader_DatasetLoader","expandAllFunc","collapseAllFunc","clearSelectedAnswersFunc","checkbox_list_CheckboxList","explorer_settings_SearchFilter","explorer_settings_PredictionsLoader","WrapDiv","styled","div","_templateObject","process_row","accumulator","row","passage_id","passage_displayIndex","reduced","qa_pairs","process_qa_pair","hasValidatedAnswers","query_id_to_displayIndex","reduced_row","DataUtils_objectSpread","passage_index","passage_id_to_displayIndex","passage_id_to_queries_displayIndexes","query_index","query_displayIndex","validated_answers","query_id","filterDataHelper","internals","filteredDataPerFilter","Boolean","search","searchReudcer_rows","filteredData","hasValidPredictions","answerTypeFilterReudcer_rows","filteredDataArr","values","filter","filtersCount","every","intersectRows","intersectFilteredData","sameRows","filtered_qa_pairs","sameQuestions","assign","passageTextSearchValid","hasTextSearchValidQuestions","isQuestionTextSearchValid","some","hasQuestions","displayedAnswer","displayedPrediction","answerTypeFilterReudcer_qa_pairs","filterByAnswerType_qa_pair","initialInternals","sortedData","initialState","passagesPageSize","questionsPageSize","expanded_passage_ids","activeQuestions","questionResized","questionSorted","filterProps","ExplorerTable","renderPassageCell","renderHighlightableQuestionCell","activeQuestionChange","clearSelectedAnswers","expandAll","collapseAll","expandedChange","getExpanded","questionResizedChange","processData","filterData","getSortedData","pageChanged","passagesPageSizeChanged","questionsPageSizeChanged","passageSortedChange","questionSortedChange","setInternals","cloneDeep","tableRef","newInternals","sendClearSelectedAnswersFunc","sendExpandAllFunc","sendCollapseAllFunc","filteredAnswerTypesChanged","filteredPredictionTypesChanged","searchPropsChanged","refilteringRequired","forceUpdate","newSorted","column","additive","newExpanded","matchingPosition","defaultExpanded","set","otherSet","has","areSetsEqual","Set","viewIndexes","viewIndexToDisplayIndexes","newResized","_processDataHelper","loss","f1","processDataHelper","_filterDataHelper","getResolvedState","time","timeEnd","passage_columns","Header","Cell","qa_columns","show","main_answer","answers","Table","striped","whiteSpace","padding","borderTop","questionsCount","predictedCount","j","toLocaleString","es","columns","minRows","showPaginationTop","showPaginationBottom","pageSizeOptions","onPageChange","onPageSizeChange","collapseOnSortingChange","collapseOnPageChange","collapseOnDataChange","onSortedChange","expanded","onExpandedChange","SubComponent","original","sorted","resized","onResizedChange","showPagination","getTrProps","rowInfo","instance","handleOriginal","searchWords","categoryPerSearchWordIndex","highlightClassNamePerCategory","activeQuestionId","find","selectedAnswer","number","searchWord","gold_0","_searchWords","_categoryPerSearchWor","explorer_table_WrapDiv","main_default","textToHighlight","highlightClassName","ExplorerTable_objectSpread","defineProperty","App","settingsChange","getClearSelectedAnswersFunc","getExpandAllFunc","getCollapseAllFunc","toggleMenu","navbarSticky","settings","func","Navbar","light","sticky","borderBottom","NavbarBrand","NavbarToggler","Collapse","navbar","explorer_settings_ExplorerSettings","explorer_table_ExplorerTable","hash","vars","hashes","href","slice","getUrlVars","ReactDOM","render","model_ModelComponent","document","getElementById","app_App"],"mappings":"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","file":"static/js/main.ca2604b0.chunk.js","sourcesContent":["/**\r\n * The backend always runs on port 8000. In production we also\r\n * serve the frontend from there. However, for development\r\n * we want to `npm run serve` the unminified js on port 3000.\r\n * This allows us to get the correct API root either way.\r\n */\r\n\r\nlet apiRoot;\r\n\r\nconst origin = window && window.location && window.location.origin;\r\n\r\nif (origin.includes(':3000')) {\r\n    apiRoot = origin.replace(\":3000\", \":8000\");\r\n} else {\r\n    apiRoot = origin;\r\n}\r\n\r\nexport const API_ROOT = apiRoot;\r\n","import React from 'react';\r\n\r\n\r\n/*******************************************************************************\r\n  <ResultDisplay /> Component\r\n*******************************************************************************/\r\n\r\nclass ResultDisplay extends React.Component {\r\n\r\n    render() {\r\n      const { outputState } = this.props;\r\n\r\n      const placeholderTemplate = (message) => {\r\n        return (\r\n          <div className=\"placeholder\">\r\n            <div className=\"placeholder__content\">\r\n              <svg className={`placeholder__${outputState}`}>\r\n                <use xlinkHref={`#icon__${outputState}`}></use>\r\n              </svg>\r\n              {message !== \"\" ? (\r\n                <p>{message}</p>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      let outputContent;\r\n      switch (outputState) {\r\n        case \"working\":\r\n          outputContent = placeholderTemplate(\"\");\r\n          break;\r\n        case \"received\":\r\n          outputContent = this.props.children;\r\n          break;\r\n        case \"error\":\r\n          outputContent = placeholderTemplate(\"Something went wrong. Please try again.\");\r\n          break;\r\n        default:\r\n          // outputState = \"empty\"\r\n          outputContent = placeholderTemplate(\"Run model to view results\");\r\n      }\r\n\r\n      return (\r\n        <div className={`pane__right model__output ${outputState !== \"received\" ? \"model__output--empty\" : \"\"}`}>\r\n          <div className=\"pane__thumb\"></div>\r\n          {outputContent}\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n  <PaneRight /> Component\r\n*******************************************************************************/\r\n\r\nexport class PaneRight extends React.Component {\r\n    render() {\r\n      const { outputState } = this.props;\r\n\r\n      return (\r\n        <ResultDisplay outputState={outputState}>\r\n          {this.props.children}\r\n        </ResultDisplay>\r\n      )\r\n    }\r\n}\r\n\r\n/*******************************************************************************\r\n<PaneLeft /> Component\r\n*******************************************************************************/\r\n\r\nexport class PaneLeft extends React.Component {\r\n\r\n    render () {\r\n      return (\r\n        <div className=\"pane__left model__input\">\r\n          {this.props.children}\r\n        </div>\r\n      );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\n/*******************************************************************************\r\n  <Button /> Component\r\n*******************************************************************************/\r\n\r\nclass Button extends React.Component {\r\n  render() {\r\n    const { enabled, onClick } = this.props;\r\n\r\n    return (\r\n    <button type=\"button\" disabled={!enabled} className=\"btn btn--icon-disclosure\" onClick={onClick}>Run\r\n      <svg>\r\n        <use xlinkHref=\"#icon__disclosure\"></use>\r\n      </svg>\r\n    </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\n\r\n\r\n/*******************************************************************************\r\n  <ModelIntro /> Component\r\n*******************************************************************************/\r\n\r\nclass ModelIntro extends React.Component {\r\n    render() {\r\n\r\n      const { title, description } = this.props;\r\n\r\n      return (\r\n        <div>\r\n          <h2>\r\n            <span>{title}</span>\r\n          </h2>\r\n          <p>{description}</p>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default ModelIntro;\r\n","import React from 'react';\r\nimport Button from '../model_components/Button'\r\nimport ModelIntro from '../model_components/ModelIntro'\r\n\r\n\r\n// TODO: These are some quickly-accessible examples to try out with your model.  They will get\r\n// added to the select box on the demo page, and will auto-populate your input fields when they\r\n// are selected.  The names here need to match what's read in `handleListChange` below.\r\n\r\nconst examples = [\r\n  {\r\n    passage: \"passage for example 1\",\r\n    question: \"question for example 1\"\r\n  },\r\n  {\r\n    passage: \"passage for example 2\",\r\n    question: \"question for example 2\"\r\n  },\r\n  {\r\n    passage: \"passage for example 3\",\r\n    question: \"question for example 3\"\r\n  }\r\n];\r\n\r\n// TODO: This determines what text shows up in the select box for each example.  The input to\r\n// this function will be one of the items from the `examples` list above.\r\nfunction summarizeExample(example) {\r\n  return example.passage.substring(0, 60);\r\n}\r\n\r\n// TODO: You can give a model name and description that show up in your demo.\r\nconst title = \"Your Model Name\";\r\nconst description = (\r\n  <span>\r\n  If you want a description of what this demo is showing, you can put that here.  Or just leave this\r\n  description empty if you don't need it.\r\n  </span>\r\n);\r\n\r\nclass ModelInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleListChange = this.handleListChange.bind(this);\r\n    this.onClick = this.onClick.bind(this);\r\n  }\r\n\r\n  handleListChange(e) {\r\n    if (e.target.value !== \"\") {\r\n      // TODO: This gets called when the select box gets changed.  You want to set the values of\r\n      // your input boxes with the content in your examples.\r\n      this.passage.value = examples[e.target.value].passage\r\n      this.question.value = examples[e.target.value].question\r\n    }\r\n  }\r\n\r\n  onClick() {\r\n    const { runModel } = this.props;\r\n\r\n    // TODO: You need to map the values in your input boxes to json values that get sent to your\r\n    // predictor.  The keys in this dictionary need to match what your predictor is expecting to receive.\r\n    runModel({passage: this.passage.value, question: this.question.value});\r\n  }\r\n\r\n  render() {\r\n\r\n    const { outputState } = this.props;\r\n\r\n    return (\r\n      <div className=\"model__content\">\r\n        <ModelIntro title={title} description={description} />\r\n        <div className=\"form__instructions\"><span>Enter text or</span>\r\n          <select disabled={outputState === \"working\"} onChange={this.handleListChange}>\r\n              <option value=\"\">Choose an example...</option>\r\n              {examples.map((example, index) => {\r\n                return (\r\n                    <option value={index} key={index}>{summarizeExample(example) + \"...\"}</option>\r\n                );\r\n              })}\r\n          </select>\r\n        </div>\r\n\r\n       {/*\r\n         * TODO: This is where you add your input fields.  You shouldn't have to change any of the\r\n         * code in render() above here.  We're giving a couple of example inputs here, one for a\r\n         * larger piece of text, like a paragraph (the `textarea`) and one for a shorter piece of\r\n         * text, like a question (the `input`).  You'll probably want to change the variable names\r\n         * here to match the input variable names in your model.\r\n         */}\r\n\r\n        <div className=\"form__field\">\r\n          <label>Passage</label>\r\n          <textarea ref={(x) => this.passage = x} type=\"text\"></textarea>\r\n        </div>\r\n        <div className=\"form__field\">\r\n          <label>Question</label>\r\n          <input ref={(x) => this.question = x} type=\"text\"/>\r\n        </div>\r\n\r\n       {/* You also shouldn't have to change anything below here. */}\r\n\r\n        <div className=\"form__field form__field--btn\">\r\n          <Button enabled={outputState !== \"working\"} onClick={this.onClick} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModelInput;\r\n","import React from 'react';\r\n\r\nclass ModelOutput extends React.Component {\r\n  render() {\r\n\r\n    const { outputs } = this.props;\r\n\r\n    // TODO: `outputs` will be the json dictionary returned by your predictor.  You can pull out\r\n    // whatever you want here and visualize it.  We're giving some examples of different return\r\n    // types you might have.  Change names for data types you want, and delete anything you don't\r\n    // need.\r\n    var answer = outputs['answer'];\r\n\r\n    return (\r\n      <div className=\"model__content\">\r\n\r\n       {/*\r\n         * TODO: This is where you display your output.  You can show whatever you want, however\r\n         * you want.  We've got a few examples, of text-based output, and of visualizing model\r\n         * internals using heat maps.\r\n         */}\r\n\r\n        <div className=\"form__field\">\r\n          <label>Answer</label>\r\n          <div className=\"model__content__summary\"><pre>{ JSON.stringify(answer, null, 2) }</pre></div>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModelOutput;\r\n","import React from 'react';\r\nimport { API_ROOT } from '../api-config';\r\nimport {PaneLeft, PaneRight} from '../model_components/Pane'\r\nimport ModelInput from './ModelInput'\r\nimport ModelOutput from './ModelOutput'\r\n\r\n\r\nclass ModelComponent extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        outputState: \"empty\",  // valid values: \"working\", \"empty\", \"received\", \"error\"\r\n        responseData: null\r\n      };\r\n\r\n      this.runModel = this.runModel.bind(this);\r\n    }\r\n\r\n    runModel(inputs) {\r\n      this.setState({outputState: \"working\"});\r\n\r\n      fetch(`${API_ROOT}/predict`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(inputs)\r\n      }).then((response) => {\r\n        return response.json();\r\n      }).then((json) => {\r\n        this.setState({responseData: json, outputState: 'received'})\r\n      }).catch((error) => {\r\n        console.error(error);\r\n        this.setState({outputState: \"error\"});\r\n      });\r\n    }\r\n\r\n    render() {\r\n      const { outputState, responseData } = this.state;\r\n\r\n      return (\r\n        <div className=\"pane-container\">\r\n          <div className=\"pane model\">\r\n            <PaneLeft>\r\n              <ModelInput runModel={this.runModel} outputState={this.state.outputState}/>\r\n            </PaneLeft>\r\n            <PaneRight outputState={outputState}>\r\n              <ModelOutput outputs={responseData}/>\r\n            </PaneRight>\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n    }\r\n}\r\n\r\nexport default ModelComponent;\r\n","export function mapToArray(json, key_name) {\r\n    return Object.keys(json).map(function(key) {\r\n        json[key][key_name] = key;\r\n        return json[key];\r\n    });\r\n}\r\n\r\nexport function intersect(dataArr, accessor, transformToSingle) {\r\n    const pointers = Array.apply(null, {length: dataArr.length}).map(() => 0);\r\n\r\n    const intersection = [];\r\n    let maxIndex = 0;\r\n    let agreements = 0;\r\n    while (true) {\r\n        while (agreements < dataArr.length) {\r\n            for (let i=0; i < dataArr.length; i++) {\r\n                const data = dataArr[i];\r\n        \r\n                let currentIndex = accessor(data[pointers[i]]);\r\n                while (currentIndex < maxIndex) {\r\n                    pointers[i]++;\r\n                    if (pointers[i] === data.length) {\r\n                        return intersection;\r\n                    }\r\n    \r\n                    currentIndex = accessor(data[pointers[i]]);\r\n                }\r\n                if (currentIndex > maxIndex) {\r\n                    maxIndex = currentIndex;\r\n                    agreements = 1;\r\n                } else {\r\n                    agreements++;\r\n                }\r\n            }\r\n        }\r\n\r\n        let sameItems = dataArr.reduce((sameItems, data, i) => {\r\n            sameItems.push(data[pointers[i]])\r\n            return sameItems;\r\n        }, [])\r\n\r\n        let item = transformToSingle(sameItems);\r\n        if (item) {\r\n            intersection.push(item);\r\n        }\r\n        maxIndex += 1;\r\n        agreements = 0;\r\n    }\r\n}\r\n\r\nexport function areSetsEqual(set, otherSet) {\r\n    if (set.size !== otherSet.size) return false;\r\n    for (let item in set) {\r\n        if (!otherSet.has(item)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function isChanged(changeSignals, obj, otherObj, debug, sourceName) {\r\n    const changes = []\r\n    for (let i = 0; i < changeSignals.length; i++) {\r\n        const changeSignal = changeSignals[i];\r\n        if (obj[changeSignal] !== otherObj[changeSignal]) {\r\n            if (debug) {\r\n                changes.push(changeSignal);\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    if (debug) {\r\n        let changed = changes.length > 0;\r\n\r\n        if (changed) {\r\n            console.log(`${sourceName} Caused update: ${changes.join(', ')}`);\r\n        }\r\n        return changed;\r\n    }\r\n}\r\n\r\nexport function shouldUpdate(props_updateSignals, state_updateSignals, props, state, nextProps, nextState, debug, componentName) {\r\n    \r\n    const propsUpdated = isChanged(props_updateSignals, props, nextProps, debug, `[${componentName}][props]`)\r\n    const stateUpdated = isChanged(state_updateSignals, state, nextState, debug, `[${componentName}][state]`)\r\n\r\n    return propsUpdated || stateUpdated;\r\n}\r\n\r\nexport function displayIndexToViewIndex(displayIndex, page, pageSize) {\r\n    if (Math.floor(displayIndex / pageSize) === page) {\r\n        const viewIndex = displayIndex % pageSize;\r\n        return viewIndex;\r\n    }\r\n}\r\n\r\nexport function displayIndexesToViewIndex(displayIndexes, page, pageSize, returnObject=false) {\r\n    return displayIndexes.reduce((acuumulator, displayIndex) => {\r\n        const viewIndex = displayIndexToViewIndex(displayIndex, page, pageSize)\r\n        if (viewIndex !== undefined) {\r\n            if (returnObject) {\r\n                acuumulator[viewIndex] = true;\r\n            } else {\r\n                acuumulator.push(viewIndex)\r\n            }\r\n        }\r\n        return acuumulator;\r\n    }, returnObject ? {} : []);\r\n}\r\n\r\nexport function viewIndexToDisplayIndex(viewIndex, page, pageSize) {\r\n    const displayIndex = (pageSize * page) + viewIndex;\r\n    return displayIndex;\r\n}\r\n\r\nexport function viewIndexToDisplayIndexes(viewIndexes, page, pageSize, returnObject=false) {\r\n    return viewIndexes.reduce((acuumulator, viewIndex) => {\r\n        const displayIndex = viewIndexToDisplayIndex(viewIndex, page, pageSize)\r\n        if (returnObject) {\r\n            acuumulator[displayIndex] = true;\r\n        } else {\r\n            acuumulator.push(displayIndex)\r\n        }\r\n        return acuumulator;\r\n    }, returnObject ? {} : []);\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Button\r\n} from 'reactstrap';\r\n\r\nclass FileInputButton extends React.PureComponent {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.fileInputRef = React.createRef();\r\n\t\tthis.simulateClick = this.simulateClick.bind(this);\r\n\t\tthis.change = this.change.bind(this);\r\n\t\tthis.state = {\r\n\t\t\tfile: undefined\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tif (prevState.file !== this.state.file) {\r\n\t\t\tthis.props.onChange(this.state.file);\r\n\t\t}\r\n\t}\r\n\r\n\tsimulateClick() {\r\n\t\tthis.fileInputRef.current.click();\r\n\t}\r\n\r\n    change(files) {\r\n\t\tlet selectedFile;\r\n        if (files.length > 0) {\r\n            const file = files[0]\r\n            if (file) {\r\n\t\t\t\tselectedFile = file;\r\n            }\r\n\t\t}\r\n\r\n\t\tthis.setState({ \r\n\t\t\tfile: selectedFile\r\n\t\t});\r\n    }\r\n\r\n  \trender() {      \r\n\t\treturn <div>\r\n\t\t\t<input ref={this.fileInputRef} style={{'display': 'none'}} type='file' id='file' accept={this.props.accept} onChange={ (e) => this.change(e.target.files) } />\r\n\t\t\t<Button style={this.props.style} color={this.props.color} size={this.props.size} onClick={this.simulateClick}>\r\n\t\t\t\t{this.props.text}\r\n\t\t\t</Button>\r\n\t\t\t{this.state.file ? this.state.file.name : ''}\r\n\t\t</div>\r\n  }\r\n}\r\n\r\nexport default FileInputButton;\r\n","import React from 'react';\r\nimport { mapToArray } from '../../../Utils'\r\nimport FileInputButton from '../../../file_input_button/FileInputButton';\r\n\r\nclass DatasetLocalSelector extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.change = this.change.bind(this);\r\n        this.state = {\r\n            dataset: undefined\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.dataset !== this.state.dataset) {\r\n            this.props.onChange(this.state.dataset);\r\n        }\r\n    }\r\n\r\n    change(file) {\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onloadend = (e) => {\r\n                const array = mapToArray(JSON.parse(e.target.result), 'passage_id');\r\n                this.setState({ \r\n                    dataset: array \r\n                });\r\n            };\r\n            reader.readAsText(file);\r\n        } else {\r\n            this.setState({ \r\n                dataset: undefined \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <FileInputButton accept='.json' text='Choose File' size='md' color='primary' style={{width: '100%'}}\r\n                onChange={this.change}/>\r\n    }\r\n}\r\n\r\nexport default DatasetLocalSelector;\r\n","import React from 'react';\r\nimport { API_ROOT } from '../../../../api-config';\r\nimport { mapToArray } from '../../../Utils';\r\nimport {\r\n    Dropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem\r\n} from 'reactstrap';\r\n\r\nclass DatasetListSelector extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggle = this.toggle.bind(this);\r\n        this.change = this.change.bind(this);\r\n        this.state = {\r\n            dropdownOpen: false,\r\n            datasets_names: [],\r\n            selected: undefined\r\n        };\r\n    }\r\n\r\n    toggle() {\r\n        this.setState(prevState => ({\r\n          dropdownOpen: !prevState.dropdownOpen\r\n        }));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.mounted = true;\r\n        this.getDatasetList();\r\n    }\r\n    \r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.selected !== this.state.selected) {\r\n            this.props.onChange(undefined);\r\n            this.getDataset(this.state.selected);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.mounted = false;\r\n    }\r\n\r\n    change(e) {\r\n        this.setState({selected: e.currentTarget.getAttribute(\"dataset-name\")});\r\n    }\r\n\r\n    getDatasetList() {\r\n        fetch(`${API_ROOT}/dataset-list`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            } \r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((json) => {\r\n            if (this.mounted) {\r\n                this.setState({datasets_names: json, selected: json.length > 0 ? json[0] : undefined})\r\n            }\r\n        }).catch((error) => {\r\n            console.error(error);\r\n        });\r\n    }\r\n\r\n    getDataset(dataset_name) {\r\n        if (dataset_name) {\r\n\r\n            fetch(`${API_ROOT}/dataset?name=${encodeURIComponent(dataset_name)}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                } \r\n            }).then((response) => {\r\n                return response.json();\r\n            }).then((json) => {\r\n                const array = mapToArray(json, 'passage_id')\r\n                this.props.onChange(array);\r\n            }).catch((error) => {\r\n                console.error(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const datasets_names = this.state.datasets_names;\r\n\r\n        return (\r\n          <Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggle}>\r\n            <DropdownToggle color=\"primary\" caret style={{width: '100%'}}>\r\n                {this.state.selected ? this.state.selected : \"Select...\"}\r\n            </DropdownToggle>\r\n            <DropdownMenu>\r\n                {datasets_names.map(dataset_name => <DropdownItem onClick={this.change} key={dataset_name} dataset-name={dataset_name}>{dataset_name}</DropdownItem>)}\r\n            </DropdownMenu>\r\n          </Dropdown>\r\n        );\r\n      }\r\n}\r\n\r\nexport default DatasetListSelector;\r\n","import React from 'react';\r\nimport DatasetLocalSelector from './DatasetLocalSelector';\r\nimport DatasetListSelector from './DatasetListSelector';\r\nimport {\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Input,\r\n    FormGroup,\r\n    Label\r\n} from 'reactstrap';\r\n\r\nclass DatasetLoader extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.useLocalDatasetChange = this.useLocalDatasetChange.bind(this);\r\n        this.datasetChange = this.datasetChange.bind(this);\r\n        this.state = {\r\n            dataset: undefined,\r\n            useLocalDataset: this.props.useLocalDataset\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.dataset !== this.state.dataset) {\r\n            this.props.onDatasetChange(this.state.dataset);\r\n        }\r\n    }\r\n\r\n    useLocalDatasetChange(e) {\r\n        this.setState({ \r\n            useLocalDataset: e.currentTarget.getAttribute('use-local-dataset') !== true.toString(),\r\n            dataset: undefined\r\n        });\r\n    }\r\n\r\n    datasetChange(dataset) {\r\n        this.setState({ dataset: dataset })\r\n    }\r\n\r\n    render() {\r\n        return <ListGroup>\r\n                <ListGroupItem>\r\n                    <FormGroup check>\r\n                        <Label check>\r\n                            <Input type=\"checkbox\" \r\n                            onChange={this.useLocalDatasetChange}\r\n                            use-local-dataset={(this.state.useLocalDataset && \r\n                                this.state.useLocalDataset.toString()) || false.toString()} \r\n                            checked={this.state.useLocalDataset || false} \r\n                            />Use Local Dataset\r\n                        </Label>\r\n                    </FormGroup>\r\n                </ListGroupItem>\r\n                <ListGroupItem>\r\n                    <DatasetSelector onChange={this.datasetChange} local={this.state.useLocalDataset}/>\r\n                </ListGroupItem>\r\n            </ListGroup>\r\n    }\r\n}\r\n\r\nfunction DatasetSelector(props) {\r\n    if (props.local) {\r\n        return <DatasetLocalSelector onChange={props.onChange} />\r\n    }\r\n    return <DatasetListSelector onChange={props.onChange} />\r\n}\r\n\r\nexport default DatasetLoader;\r\n","import React from 'react';\r\nimport FileInputButton from '../../file_input_button/FileInputButton';\r\n\r\nclass PredictionsLoader extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.change = this.change.bind(this);\r\n        this.state = {\r\n            predictions: undefined\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.predictions !== this.state.predictions) {\r\n            this.props.onChange(this.state.predictions);\r\n        }\r\n    }\r\n\r\n    change(file) {\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onloadend = (e) => {\r\n                const predictions = [];\r\n                e.target.result.split('\\n').forEach(line => {\r\n                    if (line) {\r\n                        predictions.push(JSON.parse(line));\r\n                    }\r\n                });\r\n                this.setState({ \r\n                    predictions: predictions \r\n                });\r\n            };\r\n            reader.readAsText(file);\r\n        } else {\r\n            this.setState({ \r\n                predictions: undefined \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <FileInputButton accept='.json, .jsonl' text='Choose File' size='md' color='primary' style={{width: '100%'}}\r\n        onChange={this.change}/>\r\n    }\r\n}\r\n\r\nexport default PredictionsLoader;\r\n","\r\nexport const nonAnswerType = {'key': 'none', 'value': 'None'};\r\nexport const answerTypes = [\r\n    {'key': 'multi_span', 'value': 'Multi Span'},\r\n    {'key': 'single_span', 'value': 'Single Span'},\r\n    {'key': 'number', 'value': 'Number'},\r\n    {'key': 'date', 'value': 'Date'}\r\n];\r\nexport const predictionTypes = [\r\n    ...answerTypes,\r\n    nonAnswerType\r\n];\r\n\r\nexport function getAnswerType(answerDict) {\r\n    let answerType = nonAnswerType;\r\n\r\n    const span_count = answerDict['spans'].length\r\n    if (span_count > 0) {\r\n        if (span_count === 1) {\r\n            answerType = 'single_span'\r\n        } else {\r\n            answerType = 'multi_span'\r\n        }\r\n    }\r\n    else if (answerDict['number']) {\r\n        answerType = 'number'\r\n    } else {\r\n        const date = answerDict['date']\r\n        if (date && (date.day || date.month || date.year)) {\r\n            answerType = 'date';\r\n        }\r\n    }\r\n    return answerType;\r\n}\r\n\r\nexport function getAnswerField(answerDict) {\r\n    let answerField = null;\r\n\r\n    const span_count = answerDict['spans'].length\r\n    if (span_count > 0) {\r\n        answerField = {key: 'spans', name: span_count > 1 ? 'Multi Span' : 'Single Span'}\r\n    }\r\n    else if (answerDict['number']) {\r\n        answerField = {key: 'number', name: 'Number'};\r\n    } else {\r\n        const date = answerDict['date']\r\n        if (date && (date.day || date.month || date.year)) {\r\n            answerField = {key: 'date', name: 'Date'};\r\n        }\r\n    }\r\n\r\n    return answerField;\r\n}\r\n\r\nexport function getAnswerForDisplay(raw_value) {\r\n    let value = raw_value;\r\n    if (Array.isArray(value) && value.length === 1) {\r\n        value = value[0];\r\n    } else if (typeof value === 'object') {\r\n        if (Array.isArray(value)) {\r\n            value = [...value].sort()\r\n        }\r\n        value = JSON.stringify(value, null, 2);\r\n    } else {\r\n        value = Number(value)\r\n    }\r\n    return value;\r\n}\r\n\r\nexport function answerAccessor(qa_pair) {\r\n    const answer = qa_pair.answer;\r\n    const answerField = getAnswerField(answer); \r\n    if (answerField) {\r\n        return getAnswerForDisplay(answer[answerField.key]).toString();\r\n    }\r\n    return '';\r\n}\r\n\r\nexport function answerTypeAccessor(qa_pair) {\r\n    const answerField = getAnswerField(qa_pair.answer);\r\n    if (answerField) {\r\n        return answerField.name;\r\n    }\r\n    return '';\r\n}\r\n\r\nexport function predictionAccessor(qa_pair) {\r\n    const prediction = qa_pair.prediction;\r\n    if (prediction) {\r\n        return getAnswerForDisplay(qa_pair.prediction).toString();\r\n    }\r\n    return '';\r\n}\r\nexport function predictionTypeAccessor(qa_pair) {\r\n    const prediction = qa_pair.prediction;\r\n    if (prediction) {\r\n        const answerField = getAnswerField({'spans': prediction});\r\n        if (answerField) {\r\n            return answerField.name;\r\n        }\r\n    }\r\n    return '';\r\n}","import React from 'react';\r\nimport {\r\n    Input,\r\n    FormGroup,\r\n    Label,\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Button\r\n} from 'reactstrap';\r\n\r\nclass SearchFilter extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchTextChange = this.searchTextChange.bind(this);\r\n        this.filterQuestionsChange = this.filterQuestionsChange.bind(this);\r\n        this.submit = this.submit.bind(this);\r\n        this.state = { \r\n            ...this.props.searchProps,\r\n            draftSearchText: '',\r\n            draftFilterQuestions: this.props.searchProps.filterQuestions\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.searchText !== this.state.searchText || \r\n            prevState.filterQuestions !== this.state.filterQuestions) {\r\n            this.props.onChange({\r\n                searchText: this.state.searchText,\r\n                filterQuestions: this.state.filterQuestions\r\n            });\r\n        }\r\n    }\r\n\r\n    searchTextChange(event) {\r\n        const newState = { draftSearchText: event.target.value }\r\n        if (this.props.instantSearch) {\r\n            newState.searchText = prepareText(newState.draftSearchText);\r\n        }\r\n        this.setState(newState);\r\n    }\r\n\r\n    filterQuestionsChange(e) {\r\n        const filterQuestions = e.currentTarget.getAttribute('filter-questions') !== true.toString();\r\n        const newState = { draftFilterQuestions: filterQuestions }\r\n        if (this.props.instantSearch) {\r\n            newState.filterQuestions = newState.draftFilterQuestions;\r\n        }\r\n        this.setState(newState);\r\n    }\r\n\r\n    submit(event) {\r\n        this.setState({ \r\n            searchText: prepareText(this.state.draftSearchText),\r\n            filterQuestions: this.state.draftFilterQuestions\r\n        });\r\n    }\r\n\r\n    render() { \r\n            return <div>\r\n                <ListGroup>\r\n                    <ListGroupItem>\r\n                        <Input type='text' id='searchBox' value={this.state.draftSearchText} onChange={this.searchTextChange} />\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                        <FormGroup check>\r\n                            <Label check>\r\n                                <Input type=\"checkbox\" \r\n                                onChange={this.filterQuestionsChange}\r\n                                filter-questions={(this.state.draftFilterQuestions && \r\n                                    this.state.draftFilterQuestions.toString()) || false.toString()} \r\n                                checked={this.state.draftFilterQuestions || false} \r\n                                />Filter Questions\r\n                            </Label>\r\n                        </FormGroup>\r\n                    </ListGroupItem>\r\n                </ListGroup>\r\n                {!this.props.instantSearch ? \r\n                <ListGroup className='list-group-horizontal mt-1'>\r\n                    <ListGroupItem style={{width: '100%'}}>\r\n                        Searched{this.state.filterQuestions ? ' (Filter Questions)': ''}: <span className='text-info'>{this.state.searchText}</span>\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                        <Button color='primary' onClick={this.submit}>Submit</Button>\r\n                    </ListGroupItem>\r\n                </ListGroup> : null}\r\n            </div>;\r\n    }\r\n}\r\n\r\nfunction prepareText(text) {\r\n    return text.toLowerCase();\r\n}\r\n\r\nexport default SearchFilter;","import React from 'react';\r\nimport {\r\n    Input,\r\n    FormGroup,\r\n    Label\r\n} from 'reactstrap';\r\n\r\nclass CheckboxList extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.change = this.change.bind(this);\r\n        this.state = { \r\n            checked: this.props.checked\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        this.props.onChange(this.state.checked);\r\n    }\r\n\r\n    change(e) {\r\n        const changedKey = e.currentTarget.getAttribute('option-key');\r\n        const changedKeyIndex = this.state.checked.indexOf(changedKey);\r\n        let newChecked;\r\n        if (changedKeyIndex !== -1) {\r\n            newChecked = [...this.state.checked];\r\n            newChecked.splice(changedKeyIndex, 1);\r\n        } else {\r\n            newChecked = [...this.state.checked, changedKey];\r\n        }\r\n        this.setState({ checked: newChecked });\r\n    }\r\n\r\n    render() {\r\n        return this.props.options.map(option => {\r\n            return <FormGroup check key={option.key}>\r\n                        <Label check>\r\n                            <Input type=\"checkbox\" \r\n                            onChange={this.change}\r\n                            option-key={option.key}\r\n                            checked={(this.state.checked && \r\n                                this.state.checked.includes(option.key)) || \r\n                                false} \r\n                            />{option.value}\r\n                        </Label>\r\n                    </FormGroup>\r\n        });\r\n    }\r\n}\r\n \r\nexport default CheckboxList;","import React from 'react';\r\nimport DatasetLoader from './dataset-loader/DatasetLoader';\r\nimport PredictionsLoader from './PredictionsLoader';\r\nimport {\r\n    ListGroup,\r\n    ListGroupItem,\r\n    CardGroup,\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    Button,\r\n    Container\r\n} from 'reactstrap';\r\nimport { shouldUpdate } from '../../Utils';\r\nimport { answerTypes, predictionTypes } from '../AnswersUtils';\r\nimport SearchFilter from './SearchFilter';\r\nimport CheckboxList from '../../checkbox_list/CheckboxList';\r\n\r\nconst props_updateSignals = []\r\nconst state_updateSignals = ['dataset', 'predictions', 'filteredAnswerTypes', 'filteredPredictionTypes', 'searchProps']\r\nclass ExplorerSettings extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.datasetChange = this.datasetChange.bind(this);\r\n        this.predictionsChange = this.predictionsChange.bind(this);\r\n        this.filteredAnswerTypesChange = this.filteredAnswerTypesChange.bind(this);\r\n        this.filteredPredictionTypesChange = this.filteredPredictionTypesChange.bind(this);\r\n        this.searchFilterChange = this.searchFilterChange.bind(this);\r\n        this.state = {\r\n            filteredAnswerTypes: this.props.filteredAnswerTypes,\r\n            filteredPredictionTypes: this.props.filteredPredictionTypes,\r\n            searchProps: this.props.searchProps\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        const update = shouldUpdate(props_updateSignals, state_updateSignals, \r\n            this.props, this.state, \r\n            nextProps, nextState, \r\n            true, this.constructor.name);\r\n        return update;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        this.props.onChange(this.state);\r\n    }\r\n\r\n    datasetChange(dataset) {\r\n        this.setState({ dataset });\r\n    }\r\n\r\n    predictionsChange(predictions) {\r\n        this.setState({ predictions });\r\n    }\r\n\r\n    filteredAnswerTypesChange(filteredAnswerTypes) {\r\n        this.setState({ filteredAnswerTypes });\r\n    }\r\n    \r\n    filteredPredictionTypesChange(filteredPredictionTypes) {\r\n        this.setState({ filteredPredictionTypes });\r\n    }\r\n\r\n    searchFilterChange(searchProps) {\r\n        this.setState({ searchProps });\r\n    }\r\n\r\n    render() {\r\n        return <Container className='ml-0' fluid>\r\n            <CardGroup className='row'>\r\n                <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Dataset</CardHeader>\r\n                    <CardBody>\r\n                        <DatasetLoader onDatasetChange={this.datasetChange} useLocalDataset={this.props.useLocalDataset} />\r\n                    </CardBody>\r\n                </Card>\r\n                <Card className='col-sm-2 p-0'>\r\n                    <CardBody>\r\n                        <ListGroup>\r\n                            <ListGroupItem>\r\n                                <Button color='primary' size='sm' style={{width: '100%'}} onClick={() => {\r\n                                    if (this.props.expandAllFunc) {\r\n                                        this.props.expandAllFunc()\r\n                                    }\r\n                                }}>EXPAND ALL\r\n                                </Button>\r\n                            </ListGroupItem>\r\n                            <ListGroupItem>\r\n                                <Button color='primary' size='sm' style={{width: '100%'}} onClick={() => {\r\n                                    if (this.props.collapseAllFunc) {\r\n                                        this.props.collapseAllFunc()\r\n                                    }\r\n                                }}>COLLAPSE ALL\r\n                                </Button>\r\n                            </ListGroupItem>\r\n                            <ListGroupItem>\r\n                                <Button color='primary' size='sm' style={{width: '100%'}} onClick={() => {\r\n                                    if (this.props.clearSelectedAnswersFunc) {\r\n                                        this.props.clearSelectedAnswersFunc()\r\n                                    }\r\n                                }}>CLEAR SELECTED ANSWERS\r\n                                </Button>\r\n                            </ListGroupItem>\r\n                        </ListGroup>\r\n                    </CardBody>\r\n                </Card>\r\n                <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Filter Answer Type</CardHeader>\r\n                    <CardBody>\r\n                        <CheckboxList onChange={this.filteredAnswerTypesChange} checked={this.props.filteredAnswerTypes} options={answerTypes}></CheckboxList>\r\n                    </CardBody>\r\n                </Card>\r\n                <Card className='col-sm-6 p-0'>\r\n                    <CardHeader>Search</CardHeader>\r\n                    <CardBody>\r\n                        <SearchFilter onChange={this.searchFilterChange} \r\n                        instantSearch={this.props.instantSearch} searchProps={this.props.searchProps} />\r\n                    </CardBody>\r\n                </Card>\r\n            </CardGroup>\r\n            <CardGroup className='row'>\r\n                <Card className='col-sm-2 p-0'>\r\n                        <CardHeader>Predictions</CardHeader>\r\n                        <CardBody>\r\n                            <PredictionsLoader onChange={this.predictionsChange} />\r\n                        </CardBody>\r\n                </Card>\r\n                {this.state.predictions ? <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Prediction Type</CardHeader>\r\n                    <CardBody>\r\n                        <CheckboxList onChange={this.filteredPredictionTypesChange} checked={this.props.filteredPredictionTypes} options={predictionTypes}></CheckboxList>\r\n                    </CardBody>\r\n                </Card> : null}\r\n            </CardGroup>\r\n        </Container>\r\n    }\r\n}\r\n\r\nexport default ExplorerSettings;","import styled from 'styled-components';\r\n\r\nconst WrapDiv = styled.div`\r\n    white-space: pre-wrap;       /* css-3 */\r\n    white-space: -moz-pre-wrap;  /* Mozilla, since 1999 */\r\n    white-space: -pre-wrap;      /* Opera 4-6 */\r\n    white-space: -o-pre-wrap;    /* Opera 7 */\r\n    word-wrap: break-word;       /* Internet Explorer 5.5+ */\r\n`;\r\n\r\nexport default WrapDiv;","import { answerTypes, getAnswerType, \r\n    answerAccessor, predictionAccessor, nonAnswerType } from '../AnswersUtils';\r\nimport { intersect } from '../../Utils';\r\n\r\nexport function processDataHelper(dataset, predictions) {\r\n\r\n    let hasValidatedAnswers = false;\r\n    let hasValidPredictions = false;\r\n    let passage_id_to_displayIndex = {};\r\n    let passage_id_to_queries_displayIndexes = {};\r\n\r\n    let data;\r\n    if (dataset) {\r\n        const reduced = dataset.reduce(process_row, {\r\n            data: [],\r\n            hasValidatedAnswers: false,\r\n            passage_id_to_displayIndex: {},\r\n            passage_id_to_queries_displayIndexes: {}\r\n        });\r\n        data = reduced.data;\r\n        hasValidatedAnswers = reduced.hasValidatedAnswers;\r\n        passage_id_to_displayIndex = reduced.passage_id_to_displayIndex;\r\n        passage_id_to_queries_displayIndexes = reduced.passage_id_to_queries_displayIndexes;\r\n\r\n        if (predictions) {\r\n            hasValidPredictions = true;\r\n            for (let i=0; i < predictions.length; i++) {\r\n                const prediction = predictions[i];\r\n\r\n                const passage_id = prediction.passage_id;\r\n                const query_id = prediction.query_id;\r\n\r\n                const passage_displayIndex =passage_id_to_displayIndex[passage_id];\r\n                if (passage_displayIndex !== undefined) {\r\n                    const row = data[passage_displayIndex];\r\n\r\n                    const query_displayIndex = passage_id_to_queries_displayIndexes[passage_id][query_id];\r\n                    if (query_displayIndex !== undefined) {\r\n                        const qa_pair = row.qa_pairs[passage_id_to_queries_displayIndexes[passage_id][query_id]]\r\n\r\n                        qa_pair.prediction = prediction.answer;\r\n                        if (qa_pair.loss) {\r\n                            qa_pair.loss = prediction.loss;\r\n                        }\r\n                        if (qa_pair.f1) {\r\n                            qa_pair.f1 = prediction.f1;\r\n                        }\r\n                    } else {\r\n                        hasValidPredictions = false;\r\n                        break;\r\n                    }\r\n                }\r\n                else {\r\n                    hasValidPredictions = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        data = []\r\n    }\r\n\r\n    return {\r\n        data,\r\n        hasValidatedAnswers,\r\n        hasValidPredictions\r\n    };\r\n}\r\n\r\nfunction process_row(accumulator, row, index) {\r\n    const passage_id = row.passage_id;\r\n    const passage_displayIndex = accumulator.data.length;\r\n\r\n    const reduced = row.qa_pairs.reduce(process_qa_pair, {\r\n        passage_id: passage_id, \r\n        qa_pairs: [],\r\n        hasValidatedAnswers: accumulator.hasValidatedAnswers,\r\n        query_id_to_displayIndex: {}\r\n    });\r\n    const qa_pairs = reduced.qa_pairs;\r\n    accumulator.hasValidatedAnswers = reduced.hasValidatedAnswers;\r\n    const query_id_to_displayIndex = reduced.query_id_to_displayIndex;\r\n\r\n    const hasQuestions = qa_pairs.length !== 0;\r\n    const isValid = hasQuestions;\r\n\r\n    if (isValid) {\r\n        const reduced_row = {\r\n            ...row,\r\n            qa_pairs,\r\n            passage_index: index\r\n        }\r\n        \r\n        accumulator.data.push(reduced_row);\r\n        accumulator.passage_id_to_displayIndex[passage_id] = passage_displayIndex;\r\n        accumulator.passage_id_to_queries_displayIndexes[passage_id] = query_id_to_displayIndex\r\n    }\r\n    return accumulator;\r\n}\r\n\r\nfunction process_qa_pair(accumulator, qa_pair, query_index) {\r\n    const query_displayIndex = accumulator.qa_pairs.length;\r\n    const passage_id = accumulator.passage_id;\r\n\r\n    if (!accumulator.hasValidatedAnswers && qa_pair.validated_answers && qa_pair.validated_answers.length > 0) {\r\n        accumulator.hasValidatedAnswers = true;\r\n    }\r\n\r\n    if (getAnswerType(qa_pair.answer) !== nonAnswerType) {\r\n        accumulator.qa_pairs.push({\r\n            ...qa_pair,\r\n            query_index,\r\n            passage_id\r\n        })\r\n        accumulator.query_id_to_displayIndex[qa_pair.query_id] = query_displayIndex;\r\n    }\r\n\r\n    return accumulator;\r\n}\r\n\r\n\r\nexport function filterDataHelper(internals, filteredAnswerTypes, filteredPredictionTypes, searchProps) {\r\n\r\n    const data = internals.data; \r\n    const filteredDataPerFilter = internals.filteredDataPerFilter;       \r\n\r\n    const searchText = searchProps.searchText;\r\n    const useTextSearch = Boolean(searchText);\r\n\r\n    if (useTextSearch) {\r\n        if (!filteredDataPerFilter.search) {\r\n            const reduced = data.reduce(searchReudcer_rows, {\r\n                filteredData: [],\r\n                searchProps,\r\n                hasValidPredictions: internals.hasValidPredictions\r\n            })\r\n            const result = reduced.filteredData;\r\n\r\n            filteredDataPerFilter.search = result;\r\n        }\r\n    }\r\n\r\n    if (!filteredDataPerFilter.answerTypes) {\r\n        if (filteredAnswerTypes.length > 0) {\r\n            if (filteredAnswerTypes.length < answerTypes.length) {\r\n                const reduced = data.reduce(answerTypeFilterReudcer_rows, {\r\n                    filteredData: [],\r\n                    filteredAnswerTypes,\r\n                    answerField: 'answer'\r\n                });\r\n                const result = reduced.filteredData;\r\n\r\n                filteredDataPerFilter.answerTypes = result;\r\n            }\r\n        } else {\r\n            filteredDataPerFilter.answerTypes = [];\r\n        }\r\n    }\r\n\r\n    if (internals.hasValidPredictions && !filteredDataPerFilter.predictionTypes) {\r\n        if (filteredPredictionTypes.length > 0) {\r\n            const reduced = data.reduce(answerTypeFilterReudcer_rows, {\r\n                filteredData: [],\r\n                filteredAnswerTypes: filteredPredictionTypes,\r\n                answerField: 'prediction'\r\n            });\r\n            const result = reduced.filteredData;\r\n\r\n            filteredDataPerFilter.predictionTypes = result;\r\n        } else {\r\n            filteredDataPerFilter.predictionTypes = [];\r\n        }\r\n    }\r\n\r\n    let filteredData = intersectFilteredData(filteredDataPerFilter, data.length);\r\n\r\n    if (!filteredData) {\r\n        filteredData = data;\r\n    }\r\n\r\n    return {\r\n        filteredData,\r\n        filteredDataPerFilter\r\n    };\r\n}\r\n\r\nfunction intersectFilteredData(filteredDataPerFilter) {\r\n    const filteredDataArr = Object.values(filteredDataPerFilter).filter(filteredData => Boolean(filteredData))\r\n    const filtersCount = filteredDataArr.length;\r\n\r\n    if (filtersCount === 0) {\r\n        return;\r\n    }\r\n\r\n    if (filtersCount === 1) {\r\n        return filteredDataArr[0];\r\n    }\r\n\r\n    const allNonEmpty = filteredDataArr.every(filteredData => filteredData.length > 0);\r\n    if (!allNonEmpty) {\r\n        return [];\r\n    }\r\n\r\n    return intersect(filteredDataArr, row => row.passage_index, intersectRows);\r\n}\r\n\r\nfunction intersectRows(sameRows) {\r\n    const qa_pairs_arr = sameRows.map(row => row.qa_pairs);\r\n\r\n    const filtered_qa_pairs = intersect(qa_pairs_arr, qa_pair => qa_pair.query_index, (sameQuestions) => {\r\n        return Object.assign({}, ...sameQuestions);\r\n    });\r\n\r\n    if (filtered_qa_pairs.length > 0) {\r\n        return Object.assign({}, ...sameRows, {'qa_pairs': filtered_qa_pairs});\r\n    }\r\n    return;\r\n}\r\n\r\n// Text Search Filtering\r\nfunction searchReudcer_rows(accumulator, row) {\r\n    const searchProps = accumulator.searchProps;\r\n    const searchText = searchProps.searchText;\r\n\r\n    const passageTextSearchValid = row.passage.toLowerCase().includes(searchText) || \r\n                                    row.passage_id.toLowerCase().includes(searchText);\r\n\r\n    let filtered_qa_pairs = row.qa_pairs;\r\n    let hasTextSearchValidQuestions = false;\r\n\r\n    if (searchProps.filterQuestions) {\r\n        filtered_qa_pairs = row.qa_pairs.filter(qa_pair => {\r\n            return isQuestionTextSearchValid(qa_pair, searchText, accumulator.hasValidPredictions);\r\n        });\r\n\r\n        hasTextSearchValidQuestions = filtered_qa_pairs.length > 0;\r\n\r\n    } else if (!passageTextSearchValid) {\r\n\r\n        hasTextSearchValidQuestions = row.qa_pairs.some(qa_pair => {\r\n            return isQuestionTextSearchValid(qa_pair, searchText, accumulator.hasValidPredictions);\r\n        });\r\n    }\r\n\r\n    const hasQuestions = filtered_qa_pairs.length > 0;\r\n    const isValid = (passageTextSearchValid && hasQuestions) || hasTextSearchValidQuestions;\r\n\r\n    if (isValid) {\r\n        accumulator.filteredData.push({\r\n            ...row,\r\n            qa_pairs: filtered_qa_pairs,\r\n        });\r\n    }\r\n    return accumulator;\r\n}\r\nfunction isQuestionTextSearchValid(qa_pair, searchText, hasValidPredictions) {\r\n    let result = qa_pair.question.toLowerCase().includes(searchText) ||\r\n                qa_pair.query_id.toLowerCase().includes(searchText);\r\n\r\n    if (result) {\r\n        return true;\r\n    }\r\n\r\n    const displayedAnswer = answerAccessor(qa_pair);\r\n    result = (displayedAnswer && displayedAnswer.toLowerCase().includes(searchText));\r\n\r\n    if (result) {\r\n        return true;\r\n    }\r\n\r\n    if (hasValidPredictions) {\r\n        const displayedPrediction = predictionAccessor(qa_pair);\r\n        result = (displayedPrediction && displayedPrediction.toLowerCase().includes(searchText));    \r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n// Answer Type Filtering\r\nfunction answerTypeFilterReudcer_rows(accumulator, row) {\r\n    const filteredAnswerTypes = accumulator.filteredAnswerTypes;\r\n\r\n    const { filtered_qa_pairs } = row.qa_pairs.reduce(answerTypeFilterReudcer_qa_pairs, {\r\n        filtered_qa_pairs: [],\r\n        filteredAnswerTypes,\r\n        answerField: accumulator.answerField\r\n    });\r\n\r\n    const hasQuestions = filtered_qa_pairs.length > 0;\r\n    const isValid = hasQuestions;\r\n\r\n    if (isValid) {\r\n        accumulator.filteredData.push({\r\n            ...row,\r\n            qa_pairs: filtered_qa_pairs,\r\n        });\r\n    }\r\n    return accumulator;\r\n}\r\nfunction answerTypeFilterReudcer_qa_pairs(accumulator, qa_pair) {\r\n    const filteredAnswerTypes = accumulator.filteredAnswerTypes;\r\n\r\n    const answerTypeValid = filterByAnswerType_qa_pair(qa_pair, filteredAnswerTypes, accumulator.answerField);\r\n    const isValid = answerTypeValid;\r\n\r\n    if (isValid) {\r\n        accumulator.filtered_qa_pairs.push({\r\n            ...qa_pair\r\n        });\r\n    }\r\n\r\n    return accumulator;\r\n}\r\nfunction filterByAnswerType_qa_pair(qa_pair, filteredAnswerTypes, answerField) {\r\n    let answerType;\r\n    if (answerField === 'prediction') {\r\n        const prediction = qa_pair.prediction;\r\n        answerType = prediction ? getAnswerType({'spans': qa_pair.prediction}) : nonAnswerType.key;\r\n    } else {\r\n        answerType = getAnswerType(qa_pair[answerField]);\r\n    }\r\n\r\n    if (filteredAnswerTypes.includes(answerType)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n","import React from 'react';\r\nimport ReactTable from 'react-table'\r\nimport cloneDeep from 'clone-deep'\r\nimport 'react-table/react-table.css';\r\nimport '../../../scss/highlighter.css';\r\nimport '../../../scss/react-table.css';\r\nimport WrapDiv from './WrapDiv'\r\nimport { shouldUpdate, isChanged, areSetsEqual, \r\n    displayIndexesToViewIndex, viewIndexToDisplayIndex, viewIndexToDisplayIndexes } from '../../Utils';\r\nimport { processDataHelper, filterDataHelper } from './DataUtils';\r\nimport { getAnswerField, getAnswerForDisplay, \r\n    answerAccessor, answerTypeAccessor, \r\n    predictionAccessor, predictionTypeAccessor } from '../AnswersUtils';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { \r\n    Table \r\n} from 'reactstrap';\r\n\r\nconst MAX_QUESTIONS_PER_PASSAGE_ASSUMPTION = 150;\r\n\r\nconst initialInternals = {\r\n    data: undefined,\r\n    filteredData: undefined,\r\n    sortedData: undefined,\r\n    filteredDataPerFilter: {\r\n        answerTypes: undefined,\r\n        predictionTypes: undefined,\r\n        search: undefined\r\n    },\r\n\r\n    hasValidatedAnswers: false,\r\n    hasValidPredictions: false,\r\n}\r\n\r\nconst initialState = {\r\n    page: 0,\r\n    passagesPageSize: 20,\r\n    questionsPageSize: MAX_QUESTIONS_PER_PASSAGE_ASSUMPTION,\r\n    expanded_passage_ids: [],\r\n    activeQuestions: {},\r\n    questionResized: [],\r\n    questionSorted: []\r\n};\r\n\r\nconst filterProps = ['filteredAnswerTypes', 'filteredPredictionTypes', 'searchProps']\r\nconst props_updateSignals = ['dataset', 'predictions', ...filterProps]\r\nconst state_updateSignals = ['page', 'passagesPageSize', 'questionsPageSize', 'expanded_passage_ids', 'activeQuestions', 'questionResized', 'questionSorted']\r\nclass ExplorerTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        renderPassageCell = renderPassageCell.bind(this);\r\n        renderHighlightableQuestionCell = renderHighlightableQuestionCell.bind(this);\r\n        activeQuestionChange = activeQuestionChange.bind(this);\r\n\r\n        this.clearSelectedAnswers = this.clearSelectedAnswers.bind(this);\r\n        this.expandAll = this.expandAll.bind(this);\r\n        this.collapseAll = this.collapseAll.bind(this);\r\n        this.expandedChange = this.expandedChange.bind(this);\r\n        this.getExpanded = this.getExpanded.bind(this);\r\n        this.questionResizedChange = this.questionResizedChange.bind(this);\r\n\r\n        this.processData = this.processData.bind(this);\r\n        this.filterData = this.filterData.bind(this);\r\n        this.getSortedData = this.getSortedData.bind(this);\r\n\r\n        this.pageChanged = this.pageChanged.bind(this);\r\n        this.passagesPageSizeChanged = this.passagesPageSizeChanged.bind(this);\r\n        this.questionsPageSizeChanged = this.questionsPageSizeChanged.bind(this);\r\n        this.passageSortedChange = this.passageSortedChange.bind(this);\r\n        this.questionSortedChange = this.questionSortedChange.bind(this);\r\n\r\n        this.setInternals = this.setInternals.bind(this);\r\n        this.internals = cloneDeep(initialInternals);\r\n        this.state = cloneDeep(initialState);\r\n\r\n        this.tableRef = React.createRef();\r\n    }\r\n\r\n    setInternals(newInternals) {\r\n        Object.assign(this.internals, newInternals)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.sendClearSelectedAnswersFunc(this.clearSelectedAnswers);\r\n        this.props.sendExpandAllFunc(this.expandAll);\r\n        this.props.sendCollapseAllFunc(this.collapseAll);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.props.dataset !== nextProps.dataset) {\r\n            // reset all when the dataset is switched\r\n            this.setInternals(cloneDeep(initialInternals));\r\n            this.setState(cloneDeep(initialState));\r\n        } else if (this.props.predictions !== nextProps.predictions) {\r\n             this.setInternals({data: undefined, filteredData: undefined});\r\n        } else if (isChanged(filterProps, this.props, nextProps)) {\r\n            // update only the changed filter\r\n            const filteredAnswerTypesChanged = this.props.filteredAnswerTypes !== nextProps.filteredAnswerTypes;\r\n            const filteredPredictionTypesChanged = this.props.filteredPredictionTypes !== nextProps.filteredPredictionTypes;\r\n            const searchPropsChanged = this.props.searchProps !== nextProps.searchProps;\r\n            const refilteringRequired = filteredAnswerTypesChanged || filteredPredictionTypesChanged || searchPropsChanged;\r\n\r\n            this.setInternals({\r\n                filteredData: refilteringRequired ? undefined : this.internals.filteredData\r\n            });\r\n            if (filteredAnswerTypesChanged) {\r\n                this.internals.filteredDataPerFilter.answerTypes = undefined;\r\n            }\r\n            if (filteredPredictionTypesChanged) {\r\n                this.internals.filteredDataPerFilter.predictionTypes = undefined;\r\n            }\r\n            if (searchPropsChanged) {\r\n                this.internals.filteredDataPerFilter.search = undefined;\r\n            }\r\n        }\r\n        \r\n        const update = shouldUpdate(props_updateSignals, state_updateSignals, \r\n            this.props, this.state, \r\n            nextProps, nextState, \r\n            true, this.constructor.name);\r\n        return update;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (isChanged(filterProps, prevProps, this.props)) {\r\n            // force updated is needed for getExpanded() to be called again,\r\n            // so it will use the filtered sorted data to find the expanded rows\r\n            this.forceUpdate(() => {\r\n                this.setState({ page: 0 });\r\n            })\r\n        }\r\n    }\r\n\r\n    pageChanged(page) {\r\n        this.setState({ page });\r\n    }\r\n\r\n    passagesPageSizeChanged(pageSize, page) {\r\n        this.setState({ passagesPageSize: pageSize, page });\r\n    }\r\n\r\n    questionsPageSizeChanged(pageSize, page) {\r\n        this.setState({ questionsPageSize: pageSize, page });\r\n    }\r\n\r\n    passageSortedChange(newSorted, column, additive) {\r\n        // force updated is needed for getExpanded() to be called,\r\n        // so it will use the filtered sorted data to find the expanded rows\r\n        this.forceUpdate();\r\n    }\r\n\r\n    questionSortedChange(newSorted, column, additive) {\r\n        this.setState({\r\n            questionSorted: newSorted\r\n        });\r\n    }\r\n\r\n    expandedChange(newExpanded, index, event) {\r\n        const pageSize = this.state.passagesPageSize;\r\n        const page = this.state.page;\r\n\r\n        const viewIndex = index[0];\r\n        const displayIndex = viewIndexToDisplayIndex(viewIndex, page, pageSize);\r\n\r\n        const sortedData = this.getSortedData();\r\n        const passage_id = sortedData[displayIndex].passage_id; \r\n        \r\n        const matchingPosition = this.state.expanded_passage_ids.indexOf(passage_id);\r\n        if (matchingPosition === -1) {\r\n            this.setState({\r\n                expanded_passage_ids: [...this.state.expanded_passage_ids, passage_id]\r\n            });\r\n        } else {\r\n            const expanded_passage_ids = [...this.state.expanded_passage_ids];\r\n            expanded_passage_ids.splice(matchingPosition, 1);\r\n            this.setState({\r\n                expanded_passage_ids\r\n            });\r\n        }\r\n    }\r\n\r\n    expandAll() {\r\n        this.setState({\r\n            expanded_passage_ids: [...this.internals.filteredData.map(row => row.passage_id)]\r\n        });\r\n    }\r\n\r\n    collapseAll() {\r\n        this.setState({\r\n            expanded_passage_ids: []\r\n        });\r\n    }\r\n\r\n    getExpanded() {\r\n        const defaultExpanded = {};\r\n        if (!this.tableRef.current) {\r\n            return defaultExpanded;\r\n        }\r\n\r\n        const sortedData = this.getSortedData();\r\n\r\n        const indexesFromSorted = new Set(sortedData.map(row => row.passage_index))\r\n        const indexesFromFiltered = new Set(this.internals.filteredData.map(row => row.passage_index))\r\n        if (!areSetsEqual(indexesFromSorted, indexesFromFiltered)) {\r\n            return defaultExpanded;\r\n        }\r\n\r\n        const pageSize = this.state.passagesPageSize;\r\n        const page = this.state.page;\r\n\r\n        const viewIndexes = [...Array(pageSize).keys()];\r\n        const displayIndexsInPage = viewIndexToDisplayIndexes(viewIndexes, page, pageSize);\r\n\r\n        const expandedDisplayIndexes = displayIndexsInPage.filter(displayIndex => {\r\n            if (displayIndex < sortedData.length) {\r\n                const passage_id = sortedData[displayIndex].passage_id;\r\n                return this.state.expanded_passage_ids.includes(passage_id)\r\n            }\r\n            return false;\r\n        });\r\n\r\n        let expandedInPage = displayIndexesToViewIndex(expandedDisplayIndexes, page, pageSize, true);\r\n\r\n        return expandedInPage;\r\n    }\r\n\r\n    questionResizedChange(newResized, event) {\r\n        this.setState({\r\n            questionResized: newResized\r\n        });\r\n    }\r\n\r\n    clearSelectedAnswers() {\r\n        this.setState({\r\n            activeQuestions: {}\r\n        });\r\n    }\r\n\r\n    processData() {\r\n        const dataset = this.props.dataset;\r\n        const predictions = this.props.predictions;\r\n\r\n        const {\r\n            data, \r\n            hasValidatedAnswers,\r\n            hasValidPredictions\r\n        } = processDataHelper(dataset, predictions);\r\n\r\n        this.setInternals({\r\n            data,\r\n            hasValidatedAnswers,\r\n            hasValidPredictions\r\n        })\r\n    }\r\n\r\n    filterData() {\r\n        const filteredAnswerTypes = this.props.filteredAnswerTypes;\r\n        const filteredPredictionTypes = this.props.filteredPredictionTypes;\r\n        const searchProps = this.props.searchProps;\r\n\r\n        const {\r\n            filteredData,\r\n            filteredDataPerFilter\r\n        } = filterDataHelper(this.internals, filteredAnswerTypes, filteredPredictionTypes, searchProps);\r\n        \r\n        this.setInternals({\r\n            filteredData,\r\n            filteredDataPerFilter\r\n        })\r\n    }\r\n\r\n    getSortedData() {\r\n        return this.tableRef.current.getResolvedState().sortedData;\r\n    }\r\n\r\n    render() {\r\n\r\n        console.time('processData');\r\n        if (!this.internals.data) {\r\n            this.processData();\r\n        }\r\n        console.timeEnd('processData');\r\n        \r\n        console.time('filterData');\r\n        if (!this.internals.filteredData) {\r\n            this.filterData();\r\n        }        \r\n        console.timeEnd('filterData');\r\n\r\n        const passage_columns = [\r\n            {\r\n                Header: '#',\r\n                id: 'passage_index',\r\n                accessor: 'passage_index',\r\n                width: 50\r\n            },\r\n            {\r\n                Header: 'Passage ID',\r\n                accessor: 'passage_id',\r\n                width: 110\r\n            }, \r\n            {\r\n                Header: 'Passage',\r\n                accessor: 'passage',\r\n                Cell: renderPassageCell\r\n            }, \r\n            {\r\n                Header: 'Count',\r\n                id: 'questions_count',\r\n                accessor: row => row.qa_pairs.length,\r\n                width: 50\r\n            }\r\n        ]\r\n\r\n        const qa_columns = [\r\n            {\r\n                Header: '#',\r\n                accessor: 'query_index',\r\n                width: 40\r\n            },\r\n            {\r\n                Header: 'Question ID',\r\n                accessor: 'query_id',\r\n                width: 100\r\n            },\r\n            {\r\n                Header: 'Question',\r\n                accessor: 'question',\r\n                Cell: renderHighlightableQuestionCell\r\n            },\r\n            {\r\n                Header: 'Answer',\r\n                id: 'answer',\r\n                accessor: answerAccessor,\r\n                Cell: renderHighlightableQuestionCell,\r\n                width: 150\r\n            },\r\n            {\r\n                Header: 'Answer Type',\r\n                id: 'answerType',\r\n                accessor: answerTypeAccessor,\r\n                width: 110\r\n            },\r\n            {\r\n                Header: 'Additional Distinct Answers',\r\n                id: 'additional_answers',\r\n                show: this.internals.hasValidatedAnswers,\r\n                accessor: qa_pair => {\r\n                    if (!qa_pair.validated_answers || qa_pair.validated_answers.length === 0) {\r\n                        return null;\r\n                    }\r\n                    \r\n                    const main_answer = answerAccessor(qa_pair);\r\n                    const answers = [];\r\n                    qa_pair.validated_answers.forEach((answerDict, index) => {\r\n                        const answerField = getAnswerField(answerDict);\r\n                        if (answerField) {\r\n                            const answer = getAnswerForDisplay(answerDict[answerField.key]).toString();\r\n                            if (answer !== main_answer && !answers.includes(answer)) {\r\n                                answers.push(answer);\r\n                            }\r\n                        }\r\n                    });\r\n                    return answers;\r\n                },\r\n                Cell: props => <Table striped><tbody>{props.value.map((answer, index) => \r\n                    <tr key={index}><td style={{'whiteSpace': 'pre-wrap', padding: 0, 'borderTop': 0}}>{answer}</td></tr>\r\n                )}</tbody></Table>,\r\n                width: 170\r\n            },            \r\n            {\r\n                Header: 'Prediction',\r\n                id: 'prediction',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: predictionAccessor,\r\n                Cell: renderHighlightableQuestionCell,\r\n                width: 150\r\n            },\r\n            {\r\n                Header: 'Prediction Type',\r\n                id: 'predictionType',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: predictionTypeAccessor,\r\n                width: 110\r\n            },\r\n        ]\r\n\r\n\r\n        let questionsCount = 0;\r\n        let predictedCount = 0;\r\n        for (let i=0; i < this.internals.filteredData.length; i++) {\r\n            const row = this.internals.filteredData[i];\r\n\r\n            questionsCount += row.qa_pairs.length;\r\n\r\n            if (this.internals.hasValidPredictions) {\r\n                for (let j=0; j < row.qa_pairs.length; j++) {\r\n                    const qa_pair = row.qa_pairs[j];\r\n        \r\n                    if (qa_pair.prediction) {\r\n                        predictedCount += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return <div className='container-fluid'>\r\n            <div className='row justify-content-center'>\r\n                <div className='col-3'>\r\n                    <h4>\r\n                    Passage Count: {this.internals.filteredData.length.toLocaleString()}\r\n                    </h4>\r\n                </div>\r\n                <div className='col-3'>\r\n                    <h4>\r\n                        Questions Count: {questionsCount.toLocaleString()}\r\n                    </h4>\r\n                </div>\r\n                {this.props.predictions ? <div className='col-3'>\r\n                    <h4>\r\n                        {this.internals.hasValidPredictions ?\r\n                        `Predictions Count: ${predictedCount.toLocaleString()}` :\r\n                        'Predictions do not match the dataset'\r\n                        }\r\n                    </h4>\r\n                </div> : null}\r\n            </div>\r\n            <div className='row'><div className='col-12'>\r\n                <ReactTable ref={this.tableRef} className=\"-striped-passage -highlight-passage\"\r\n                data={this.internals.filteredData} \r\n                columns={passage_columns}\r\n                minRows={0}\r\n                showPaginationTop={true}\r\n                showPaginationBottom={true}\r\n                page={this.state.page}\r\n                pageSize={this.state.passagesPageSize}\r\n                pageSizeOptions={[1, 5, 10, 20, 25, 50, 100]}\r\n                onPageChange={this.pageChanged}\r\n                onPageSizeChange={this.passagesPageSizeChanged}\r\n                collapseOnSortingChange={false}\r\n                collapseOnPageChange={false}\r\n                collapseOnDataChange={false}\r\n                onSortedChange={this.passageSortedChange}\r\n                expanded={this.getExpanded()}\r\n                onExpandedChange={(newExpanded, index, event) => this.expandedChange(newExpanded, index, event)}\r\n                SubComponent={row => {\r\n                    const qa_pairs = row.original.qa_pairs\r\n                    return (\r\n                        <ReactTable className=\"-striped-question -highlight-question\"\r\n                        data={qa_pairs}\r\n                        columns={qa_columns}\r\n                        minRows={0}\r\n                        sorted={this.state.questionSorted}\r\n                        onSortedChange={this.questionSortedChange}\r\n                        resized={this.state.questionResized}\r\n                        onResizedChange={this.questionResizedChange}\r\n                        pageSize={this.state.questionsPageSize}\r\n                        pageSizeOptions={[1, 5, 10, 20, 25, MAX_QUESTIONS_PER_PASSAGE_ASSUMPTION]}\r\n                        onPageSizeChange={this.questionsPageSizeChanged}\r\n                        showPagination={false}\r\n                        getTrProps={(state, rowInfo, column, instance) => {\r\n                            return {\r\n                                onClick: (e, handleOriginal) => {\r\n                                    activeQuestionChange(rowInfo, e);\r\n\r\n                                    if (handleOriginal) {\r\n                                        handleOriginal();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }}\r\n                        />\r\n                    )\r\n                }}\r\n                />\r\n            </div></div>\r\n            </div>\r\n    }\r\n}\r\n\r\nlet renderPassageCell = function(props) {\r\n    let searchWords = [];\r\n    let categoryPerSearchWordIndex = undefined;\r\n    let highlightClassNamePerCategory = undefined;\r\n    const activeQuestionId = this.state.activeQuestions[props.original.passage_id];\r\n    if (activeQuestionId) {\r\n        const qa_pair = props.original.qa_pairs\r\n                        .find(qa_pair => qa_pair.query_id === activeQuestionId);\r\n        const selectedAnswer = qa_pair.answer;\r\n        // TODO: Would be best to use the best aligned answer including the additional answers.\r\n\r\n        const answerType = getAnswerField(selectedAnswer)\r\n        searchWords = (answerType.key === 'number') ? \r\n            [Number(selectedAnswer.number).toString()] : [...selectedAnswer.spans]\r\n\r\n        categoryPerSearchWordIndex = searchWords.map(searchWord => 'gold_0')\r\n        highlightClassNamePerCategory = {'gold_0': 'highlight-gold'}\r\n\r\n        const prediction = qa_pair.prediction;\r\n        if (prediction) {\r\n            searchWords.push(...prediction);\r\n            categoryPerSearchWordIndex.push(...prediction.map(x => 'prediction_1'));\r\n            highlightClassNamePerCategory['prediction_1'] = 'highlight-predicted';\r\n            highlightClassNamePerCategory['gold_0-prediction_1'] = 'highlight-correct'\r\n        }\r\n    }\r\n    return <WrapDiv><Highlighter \r\n            searchWords={searchWords} categoryPerSearchWordIndex={categoryPerSearchWordIndex} \r\n            highlightClassNamePerCategory={highlightClassNamePerCategory}\r\n            textToHighlight={props.value} /></WrapDiv>\r\n}\r\nlet renderHighlightableQuestionCell = function(props) {\r\n    let searchWords = [];\r\n    const highlightClassName = props.column.id === 'prediction' ? 'highlight-predicted' : 'highlight-gold';\r\n    const activeQuestionId = this.state.activeQuestions[props.original.passage_id];\r\n    if (activeQuestionId === props.original.query_id) {        \r\n        if (props.column.id === 'prediction') {\r\n            searchWords = props.original.prediction ? props.original.prediction : [];\r\n        } else {\r\n            const selectedAnswer = props.original.answer;\r\n            const answerType = getAnswerField(selectedAnswer)\r\n            searchWords = (answerType.key === 'number') ? \r\n                [Number(selectedAnswer.number).toString()] : selectedAnswer.spans\r\n        }\r\n    }\r\n    return <WrapDiv><Highlighter highlightClassName={highlightClassName} searchWords={searchWords} textToHighlight={props.value} /></WrapDiv>\r\n}\r\n\r\nlet activeQuestionChange = function(rowInfo, e) {\r\n    const answerDict = rowInfo.original.answer;\r\n    const answerType = getAnswerField(answerDict)\r\n    if (answerType && answerType.key !== 'date') {\r\n\r\n        const passage_id = rowInfo.original.passage_id\r\n        const query_id = rowInfo.original.query_id\r\n\r\n        if (this.state.activeQuestions[passage_id] === query_id) {\r\n            const activeQuestions = {...this.state.activeQuestions};\r\n            delete activeQuestions[passage_id]\r\n            this.setState({\r\n                activeQuestions\r\n            });\r\n        } else {\r\n            this.setState({\r\n                activeQuestions: {\r\n                    //...this.state.activeQuestions, \r\n                    [passage_id]: query_id\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default ExplorerTable;\r\n","import React from 'react';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n} from 'reactstrap';\r\nimport { shouldUpdate } from './../Utils';\r\nimport ExplorerSettings from './explorer-settings/ExplorerSettings';\r\nimport ExplorerTable from './explorer-table/ExplorerTable';\r\n\r\nconst props_updateSignals = []\r\nconst state_updateSignals = ['dataset', 'predictions', 'filteredAnswerTypes', 'filteredPredictionTypes',  'searchProps', 'navbarSticky', 'isOpen']\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.settingsChange = this.settingsChange.bind(this);\r\n        this.getClearSelectedAnswersFunc = this.getClearSelectedAnswersFunc.bind(this);\r\n        this.getExpandAllFunc = this.getExpandAllFunc.bind(this);\r\n        this.getCollapseAllFunc = this.getCollapseAllFunc.bind(this);\r\n        this.toggleMenu = this.toggleMenu.bind(this);\r\n        this.state = {\r\n            useLocalDataset: false,\r\n            filteredAnswerTypes: ['multi_span', 'single_span', 'number', 'date'],\r\n            filteredPredictionTypes: ['multi_span', 'single_span', 'number', 'date', 'none'],\r\n            instantSearch: true,\r\n            searchProps: {\r\n                searchText: '',\r\n                filterQuestions: false\r\n            },\r\n            navbarSticky: 'top', // can be 'top' or undefined\r\n            isOpen: true,\r\n            // ^ startup settings available for configuration\r\n\r\n            dataset: undefined,\r\n            predictions: undefined,\r\n            clearSelectedAnswersFunc: undefined,\r\n            expandAllFunc: undefined,\r\n            collapseAll: undefined\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        const update = shouldUpdate(props_updateSignals, state_updateSignals, \r\n            this.props, this.state, \r\n            nextProps, nextState, \r\n            true, this.constructor.name);\r\n        return update;\r\n    }\r\n\r\n    settingsChange(settings) {\r\n        this.setState({\r\n            filteredAnswerTypes: settings.filteredAnswerTypes,\r\n            filteredPredictionTypes: settings.filteredPredictionTypes,\r\n            searchProps: settings.searchProps,\r\n            dataset: settings.dataset,\r\n            predictions: settings.predictions\r\n        });\r\n    }\r\n    \r\n    getClearSelectedAnswersFunc(func) {\r\n        this.setState({ clearSelectedAnswersFunc: func })\r\n    }\r\n\r\n    getExpandAllFunc(func) {\r\n        this.setState({ expandAllFunc: func })\r\n    }\r\n\r\n    getCollapseAllFunc(func) {\r\n        this.setState({ collapseAllFunc: func })\r\n    }\r\n\r\n    toggleMenu() {\r\n        this.setState({\r\n          isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n                    <Navbar color=\"light\" light sticky={this.state.navbarSticky} \r\n                            style={{'borderBottom': '1px solid rgba(0,0,0,0.15)'}}>\r\n                        <NavbarBrand onClick={() => {this.setState({ navbarSticky: this.state.navbarSticky === 'top' ? undefined : 'top' })}}>\r\n                            DROP Explorer\r\n                        </NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggleMenu} />\r\n                        <Collapse isOpen={this.state.isOpen} navbar>\r\n                            <ExplorerSettings onChange={this.settingsChange}\r\n                                useLocalDataset={this.state.useLocalDataset}\r\n                                expandAllFunc={this.state.expandAllFunc}\r\n                                collapseAllFunc={this.state.collapseAllFunc}\r\n                                filteredAnswerTypes={this.state.filteredAnswerTypes}\r\n                                filteredPredictionTypes={this.state.filteredPredictionTypes}\r\n                                instantSearch={this.state.instantSearch}\r\n                                searchProps={this.state.searchProps}\r\n                                clearSelectedAnswersFunc={this.state.clearSelectedAnswersFunc} />\r\n                        </Collapse>\r\n                    </Navbar>\r\n                    <ExplorerTable \r\n                        dataset={this.state.dataset} \r\n                        predictions={this.state.predictions}\r\n                        filteredAnswerTypes={this.state.filteredAnswerTypes}\r\n                        filteredPredictionTypes={this.state.filteredPredictionTypes}\r\n                        searchProps={this.state.searchProps}\r\n                        sendClearSelectedAnswersFunc={this.getClearSelectedAnswersFunc}\r\n                        sendExpandAllFunc={this.getExpandAllFunc}\r\n                        sendCollapseAllFunc={this.getCollapseAllFunc}\r\n                    />\r\n                </div>\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './scss/custom.scss';\r\nimport ModelComponent from './model/ModelComponent';\r\nimport App from './components/app/App';\r\n\r\n// Copied from http:jquery-howto.blogspot.com/2009/09/get-url-parameters-values-with-jquery.html\r\nfunction getUrlVars() {\r\n    var vars = [], hash;\r\n    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');\r\n    for (var i = 0; i < hashes.length; i++) {\r\n      hash = hashes[i].split('=');\r\n      vars.push(hash[0]);\r\n      vars[hash[0]] = hash[1];\r\n    }\r\n    return vars;\r\n}\r\n  \r\nvar urlParams = getUrlVars();\r\n  \r\nswitch (urlParams[\"startPage\"]) {\r\n    case \"model\":\r\n        ReactDOM.render(<ModelComponent />, document.getElementById('root'));\r\n        break;\r\n\r\n    case undefined:\r\n    default:\r\n        ReactDOM.render(<App />, document.getElementById('root'));\r\n        break;\r\n}\r\n"],"sourceRoot":""}