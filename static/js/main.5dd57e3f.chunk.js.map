{"version":3,"sources":["api-config.js","model_components/Pane.jsx","model_components/Button.jsx","model_components/ModelIntro.jsx","model/ModelInput.jsx","model/ModelOutput.jsx","model/ModelComponent.jsx","components/Utils.js","components/file_input_button/FileInputButton.jsx","components/app/explorer-settings/dataset-loader/DatasetLocalSelector.jsx","components/app/explorer-settings/dataset-loader/DatasetListSelector.jsx","components/checkbox/Checkbox.jsx","components/app/explorer-settings/dataset-loader/DatasetLoader.jsx","components/app/explorer-settings/PredictionsLoader.jsx","components/app/AnswersUtils.js","components/app/explorer-settings/SearchFilter.jsx","components/checkbox_list/CheckboxList.jsx","components/range_input/RangeInput.jsx","components/app/explorer-settings/ExplorerSettings.jsx","components/app/explorer-table/WrapDiv.jsx","components/app/explorer-table/DataUtils.js","components/app/explorer-table/ExplorerTable.jsx","components/app/App.jsx","index.js"],"names":["origin","window","location","API_ROOT","includes","replace","ResultDisplay","outputContent","outputState","this","props","placeholderTemplate","message","react_default","a","createElement","className","concat","xlinkHref","children","React","Component","PaneRight","_React$Component2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","Pane_ResultDisplay","PaneLeft","_React$Component3","Button","_this$props","enabled","onClick","type","disabled","ModelIntro","title","description","examples","passage","question","ModelInput","_this","call","handleListChange","bind","assertThisInitialized","e","target","runModel","_this2","model_components_ModelIntro","onChange","map","example","index","substring","summarizeExample","ref","x","model_components_Button","ModelOutput","answer","outputs","JSON","stringify","ModelComponent","state","responseData","inputs","setState","fetch","method","headers","Accept","Content-Type","body","then","response","json","catch","error","console","_this$state","Pane_PaneLeft","model_ModelInput","Pane_PaneRight","model_ModelOutput","mapToArray","key_name","keys","intersect","dataArr","accessor","transformToSingle","pointers","Array","length","intersection","maxIndex","agreements","i","data","currentIndex","item","reduce","sameItems","push","isChanged","changeSignals","obj","otherObj","debug","sourceName","changes","changeSignal","changed","log","join","shouldUpdate","props_updateSignals","state_updateSignals","nextProps","nextState","componentName","propsUpdated","stateUpdated","displayIndexesToViewIndex","displayIndexes","page","pageSize","returnObject","undefined","acuumulator","displayIndex","viewIndex","Math","floor","displayIndexToViewIndex","viewIndexToDisplayIndex","FileInputButton","fileInputRef","createRef","simulateClick","change","file","prevProps","prevState","current","click","files","selectedFile","style","display","id","accept","es_Button","color","size","text","name","PureComponent","DatasetLocalSelector","dataset","reader","FileReader","onloadend","array","parse","result","readAsText","file_input_button_FileInputButton","width","DatasetListSelector","toggle","dropdownOpen","datasets_names","selected","mounted","getDatasetList","getDataset","currentTarget","getAttribute","dataset_name","_this3","encodeURIComponent","_this4","Dropdown","isOpen","DropdownToggle","caret","DropdownMenu","DropdownItem","dataset-name","Checkbox","checked","FormGroup","check","_objectSpread","inline","Label","Input","fontSize","marginLeft","marginTop","DatasetSelector","local","dataset_loader_DatasetLocalSelector","dataset_loader_DatasetListSelector","DatasetLoader","useLocalDatasetChange","datasetChange","useLocalDataset","onDatasetChange","newChecked","ListGroup","allowSourceSelection","ListGroupItem","checkbox_Checkbox","PredictionsLoader","predictions","split","forEach","line","noAnswerType","noPredictionType","answerTypesConst","getAnswerStringForDisplayAndType","displayAnswer","answerType","number","number_value","Number","isNaN","toString","spans","toConsumableArray","sort","date","some","prop","getAnswerForEvaluation","answerForEvaluation","String","prepareText","toLowerCase","SearchFilter","searchTextChange","filterQuestionsChange","submit","SearchFilter_objectSpread","searchProps","draftSearchText","draftFilterQuestions","filterQuestions","searchText","event","newState","instantSearch","CheckboxList","changedKey","changedKeyIndex","indexOf","splice","options","option","option-key","RangeInput","lowChange","highChange","low","initial","high","metric","newLow","parseFloat","newHigh","InputGroup","tag","step","padding","textAlign","InputGroupAddon","addonType","InputGroupText","alignItems","margin","ExplorerSettings","predictionsChange","filteredAnswerTypesChange","answerTypeFilterFirstOnlyChange","answerTypeFilterStrictChange","clippedFilterChange","unclippedFilterChange","filteredPredictionTypesChange","searchFilterChange","rangeFilterChange","filteredAnswerTypes","answerTypeFilterFirstOnly","answerTypeFilterStrict","clippedFilter","unclippedFilter","filteredPredictionTypes","F1Range","EMRange","constructor","predictionTypes","predictionType","range","defineProperty","Container","fluid","CardGroup","Card","CardHeader","CardBody","dataset_loader_DatasetLoader","height","overflow","expandAllFunc","collapseAllFunc","clearSelectedAnswersFunc","checkbox_list_CheckboxList","explorer_settings_SearchFilter","explorer_settings_PredictionsLoader","range_input_RangeInput","WrapDiv","styled","div","_templateObject","process_row","accumulator","row","passage_id","passage_displayIndex","reduced","qa_pairs","process_qa_pair","hasValidatedAnswers","query_id_to_displayIndex","reduced_row","DataUtils_objectSpread","trim","passage_index","passage_id_to_displayIndex","passage_id_to_queries_displayIndexes","qa_pair","query_index","query_displayIndex","validated_answers","_getAnswerStringForDi","firstDisplayAnswer","firstAnswerType","displayAnswers","answersTypes","evaluationAnswers","validatedAnswer","evaluationAnswer","addedEvaluationAnswer","_getAnswerStringForDi2","maximizingGroundTruthIndex","query_id","filterDataHelper","internals","filteredDataPerFilter","Boolean","search","searchReudcer_rows","filteredData","hasValidPredictions","answerTypes","typeFilterReudcer_rows","filteredTypes","fields","missingValue","firstOnly","strict","rangeFilterReudcer_rows","field","clipped","showClipped","showUnclipped","clippedFilterReudcer_rows","filteredDataArr","values","filter","filtersCount","every","intersectRows","intersectFilteredData","metrics","questionsCount","predictedCount","f1","em","row_predicted","row_f1","row_em","j","prediction","sameRows","filtered_qa_pairs","sameQuestions","assign","passageTextSearchValid","hasTextSearchValidQuestions","isQuestionTextSearchValid","hasQuestions","evaluationPrediction","typeFilterReudcer_qa_pairs","foundTypes","Set","typeValid","isArray","arr","add","has","rangeFilterReudcer_qa_pairs","rangeValid","clippedFilterReudcer_qa_pairs","isValid","max_passage_length","initialInternals","initialState","passagesPageSize","questionsPageSize","expanded_passage_ids","activeQuestions","questionResized","questionSorted","filterProps","ExplorerTable","renderPassageOrQuestionCell","renderPredictionCell","renderAnswersCell","activeQuestionChange","clearSelectedAnswers","expandAll","collapseAll","expandedChange","getExpanded","questionResizedChange","processData","filterData","getSortedData","pageChanged","passagesPageSizeChanged","questionsPageSizeChanged","passageSortedChange","questionSortedChange","setInternals","cloneDeep","tableRef","newInternals","sendClearSelectedAnswersFunc","sendExpandAllFunc","sendCollapseAllFunc","filteredAnswerTypesChanged","filteredPredictionTypesChanged","searchPropsChanged","F1RangeChanged","EMRangeChanged","clippedFilterChanged","refilteringRequired","onPredictionsTypeChanged","forceUpdate","newSorted","column","additive","newExpanded","matchingPosition","defaultExpanded","sortedData","set","otherSet","areSetsEqual","viewIndexes","viewIndexToDisplayIndexes","newResized","_processDataHelper","keyToPredictionType","find","q","predicted_ability","predictionValue","displayPrediction","maximizingGroundTruth","maximizing_ground_truth","loss","numbers","signs","sign","toLocaleString","findIndex","predictionSpans","processDataHelper","_filterDataHelper","getResolvedState","passage_columns","Header","Cell","resizable","show","forceDecimalPlaces","qa_columns","renderAnswersTypesCell","es","columns","minRows","showPaginationTop","showPaginationBottom","pageSizeOptions","onPageChange","onPageSizeChange","collapseOnSortingChange","collapseOnPageChange","collapseOnDataChange","onSortedChange","expanded","onExpandedChange","SubComponent","original","maxHeight","sorted","resized","onResizedChange","showPagination","getTrProps","rowInfo","instance","handleOriginal","searchWords","categoryPerSearchWordIndex","categoryPerSpanIndex","highlightClassNamePerCategory","activeQuestionId","gold_1","context","spansAcc","span","_searchWords","_categoryPerSearchWor","explorer_table_WrapDiv","main_default","autoEscape","textToHighlight","paddingMultiplier","highlightClassName","Table","striped","whiteSpace","borderTop","ExplorerTable_objectSpread","num","places","round","pow","toFixed","App","settingsChange","getClearSelectedAnswersFunc","getExpandAllFunc","getCollapseAllFunc","predictionTypesChanged","toggleMenu","navbarSticky","showNavbarImage","settings","func","Navbar","light","sticky","borderBottom","rel","href","paddingRight","marginBottom","src","alt","NavbarBrand","NavbarToggler","float","Collapse","navbar","explorer_settings_ExplorerSettings","explorer_table_ExplorerTable","hash","vars","hashes","slice","getUrlVars","ReactDOM","render","model_ModelComponent","document","getElementById","app_App"],"mappings":"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","file":"static/js/main.5dd57e3f.chunk.js","sourcesContent":["/**\r\n * The backend always runs on port 8000. In production we also\r\n * serve the frontend from there. However, for development\r\n * we want to `npm run serve` the unminified js on port 3000.\r\n * This allows us to get the correct API root either way.\r\n */\r\n\r\nlet apiRoot;\r\n\r\nconst origin = window && window.location && window.location.origin;\r\n\r\nif (origin.includes(':3000')) {\r\n    apiRoot = origin.replace(\":3000\", \":8000\");\r\n} else {\r\n    apiRoot = origin;\r\n}\r\n\r\nexport const API_ROOT = apiRoot;\r\n","import React from 'react';\r\n\r\n\r\n/*******************************************************************************\r\n  <ResultDisplay /> Component\r\n*******************************************************************************/\r\n\r\nclass ResultDisplay extends React.Component {\r\n\r\n    render() {\r\n      const { outputState } = this.props;\r\n\r\n      const placeholderTemplate = (message) => {\r\n        return (\r\n          <div className=\"placeholder\">\r\n            <div className=\"placeholder__content\">\r\n              <svg className={`placeholder__${outputState}`}>\r\n                <use xlinkHref={`#icon__${outputState}`}></use>\r\n              </svg>\r\n              {message !== \"\" ? (\r\n                <p>{message}</p>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      let outputContent;\r\n      switch (outputState) {\r\n        case \"working\":\r\n          outputContent = placeholderTemplate(\"\");\r\n          break;\r\n        case \"received\":\r\n          outputContent = this.props.children;\r\n          break;\r\n        case \"error\":\r\n          outputContent = placeholderTemplate(\"Something went wrong. Please try again.\");\r\n          break;\r\n        default:\r\n          // outputState = \"empty\"\r\n          outputContent = placeholderTemplate(\"Run model to view results\");\r\n      }\r\n\r\n      return (\r\n        <div className={`pane__right model__output ${outputState !== \"received\" ? \"model__output--empty\" : \"\"}`}>\r\n          <div className=\"pane__thumb\"></div>\r\n          {outputContent}\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n  <PaneRight /> Component\r\n*******************************************************************************/\r\n\r\nexport class PaneRight extends React.Component {\r\n    render() {\r\n      const { outputState } = this.props;\r\n\r\n      return (\r\n        <ResultDisplay outputState={outputState}>\r\n          {this.props.children}\r\n        </ResultDisplay>\r\n      )\r\n    }\r\n}\r\n\r\n/*******************************************************************************\r\n<PaneLeft /> Component\r\n*******************************************************************************/\r\n\r\nexport class PaneLeft extends React.Component {\r\n\r\n    render () {\r\n      return (\r\n        <div className=\"pane__left model__input\">\r\n          {this.props.children}\r\n        </div>\r\n      );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\n/*******************************************************************************\r\n  <Button /> Component\r\n*******************************************************************************/\r\n\r\nclass Button extends React.Component {\r\n  render() {\r\n    const { enabled, onClick } = this.props;\r\n\r\n    return (\r\n    <button type=\"button\" disabled={!enabled} className=\"btn btn--icon-disclosure\" onClick={onClick}>Run\r\n      <svg>\r\n        <use xlinkHref=\"#icon__disclosure\"></use>\r\n      </svg>\r\n    </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\n\r\n\r\n/*******************************************************************************\r\n  <ModelIntro /> Component\r\n*******************************************************************************/\r\n\r\nclass ModelIntro extends React.Component {\r\n    render() {\r\n\r\n      const { title, description } = this.props;\r\n\r\n      return (\r\n        <div>\r\n          <h2>\r\n            <span>{title}</span>\r\n          </h2>\r\n          <p>{description}</p>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default ModelIntro;\r\n","import React from 'react';\r\nimport Button from '../model_components/Button'\r\nimport ModelIntro from '../model_components/ModelIntro'\r\n\r\n\r\n// TODO: These are some quickly-accessible examples to try out with your model.  They will get\r\n// added to the select box on the demo page, and will auto-populate your input fields when they\r\n// are selected.  The names here need to match what's read in `handleListChange` below.\r\n\r\nconst examples = [\r\n  {\r\n    passage: \"passage for example 1\",\r\n    question: \"question for example 1\"\r\n  },\r\n  {\r\n    passage: \"passage for example 2\",\r\n    question: \"question for example 2\"\r\n  },\r\n  {\r\n    passage: \"passage for example 3\",\r\n    question: \"question for example 3\"\r\n  }\r\n];\r\n\r\n// TODO: This determines what text shows up in the select box for each example.  The input to\r\n// this function will be one of the items from the `examples` list above.\r\nfunction summarizeExample(example) {\r\n  return example.passage.substring(0, 60);\r\n}\r\n\r\n// TODO: You can give a model name and description that show up in your demo.\r\nconst title = \"Your Model Name\";\r\nconst description = (\r\n  <span>\r\n  If you want a description of what this demo is showing, you can put that here.  Or just leave this\r\n  description empty if you don't need it.\r\n  </span>\r\n);\r\n\r\nclass ModelInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleListChange = this.handleListChange.bind(this);\r\n    this.onClick = this.onClick.bind(this);\r\n  }\r\n\r\n  handleListChange(e) {\r\n    if (e.target.value !== \"\") {\r\n      // TODO: This gets called when the select box gets changed.  You want to set the values of\r\n      // your input boxes with the content in your examples.\r\n      this.passage.value = examples[e.target.value].passage\r\n      this.question.value = examples[e.target.value].question\r\n    }\r\n  }\r\n\r\n  onClick() {\r\n    const { runModel } = this.props;\r\n\r\n    // TODO: You need to map the values in your input boxes to json values that get sent to your\r\n    // predictor.  The keys in this dictionary need to match what your predictor is expecting to receive.\r\n    runModel({passage: this.passage.value, question: this.question.value});\r\n  }\r\n\r\n  render() {\r\n\r\n    const { outputState } = this.props;\r\n\r\n    return (\r\n      <div className=\"model__content\">\r\n        <ModelIntro title={title} description={description} />\r\n        <div className=\"form__instructions\"><span>Enter text or</span>\r\n          <select disabled={outputState === \"working\"} onChange={this.handleListChange}>\r\n              <option value=\"\">Choose an example...</option>\r\n              {examples.map((example, index) => {\r\n                return (\r\n                    <option value={index} key={index}>{summarizeExample(example) + \"...\"}</option>\r\n                );\r\n              })}\r\n          </select>\r\n        </div>\r\n\r\n       {/*\r\n         * TODO: This is where you add your input fields.  You shouldn't have to change any of the\r\n         * code in render() above here.  We're giving a couple of example inputs here, one for a\r\n         * larger piece of text, like a paragraph (the `textarea`) and one for a shorter piece of\r\n         * text, like a question (the `input`).  You'll probably want to change the variable names\r\n         * here to match the input variable names in your model.\r\n         */}\r\n\r\n        <div className=\"form__field\">\r\n          <label>Passage</label>\r\n          <textarea ref={(x) => this.passage = x} type=\"text\"></textarea>\r\n        </div>\r\n        <div className=\"form__field\">\r\n          <label>Question</label>\r\n          <input ref={(x) => this.question = x} type=\"text\"/>\r\n        </div>\r\n\r\n       {/* You also shouldn't have to change anything below here. */}\r\n\r\n        <div className=\"form__field form__field--btn\">\r\n          <Button enabled={outputState !== \"working\"} onClick={this.onClick} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModelInput;\r\n","import React from 'react';\r\n\r\nclass ModelOutput extends React.Component {\r\n  render() {\r\n\r\n    const { outputs } = this.props;\r\n\r\n    // TODO: `outputs` will be the json dictionary returned by your predictor.  You can pull out\r\n    // whatever you want here and visualize it.  We're giving some examples of different return\r\n    // types you might have.  Change names for data types you want, and delete anything you don't\r\n    // need.\r\n    var answer = outputs['answer'];\r\n\r\n    return (\r\n      <div className=\"model__content\">\r\n\r\n       {/*\r\n         * TODO: This is where you display your output.  You can show whatever you want, however\r\n         * you want.  We've got a few examples, of text-based output, and of visualizing model\r\n         * internals using heat maps.\r\n         */}\r\n\r\n        <div className=\"form__field\">\r\n          <label>Answer</label>\r\n          <div className=\"model__content__summary\"><pre>{ JSON.stringify(answer, null, 2) }</pre></div>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModelOutput;\r\n","import React from 'react';\r\nimport { API_ROOT } from '../api-config';\r\nimport {PaneLeft, PaneRight} from '../model_components/Pane'\r\nimport ModelInput from './ModelInput'\r\nimport ModelOutput from './ModelOutput'\r\n\r\n\r\nclass ModelComponent extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        outputState: \"empty\",  // valid values: \"working\", \"empty\", \"received\", \"error\"\r\n        responseData: null\r\n      };\r\n\r\n      this.runModel = this.runModel.bind(this);\r\n    }\r\n\r\n    runModel(inputs) {\r\n      this.setState({outputState: \"working\"});\r\n\r\n      fetch(`${API_ROOT}/predict`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(inputs)\r\n      }).then((response) => {\r\n        return response.json();\r\n      }).then((json) => {\r\n        this.setState({responseData: json, outputState: 'received'})\r\n      }).catch((error) => {\r\n        console.error(error);\r\n        this.setState({outputState: \"error\"});\r\n      });\r\n    }\r\n\r\n    render() {\r\n      const { outputState, responseData } = this.state;\r\n\r\n      return (\r\n        <div className=\"pane-container\">\r\n          <div className=\"pane model\">\r\n            <PaneLeft>\r\n              <ModelInput runModel={this.runModel} outputState={this.state.outputState}/>\r\n            </PaneLeft>\r\n            <PaneRight outputState={outputState}>\r\n              <ModelOutput outputs={responseData}/>\r\n            </PaneRight>\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n    }\r\n}\r\n\r\nexport default ModelComponent;\r\n","export function mapToArray(json, key_name) {\r\n    return Object.keys(json).map(function(key) {\r\n        json[key][key_name] = key;\r\n        return json[key];\r\n    });\r\n}\r\n\r\nexport function intersect(dataArr, accessor, transformToSingle) {\r\n    const pointers = Array.apply(null, {length: dataArr.length}).map(() => 0);\r\n\r\n    const intersection = [];\r\n    let maxIndex = 0;\r\n    let agreements = 0;\r\n    while (true) {\r\n        while (agreements < dataArr.length) {\r\n            for (let i=0; i < dataArr.length; i++) {\r\n                const data = dataArr[i];\r\n        \r\n                let currentIndex = accessor(data[pointers[i]]);\r\n                while (currentIndex < maxIndex) {\r\n                    pointers[i]++;\r\n                    if (pointers[i] === data.length) {\r\n                        return intersection;\r\n                    }\r\n    \r\n                    currentIndex = accessor(data[pointers[i]]);\r\n                }\r\n                if (currentIndex > maxIndex) {\r\n                    maxIndex = currentIndex;\r\n                    agreements = 1;\r\n                } else {\r\n                    agreements++;\r\n                }\r\n            }\r\n        }\r\n\r\n        let sameItems = dataArr.reduce((sameItems, data, i) => {\r\n            sameItems.push(data[pointers[i]])\r\n            return sameItems;\r\n        }, [])\r\n\r\n        let item = transformToSingle(sameItems);\r\n        if (item) {\r\n            intersection.push(item);\r\n        }\r\n        maxIndex += 1;\r\n        agreements = 0;\r\n    }\r\n}\r\n\r\nexport function areSetsEqual(set, otherSet) {\r\n    if (set.size !== otherSet.size) return false;\r\n    for (let item in set) {\r\n        if (!otherSet.has(item)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function isChanged(changeSignals, obj, otherObj, debug, sourceName) {\r\n    const changes = []\r\n    for (let i = 0; i < changeSignals.length; i++) {\r\n        const changeSignal = changeSignals[i];\r\n        if (obj[changeSignal] !== otherObj[changeSignal]) {\r\n            if (debug) {\r\n                changes.push(changeSignal);\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    let changed = changes.length > 0;\r\n    if (debug) {\r\n        if (changed) {\r\n            console.log(`${sourceName} Caused update: ${changes.join(', ')}`);\r\n        }\r\n    }\r\n    return changed;\r\n}\r\n\r\nexport function shouldUpdate(props_updateSignals, state_updateSignals, props, state, nextProps, nextState, debug, componentName) {\r\n    \r\n    const propsUpdated = isChanged(props_updateSignals, props, nextProps, debug, `[${componentName}][props]`)\r\n    const stateUpdated = isChanged(state_updateSignals, state, nextState, debug, `[${componentName}][state]`)\r\n\r\n    return propsUpdated || stateUpdated;\r\n}\r\n\r\nexport function displayIndexToViewIndex(displayIndex, page, pageSize) {\r\n    if (Math.floor(displayIndex / pageSize) === page) {\r\n        const viewIndex = displayIndex % pageSize;\r\n        return viewIndex;\r\n    }\r\n}\r\n\r\nexport function displayIndexesToViewIndex(displayIndexes, page, pageSize, returnObject=false) {\r\n    return displayIndexes.reduce((acuumulator, displayIndex) => {\r\n        const viewIndex = displayIndexToViewIndex(displayIndex, page, pageSize)\r\n        if (viewIndex !== undefined) {\r\n            if (returnObject) {\r\n                acuumulator[viewIndex] = true;\r\n            } else {\r\n                acuumulator.push(viewIndex)\r\n            }\r\n        }\r\n        return acuumulator;\r\n    }, returnObject ? {} : []);\r\n}\r\n\r\nexport function viewIndexToDisplayIndex(viewIndex, page, pageSize) {\r\n    const displayIndex = (pageSize * page) + viewIndex;\r\n    return displayIndex;\r\n}\r\n\r\nexport function viewIndexToDisplayIndexes(viewIndexes, page, pageSize, returnObject=false) {\r\n    return viewIndexes.reduce((acuumulator, viewIndex) => {\r\n        const displayIndex = viewIndexToDisplayIndex(viewIndex, page, pageSize)\r\n        if (returnObject) {\r\n            acuumulator[displayIndex] = true;\r\n        } else {\r\n            acuumulator.push(displayIndex)\r\n        }\r\n        return acuumulator;\r\n    }, returnObject ? {} : []);\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Button\r\n} from 'reactstrap';\r\n\r\nclass FileInputButton extends React.PureComponent {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.fileInputRef = React.createRef();\r\n\t\tthis.simulateClick = this.simulateClick.bind(this);\r\n\t\tthis.change = this.change.bind(this);\r\n\t\tthis.state = {\r\n\t\t\tfile: undefined\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tif (prevState.file !== this.state.file) {\r\n\t\t\tthis.props.onChange(this.state.file);\r\n\t\t}\r\n\t}\r\n\r\n\tsimulateClick() {\r\n\t\tthis.fileInputRef.current.click();\r\n\t}\r\n\r\n    change(files) {\r\n\t\tlet selectedFile;\r\n        if (files.length > 0) {\r\n            const file = files[0]\r\n            if (file) {\r\n\t\t\t\tselectedFile = file;\r\n            }\r\n\t\t}\r\n\r\n\t\tthis.setState({ \r\n\t\t\tfile: selectedFile\r\n\t\t});\r\n    }\r\n\r\n  \trender() {      \r\n\t\treturn <div>\r\n\t\t\t<input ref={this.fileInputRef} style={{'display': 'none'}} type='file' id='file' accept={this.props.accept} onChange={ (e) => this.change(e.target.files) } />\r\n\t\t\t<Button style={this.props.style} color={this.props.color} size={this.props.size} onClick={this.simulateClick}>\r\n\t\t\t\t{this.props.text}\r\n\t\t\t</Button>\r\n\t\t\t{this.state.file ? this.state.file.name : ''}\r\n\t\t</div>\r\n  }\r\n}\r\n\r\nexport default FileInputButton;\r\n","import React from 'react';\r\nimport { mapToArray } from '../../../Utils'\r\nimport FileInputButton from '../../../file_input_button/FileInputButton';\r\n\r\nclass DatasetLocalSelector extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.change = this.change.bind(this);\r\n        this.state = {\r\n            dataset: undefined\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.dataset !== this.state.dataset) {\r\n            this.props.onChange(this.state.dataset);\r\n        }\r\n    }\r\n\r\n    change(file) {\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onloadend = (e) => {\r\n                const array = mapToArray(JSON.parse(e.target.result), 'passage_id');\r\n                this.setState({ \r\n                    dataset: array \r\n                });\r\n            };\r\n            reader.readAsText(file);\r\n        } else {\r\n            this.setState({ \r\n                dataset: undefined \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <FileInputButton accept='.json' text='Choose File' size='md' color='primary' style={{width: '100%'}}\r\n                onChange={this.change}/>\r\n    }\r\n}\r\n\r\nexport default DatasetLocalSelector;\r\n","import React from 'react';\r\nimport { API_ROOT } from '../../../../api-config';\r\nimport { mapToArray } from '../../../Utils';\r\nimport {\r\n    Dropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem\r\n} from 'reactstrap';\r\n\r\nclass DatasetListSelector extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggle = this.toggle.bind(this);\r\n        this.change = this.change.bind(this);\r\n        this.state = {\r\n            dropdownOpen: false,\r\n            datasets_names: [],\r\n            selected: undefined\r\n        };\r\n    }\r\n\r\n    toggle() {\r\n        this.setState(prevState => ({\r\n          dropdownOpen: !prevState.dropdownOpen\r\n        }));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.mounted = true;\r\n        this.getDatasetList();\r\n    }\r\n    \r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.selected !== this.state.selected) {\r\n            this.props.onChange(undefined);\r\n            this.getDataset(this.state.selected);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.mounted = false;\r\n    }\r\n\r\n    change(e) {\r\n        this.setState({selected: e.currentTarget.getAttribute(\"dataset-name\")});\r\n    }\r\n\r\n    getDatasetList() {\r\n        fetch(`${API_ROOT}/dataset-list`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            } \r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((json) => {\r\n            if (this.mounted) {\r\n                this.setState({datasets_names: json, selected: json.length > 0 ? json[0] : undefined})\r\n            }\r\n        }).catch((error) => {\r\n            console.error(error);\r\n        });\r\n    }\r\n\r\n    getDataset(dataset_name) {\r\n        if (dataset_name) {\r\n\r\n            fetch(`${API_ROOT}/dataset?name=${encodeURIComponent(dataset_name)}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                } \r\n            }).then((response) => {\r\n                return response.json();\r\n            }).then((json) => {\r\n                const array = mapToArray(json, 'passage_id')\r\n                this.props.onChange(array);\r\n            }).catch((error) => {\r\n                console.error(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const datasets_names = this.state.datasets_names;\r\n\r\n        return (\r\n          <Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggle}>\r\n            <DropdownToggle color=\"primary\" caret style={{width: '100%'}}>\r\n                {this.state.selected ? this.state.selected : \"Select...\"}\r\n            </DropdownToggle>\r\n            <DropdownMenu>\r\n                {datasets_names.map(dataset_name => <DropdownItem onClick={this.change} key={dataset_name} dataset-name={dataset_name}>{dataset_name}</DropdownItem>)}\r\n            </DropdownMenu>\r\n          </Dropdown>\r\n        );\r\n      }\r\n}\r\n\r\nexport default DatasetListSelector;\r\n","import React from 'react';\r\nimport {\r\n    Input,\r\n    FormGroup,\r\n    Label\r\n} from 'reactstrap';\r\n\r\nclass Checkbox extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.change = this.change.bind(this);\r\n        this.state = { \r\n            checked: this.props.checked\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        this.props.onChange(this.state.checked)\r\n    }\r\n\r\n    change() {\r\n        this.setState({ checked: !this.state.checked });\r\n    }\r\n\r\n    render() {\r\n        return <FormGroup check style={{...(this.props.inline ? {display: 'inline'} : {}), ...this.props.style}}>\r\n            <Label check>\r\n                <Input type=\"checkbox\" \r\n                style={(this.props.style && \r\n                        this.props.style.fontSize && \r\n                        this.props.style.fontSize === 'smaller') ? {marginLeft: '-1rem', marginTop: '0.15rem'}: {}}\r\n                onChange={this.change}\r\n                checked={this.state.checked || false} \r\n                />{this.props.text}\r\n            </Label>\r\n        </FormGroup>;\r\n    }\r\n}\r\n \r\nexport default Checkbox;","import React from 'react';\r\nimport DatasetLocalSelector from './DatasetLocalSelector';\r\nimport DatasetListSelector from './DatasetListSelector';\r\nimport {\r\n    ListGroup,\r\n    ListGroupItem\r\n} from 'reactstrap';\r\nimport Checkbox from '../../../checkbox/Checkbox';\r\n\r\nclass DatasetLoader extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.useLocalDatasetChange = this.useLocalDatasetChange.bind(this);\r\n        this.datasetChange = this.datasetChange.bind(this);\r\n        this.state = {\r\n            dataset: undefined,\r\n            useLocalDataset: this.props.useLocalDataset\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.dataset !== this.state.dataset) {\r\n            this.props.onDatasetChange(this.state.dataset);\r\n        }\r\n    }\r\n\r\n    useLocalDatasetChange(newChecked) {\r\n        this.setState({ \r\n            useLocalDataset: newChecked,\r\n            dataset: undefined\r\n        });\r\n    }\r\n\r\n    datasetChange(dataset) {\r\n        this.setState({ dataset: dataset })\r\n    }\r\n\r\n    render() {\r\n        return <ListGroup>\r\n                {this.props.allowSourceSelection ? <ListGroupItem>\r\n                    <Checkbox text={'Use Local Dataset'} \r\n                            checked={this.state.useLocalDataset} \r\n                            onChange={this.useLocalDatasetChange}></Checkbox>\r\n                </ListGroupItem> : null}\r\n                <ListGroupItem>\r\n                    <DatasetSelector onChange={this.datasetChange} local={this.state.useLocalDataset}/>\r\n                </ListGroupItem>\r\n            </ListGroup>\r\n    }\r\n}\r\n\r\nfunction DatasetSelector(props) {\r\n    if (props.local) {\r\n        return <DatasetLocalSelector onChange={props.onChange} />\r\n    }\r\n    return <DatasetListSelector onChange={props.onChange} />\r\n}\r\n\r\nexport default DatasetLoader;\r\n","import React from 'react';\r\nimport FileInputButton from '../../file_input_button/FileInputButton';\r\n\r\nclass PredictionsLoader extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.change = this.change.bind(this);\r\n        this.state = {\r\n            predictions: undefined\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.predictions !== this.state.predictions) {\r\n            this.props.onChange(this.state.predictions);\r\n        }\r\n    }\r\n\r\n    change(file) {\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onloadend = (e) => {\r\n                const predictions = [];\r\n                e.target.result.split('\\n').forEach(line => {\r\n                    if (line) {\r\n                        predictions.push(JSON.parse(line));\r\n                    }\r\n                });\r\n                this.setState({ \r\n                    predictions: predictions \r\n                });\r\n            };\r\n            reader.readAsText(file);\r\n        } else {\r\n            this.setState({ \r\n                predictions: undefined \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <FileInputButton accept='.json, .jsonl' text='Choose File' size='md' color='primary' style={{width: '100%'}}\r\n        onChange={this.change}/>\r\n    }\r\n}\r\n\r\nexport default PredictionsLoader;\r\n","\r\nexport const noAnswerType = {'key': 'none', 'value': 'None'};\r\nexport const noPredictionType = {'key': 'none', 'value': 'None'};\r\nexport const answerTypesConst = [\r\n    {'key': 'multi_span', 'value': 'Multi Span', 'accessor': 'spans'},\r\n    {'key': 'single_span', 'value': 'Single Span', 'accessor': 'spans'},\r\n    {'key': 'number', 'value': 'Number', 'accessor': 'number'},\r\n    {'key': 'date', 'value': 'Date', 'accessor': 'date'}\r\n];\r\n\r\nexport function getAnswerStringForDisplayAndType(answer) {\r\n    let displayAnswer = '';\r\n    let answerType = noAnswerType;\r\n    if ('number' in answer && (answer['number'] === 0 || answer['number'])) {\r\n        const number = answer['number'];\r\n        const number_value = Number(number);\r\n        if (!isNaN(number_value)) {\r\n            displayAnswer = number_value.toString();\r\n        } else {\r\n            displayAnswer = number;\r\n        }\r\n        answerType = answerTypesConst[2]\r\n    } else if ('spans' in answer && answer['spans'] && answer['spans'].length > 0) {\r\n        const spans = answer['spans'];\r\n        if (spans.length === 1) {\r\n            displayAnswer = spans[0];\r\n            answerType = answerTypesConst[1];\r\n        } else {\r\n            displayAnswer = [...spans].sort().join(' ┆ ');           \r\n            answerType = answerTypesConst[0];\r\n        }\r\n    } else if ('date' in answer && answer['date']) {\r\n        const date = answer['date']\r\n        if (['day', 'month', 'year'].some(prop => date[prop] === 0 || date[prop])) {\r\n            displayAnswer = JSON.stringify(date, null, 2);\r\n            answerType = answerTypesConst[3]\r\n        }\r\n    }\r\n    return {'displayAnswer': displayAnswer, answerType}\r\n}\r\n\r\nexport function getAnswerForEvaluation(answer) {\r\n    // based on answer_json_to_strings from drop_eval.py of allennlp\r\n    let answerForEvaluation = [];\r\n    if ('number' in answer && (answer['number'] === 0 || answer['number'])) {\r\n        const number = answer['number'];\r\n        const number_value = Number(number);\r\n        if (!isNaN(number_value)) {\r\n            answerForEvaluation = [number_value.toString()];\r\n        } else {\r\n            answerForEvaluation = [String(number)];\r\n        }\r\n    } else if ('spans' in answer && answer['spans'] && answer['spans'].length > 0) {\r\n        answerForEvaluation = answer['spans']\r\n    } else if ('date' in answer && answer['date']) {\r\n        const date = answer['date']\r\n        answerForEvaluation = [];\r\n        ['day', 'month', 'year'].forEach(prop => {\r\n            if (date[prop] === 0 || date[prop]) {\r\n                /* \r\n                better than creating a single string, as it\r\n                allows us to search the passage per date member\r\n                */\r\n                answerForEvaluation.push(String(date[prop]))\r\n            }\r\n        });\r\n    }\r\n    return answerForEvaluation.sort();\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Input,\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Button\r\n} from 'reactstrap';\r\nimport Checkbox from '../../checkbox/Checkbox';\r\n\r\nclass SearchFilter extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchTextChange = this.searchTextChange.bind(this);\r\n        this.filterQuestionsChange = this.filterQuestionsChange.bind(this);\r\n        this.submit = this.submit.bind(this);\r\n        this.state = { \r\n            ...this.props.searchProps,\r\n            draftSearchText: '',\r\n            draftFilterQuestions: this.props.searchProps.filterQuestions\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.searchText !== this.state.searchText || \r\n            prevState.filterQuestions !== this.state.filterQuestions) {\r\n            this.props.onChange({\r\n                searchText: this.state.searchText,\r\n                filterQuestions: this.state.filterQuestions\r\n            });\r\n        }\r\n    }\r\n\r\n    searchTextChange(event) {\r\n        const newState = { draftSearchText: event.target.value }\r\n        if (this.props.instantSearch) {\r\n            newState.searchText = prepareText(newState.draftSearchText);\r\n        }\r\n        this.setState(newState);\r\n    }\r\n\r\n    filterQuestionsChange(newChecked) {\r\n        const filterQuestions = newChecked;\r\n        const newState = { draftFilterQuestions: filterQuestions }\r\n        if (this.props.instantSearch) {\r\n            newState.filterQuestions = newState.draftFilterQuestions;\r\n        }\r\n        this.setState(newState);\r\n    }\r\n\r\n    submit(event) {\r\n        this.setState({ \r\n            searchText: prepareText(this.state.draftSearchText),\r\n            filterQuestions: this.state.draftFilterQuestions\r\n        });\r\n    }\r\n\r\n    render() { \r\n            return <div>\r\n                <ListGroup>\r\n                    <ListGroupItem>\r\n                        <Input type='text' value={this.state.draftSearchText} onChange={this.searchTextChange} />\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                        <Checkbox text={'Filter Questions'} \r\n                                checked={this.state.draftFilterQuestions}\r\n                                onChange={this.filterQuestionsChange}></Checkbox>\r\n                    </ListGroupItem>\r\n                </ListGroup>\r\n                {!this.props.instantSearch ? \r\n                <ListGroup className='list-group-horizontal mt-1'>\r\n                    <ListGroupItem style={{width: '100%'}}>\r\n                        Searched{this.state.filterQuestions ? ' (Filter Questions)': ''}: <span className='text-info'>{this.state.searchText}</span>\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                        <Button color='primary' onClick={this.submit}>Submit</Button>\r\n                    </ListGroupItem>\r\n                </ListGroup> : null}\r\n            </div>;\r\n    }\r\n}\r\n\r\nfunction prepareText(text) {\r\n    return text.toLowerCase();\r\n}\r\n\r\nexport default SearchFilter;","import React from 'react';\r\nimport {\r\n    Input,\r\n    FormGroup,\r\n    Label\r\n} from 'reactstrap';\r\nimport { isChanged } from '../Utils';\r\n\r\nclass CheckboxList extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.change = this.change.bind(this);\r\n        this.state = { \r\n            checked: this.props.checked\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (isChanged(['checked'], prevProps, this.props)) {\r\n            this.setState({ checked: this.props.checked }, () => {\r\n                this.props.onChange(this.state.checked)\r\n            });\r\n        }\r\n    }\r\n\r\n    change(e) {\r\n        const changedKey = e.currentTarget.getAttribute('option-key');\r\n        const changedKeyIndex = this.state.checked.indexOf(changedKey);\r\n        let newChecked;\r\n        if (changedKeyIndex !== -1) {\r\n            newChecked = [...this.state.checked];\r\n            newChecked.splice(changedKeyIndex, 1);\r\n        } else {\r\n            newChecked = [...this.state.checked, changedKey];\r\n        }\r\n        this.setState({ checked: newChecked }, () => this.props.onChange(this.state.checked));\r\n    }\r\n\r\n    render() {\r\n        return this.props.options.map(option => {\r\n            return <FormGroup check key={option.key}>\r\n                        <Label check>\r\n                            <Input type=\"checkbox\" \r\n                            onChange={this.change}\r\n                            option-key={option.key}\r\n                            checked={(this.state.checked && \r\n                                this.state.checked.includes(option.key)) || \r\n                                false} \r\n                            />{option.value}\r\n                        </Label>\r\n                    </FormGroup>\r\n        });\r\n    }\r\n}\r\n \r\nexport default CheckboxList;","import React from 'react';\r\nimport {\r\n    Input,\r\n    InputGroupAddon,\r\n    InputGroupText,\r\n    InputGroup\r\n} from 'reactstrap';\r\nimport { isChanged } from '../Utils';\r\n\r\nclass RangeInput extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.lowChange = this.lowChange.bind(this);\r\n        this.highChange = this.highChange.bind(this);\r\n        this.state = { \r\n            low: this.props.initial.low,\r\n            high: this.props.initial.high,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (isChanged(['low', 'high'], prevState, this.state)) {\r\n            this.props.onChange(this.props.metric, this.state)\r\n        }\r\n    }\r\n\r\n    lowChange(event) {\r\n        if (!isNaN(event.target.value)) {\r\n            const newLow = parseFloat(event.target.value)\r\n            this.setState({ \r\n                low: newLow\r\n            });\r\n        }\r\n    }\r\n    highChange(event) {\r\n        if (!isNaN(event.target.value)) {\r\n            const newHigh = parseFloat(event.target.value)\r\n            this.setState({ \r\n                high: newHigh\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n        <InputGroup tag='span'>\r\n            <Input onChange={this.lowChange} value={this.state.low} type='number' step={this.props.step} style={{padding: '0px', textAlign: 'center'}}></Input>\r\n            <InputGroupAddon tag='span' addonType=\"append\">\r\n                <InputGroupText>≤</InputGroupText>\r\n            </InputGroupAddon>\r\n            <span style={{display: 'flex', alignItems: 'center', margin: '5px'}}>{this.props.metric}</span>\r\n            <InputGroupAddon tag='span' addonType=\"prepend\">\r\n                <InputGroupText>≤</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onChange={this.highChange} value={this.state.high} type='number' step={this.props.step} style={{padding: '0px', textAlign: 'center'}}></Input>\r\n        </InputGroup>\r\n      </div>;\r\n    }\r\n}\r\n \r\nexport default RangeInput;","import React from 'react';\r\nimport DatasetLoader from './dataset-loader/DatasetLoader';\r\nimport PredictionsLoader from './PredictionsLoader';\r\nimport {\r\n    ListGroup,\r\n    ListGroupItem,\r\n    CardGroup,\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    Button,\r\n    Container\r\n} from 'reactstrap';\r\nimport { shouldUpdate, isChanged } from '../../Utils';\r\nimport { answerTypesConst } from '../AnswersUtils';\r\nimport SearchFilter from './SearchFilter';\r\nimport CheckboxList from '../../checkbox_list/CheckboxList';\r\nimport RangeInput from '../../range_input/RangeInput';\r\nimport Checkbox from '../../checkbox/Checkbox';\r\n\r\nconst props_updateSignals = ['predictionTypes']\r\nconst state_updateSignals = ['dataset', 'predictions', 'filteredAnswerTypes', 'answerTypeFilterFirstOnly', \r\n                            'answerTypeFilterStrict', 'clippedFilter', 'unclippedFilter',\r\n                            'filteredPredictionTypes', 'searchProps', 'F1Range', 'EMRange']\r\nclass ExplorerSettings extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.datasetChange = this.datasetChange.bind(this);\r\n        this.predictionsChange = this.predictionsChange.bind(this);\r\n        this.filteredAnswerTypesChange = this.filteredAnswerTypesChange.bind(this);\r\n        this.answerTypeFilterFirstOnlyChange = this.answerTypeFilterFirstOnlyChange.bind(this);\r\n        this.answerTypeFilterStrictChange = this.answerTypeFilterStrictChange.bind(this);\r\n        this.clippedFilterChange = this.clippedFilterChange.bind(this);\r\n        this.unclippedFilterChange = this.unclippedFilterChange.bind(this);\r\n        this.filteredPredictionTypesChange = this.filteredPredictionTypesChange.bind(this);\r\n        this.searchFilterChange = this.searchFilterChange.bind(this);\r\n        this.rangeFilterChange = this.rangeFilterChange.bind(this);\r\n        this.state = {\r\n            filteredAnswerTypes: this.props.filteredAnswerTypes,\r\n            answerTypeFilterFirstOnly: this.props.answerTypeFilterFirstOnly,\r\n            answerTypeFilterStrict: this.props.answerTypeFilterStrict,\r\n            clippedFilter: this.props.clippedFilter,\r\n            unclippedFilter: this.props.unclippedFilter,\r\n            filteredPredictionTypes: this.props.filteredPredictionTypes,\r\n            searchProps: this.props.searchProps,\r\n            F1Range: this.props.F1Range,\r\n            EMRange: this.props.EMRange\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        const update = shouldUpdate(props_updateSignals, state_updateSignals, \r\n            this.props, this.state, \r\n            nextProps, nextState, \r\n            false, this.constructor.name);\r\n        return update;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (isChanged(['predictionTypes'], prevProps, this.props)) {\r\n            this.setState({ filteredPredictionTypes: this.props.predictionTypes.map(predictionType => predictionType.key) });\r\n        }\r\n        this.props.onChange(this.state);\r\n    }\r\n\r\n    datasetChange(dataset) {\r\n        this.setState({ dataset });\r\n    }\r\n\r\n    predictionsChange(predictions) {\r\n        this.setState({ predictions });\r\n    }\r\n\r\n    filteredAnswerTypesChange(filteredAnswerTypes) {\r\n        this.setState({ filteredAnswerTypes });\r\n    }\r\n    \r\n    answerTypeFilterFirstOnlyChange(answerTypeFilterFirstOnly) {\r\n        this.setState({ answerTypeFilterFirstOnly });\r\n    }\r\n\r\n    answerTypeFilterStrictChange(answerTypeFilterStrict) {\r\n        this.setState({ answerTypeFilterStrict });\r\n    }\r\n\r\n    clippedFilterChange(clippedFilter) {\r\n        this.setState({ clippedFilter });\r\n    }\r\n\r\n    unclippedFilterChange(unclippedFilter) {\r\n        this.setState({ unclippedFilter });\r\n    }\r\n\r\n    filteredPredictionTypesChange(filteredPredictionTypes) {\r\n        this.setState({ filteredPredictionTypes });\r\n    }\r\n\r\n    searchFilterChange(searchProps) {\r\n        this.setState({ searchProps });\r\n    }\r\n\r\n    rangeFilterChange(metric, range) {\r\n        this.setState({ [`${metric}Range`]: range });\r\n    }\r\n\r\n    render() {\r\n        return <Container className='ml-0' fluid>\r\n            <CardGroup className='row'>\r\n                <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Dataset</CardHeader>\r\n                    <CardBody>\r\n                        <DatasetLoader onDatasetChange={this.datasetChange} \r\n                                        useLocalDataset={this.props.useLocalDataset} \r\n                                        allowSourceSelection={this.props.allowSourceSelection} />\r\n                    </CardBody>\r\n                </Card>\r\n                <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Table Operations</CardHeader>\r\n                    <CardBody style={{height: 0, overflow: 'auto'}}>\r\n                        <ListGroup>\r\n                            <ListGroupItem>\r\n                                <Button color='primary' size='sm' style={{width: '100%'}} onClick={() => {\r\n                                    if (this.props.expandAllFunc) {\r\n                                        this.props.expandAllFunc()\r\n                                    }\r\n                                }}>EXPAND ALL\r\n                                </Button>\r\n                            </ListGroupItem>\r\n                            <ListGroupItem>\r\n                                <Button color='primary' size='sm' style={{width: '100%'}} onClick={() => {\r\n                                    if (this.props.collapseAllFunc) {\r\n                                        this.props.collapseAllFunc()\r\n                                    }\r\n                                }}>COLLAPSE ALL\r\n                                </Button>\r\n                            </ListGroupItem>\r\n                            <ListGroupItem>\r\n                                <Button color='primary' size='sm' style={{width: '100%'}} onClick={() => {\r\n                                    if (this.props.clearSelectedAnswersFunc) {\r\n                                        this.props.clearSelectedAnswersFunc()\r\n                                    }\r\n                                }}>CLEAR SELECTED ANSWERS\r\n                                </Button>\r\n                            </ListGroupItem>\r\n                        </ListGroup>\r\n                    </CardBody>\r\n                </Card>\r\n                <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>\r\n                        Answer Type Filter\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                        <ListGroup className='list-group-horizontal'>\r\n                            <ListGroupItem style={{width: '100%'}}>\r\n                                <CheckboxList \r\n                                    onChange={this.filteredAnswerTypesChange} \r\n                                    checked={this.state.filteredAnswerTypes} \r\n                                    options={answerTypesConst}></CheckboxList>\r\n                            </ListGroupItem>\r\n                            <ListGroupItem style={{width: '100%'}}>\r\n                                <Checkbox text={'Primary Only'} inline={false}\r\n                                    checked={this.state.answerTypeFilterFirstOnly}\r\n                                    onChange={this.answerTypeFilterFirstOnlyChange}></Checkbox>\r\n                                <Checkbox text={'Strict'} inline={false}\r\n                                    checked={this.state.answerTypeFilterStrict}\r\n                                    onChange={this.answerTypeFilterStrictChange}></Checkbox>\r\n                            </ListGroupItem>\r\n                        </ListGroup>\r\n                    </CardBody>\r\n                </Card>\r\n                <Card className='col-sm-6 p-0'>\r\n                    <CardHeader>Search</CardHeader>\r\n                    <CardBody>\r\n                        <SearchFilter onChange={this.searchFilterChange} \r\n                        instantSearch={this.props.instantSearch} searchProps={this.props.searchProps} />\r\n                    </CardBody>\r\n                </Card>\r\n            </CardGroup>\r\n            <CardGroup className='row'>\r\n                <Card className='col-sm-2 p-0'>\r\n                        <CardHeader>Predictions</CardHeader>\r\n                        <CardBody>\r\n                            <PredictionsLoader onChange={this.predictionsChange} />\r\n                        </CardBody>\r\n                </Card>\r\n                {this.state.predictions ? <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Prediction Head</CardHeader>\r\n                    <CardBody>\r\n                        <CheckboxList onChange={this.filteredPredictionTypesChange} checked={this.state.filteredPredictionTypes} options={this.props.predictionTypes}></CheckboxList>\r\n                    </CardBody>\r\n                </Card> : null}\r\n                {this.state.predictions ? <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Score Filter</CardHeader>\r\n                    <CardBody>\r\n                    <ListGroup>\r\n                    <ListGroupItem>\r\n                        <RangeInput metric='F1' initial={this.props.F1Range} step='0.01' onChange={this.rangeFilterChange}></RangeInput>\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                        <RangeInput metric='EM' initial={this.props.EMRange} step='0.01' onChange={this.rangeFilterChange}></RangeInput>\r\n                    </ListGroupItem>\r\n                    </ListGroup>\r\n                    </CardBody>\r\n                </Card> : null}\r\n                {this.state.predictions ? <Card className='col-sm-2 p-0'>\r\n                    <CardHeader>Clipped Filter</CardHeader>\r\n                    <CardBody>\r\n                        <Checkbox text={'Show Clipped'} inline={false}\r\n                            checked={this.state.clippedFilter}\r\n                            onChange={this.clippedFilterChange}></Checkbox>\r\n                        <Checkbox text={'Show Unclipped'} inline={false}\r\n                            checked={this.state.unclippedFilter}\r\n                            onChange={this.unclippedFilterChange}></Checkbox>\r\n                    </CardBody>\r\n                </Card> : null}\r\n            </CardGroup>\r\n        </Container>\r\n    }\r\n}\r\n\r\nexport default ExplorerSettings;","import styled from 'styled-components';\r\n\r\nconst WrapDiv = styled.div`\r\n    white-space: pre-wrap;       /* css-3 */\r\n    white-space: -moz-pre-wrap;  /* Mozilla, since 1999 */\r\n    white-space: -pre-wrap;      /* Opera 4-6 */\r\n    white-space: -o-pre-wrap;    /* Opera 7 */\r\n    word-wrap: break-word;       /* Internet Explorer 5.5+ */\r\n`;\r\n\r\nexport default WrapDiv;","import { answerTypesConst, getAnswerStringForDisplayAndType, getAnswerForEvaluation,\r\n    noAnswerType, noPredictionType } from '../AnswersUtils';\r\nimport { intersect } from '../../Utils';\r\n\r\nexport function processDataHelper(dataset, predictions) {\r\n\r\n    let hasValidatedAnswers = false;\r\n    let hasValidPredictions = false;\r\n    let passage_id_to_displayIndex = {};\r\n    let passage_id_to_queries_displayIndexes = {};\r\n    let predictionTypes = []\r\n    let data = [];\r\n    if (dataset) {\r\n        const reduced = dataset.reduce(process_row, {\r\n            data: [],\r\n            hasValidatedAnswers: false,\r\n            passage_id_to_displayIndex: {},\r\n            passage_id_to_queries_displayIndexes: {}\r\n        });\r\n        data = reduced.data;\r\n        hasValidatedAnswers = reduced.hasValidatedAnswers;\r\n        passage_id_to_displayIndex = reduced.passage_id_to_displayIndex;\r\n        passage_id_to_queries_displayIndexes = reduced.passage_id_to_queries_displayIndexes;\r\n\r\n        if (predictions) {\r\n            const keyToPredictionType = {}\r\n            for (let i=0; i < predictions.length; i++) {\r\n                const prediction = predictions[i];\r\n\r\n                const passage_id = prediction.passage_id;\r\n                const query_id = prediction.query_id;\r\n\r\n                const passage_displayIndex =passage_id_to_displayIndex[passage_id];\r\n                if (passage_displayIndex !== undefined) {\r\n                    const row = data[passage_displayIndex];\r\n\r\n                    const query_displayIndex = passage_id_to_queries_displayIndexes[passage_id][query_id];\r\n                    if (query_displayIndex !== undefined) {\r\n                        hasValidPredictions = true;\r\n                        let qa_pair = row.qa_pairs[passage_id_to_queries_displayIndexes[passage_id][query_id]]\r\n                        if (qa_pair.prediction) {\r\n                            // only needed because there's a duplication of query_id in the dev dataset\r\n                            qa_pair = row.qa_pairs.find(q => q.query_id === qa_pair.query_id && !q.prediction)\r\n                            if (!qa_pair) {\r\n                                continue;\r\n                            }\r\n                        }\r\n\r\n                        let predictionType = keyToPredictionType[prediction.predicted_ability]\r\n                        if (!predictionType) {\r\n                            predictionType = keyToPredictionType[prediction.predicted_ability] = {\r\n                                'key': prediction.predicted_ability, \r\n                                'value': prediction.predicted_ability\r\n                            };\r\n                            predictionTypes.push(predictionType);\r\n                        }\r\n\r\n                        const predictionValue = prediction.answer.value;\r\n\r\n                        qa_pair.prediction = Array.isArray(predictionValue) ? predictionValue : [predictionValue];\r\n                        qa_pair.displayPrediction = getAnswerStringForDisplayAndType({'spans': qa_pair.prediction}).displayAnswer;\r\n                        qa_pair.predictionType = predictionType;\r\n                        qa_pair.maximizingGroundTruth = prediction.maximizing_ground_truth.sort();\r\n                        qa_pair.f1 = prediction.f1;\r\n                        qa_pair.em = prediction.em;\r\n                        qa_pair.loss = prediction.loss;\r\n                        qa_pair.max_passage_length = prediction.max_passage_length === -1 ? undefined : prediction.max_passage_length;\r\n\r\n                        if (predictionType.key !== 'arithmetic') {\r\n                            qa_pair.evaluationPrediction = getAnswerForEvaluation({'spans': qa_pair.prediction});\r\n                        } else {\r\n                            const numbers = []\r\n                            const signs = []                           \r\n                            prediction.answer.numbers.filter(number => number.sign !== 0).forEach(number => {\r\n                                numbers.push(number.value)\r\n                                signs.push(number.sign === -1 ? '-' : '+')\r\n                            })\r\n\r\n                            if (numbers.length <= 1) {\r\n                                qa_pair.evaluationPrediction = getAnswerForEvaluation({'spans': qa_pair.prediction});\r\n                            } else {\r\n                                qa_pair.displayPrediction = `${\r\n                                    numbers.map((number, index) => {\r\n                                        const sign = signs[index]\r\n                                        return `${index === 0 && sign === '+' ? '' : sign}${index === 0 ? '' : ' '}${number.toLocaleString()}`;\r\n                                    }).join(' ')\r\n                                } = ${Number(qa_pair.displayPrediction).toLocaleString()}`\r\n\r\n                                qa_pair.evaluationPrediction = getAnswerForEvaluation({'spans': numbers.map(x => x.toLocaleString())});\r\n                            }\r\n                        }\r\n\r\n                        const maximizingGroundTruth = qa_pair.maximizingGroundTruth;\r\n                        const maximizingGroundTruthIndex = qa_pair.evaluationAnswers.findIndex(evaluationAnswer => {\r\n                            if (evaluationAnswer.length !== maximizingGroundTruth.length) {\r\n                                return false;\r\n                            }\r\n                            for (let i = 0; i < evaluationAnswer.length; i++) {\r\n                                if (evaluationAnswer[i].toLowerCase() !== maximizingGroundTruth[i].toLowerCase()) {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                            return true;\r\n                        });\r\n                        if (maximizingGroundTruthIndex !== -1) {\r\n                            qa_pair.maximizingGroundTruthIndex = maximizingGroundTruthIndex;\r\n                        }\r\n                        \r\n                        const predictionSpans = prediction.answer.spans;\r\n                        if (predictionSpans && predictionSpans.length > 0) {\r\n                            qa_pair.predictionSpans = predictionSpans;\r\n                        }\r\n                    } else {\r\n                        continue;\r\n                    }\r\n                }\r\n                else {\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    predictionTypes.sort()\r\n    predictionTypes.push(noAnswerType)\r\n\r\n    return {\r\n        data,\r\n        hasValidatedAnswers,\r\n        hasValidPredictions,\r\n        predictionTypes\r\n    };\r\n}\r\n\r\nfunction process_row(accumulator, row, index) {\r\n    const passage_id = row.passage_id;\r\n    const passage_displayIndex = accumulator.data.length;\r\n\r\n    const reduced = row.qa_pairs.reduce(process_qa_pair, {\r\n        passage_id: passage_id, \r\n        qa_pairs: [],\r\n        hasValidatedAnswers: accumulator.hasValidatedAnswers,\r\n        query_id_to_displayIndex: {}\r\n    });\r\n    const qa_pairs = reduced.qa_pairs;\r\n    accumulator.hasValidatedAnswers = reduced.hasValidatedAnswers;\r\n    const query_id_to_displayIndex = reduced.query_id_to_displayIndex;\r\n\r\n    const hasQuestions = qa_pairs.length !== 0;\r\n    const isValid = hasQuestions;\r\n\r\n    if (isValid) {\r\n        const reduced_row = {\r\n            ...row,\r\n            passage: row.passage.trim(),\r\n            qa_pairs,\r\n            passage_index: index\r\n        }\r\n        \r\n        accumulator.data.push(reduced_row);\r\n        accumulator.passage_id_to_displayIndex[passage_id] = passage_displayIndex;\r\n        accumulator.passage_id_to_queries_displayIndexes[passage_id] = query_id_to_displayIndex\r\n    }\r\n    return accumulator;\r\n}\r\n\r\nfunction process_qa_pair(accumulator, qa_pair, query_index) {\r\n    const query_displayIndex = accumulator.qa_pairs.length;\r\n    const passage_id = accumulator.passage_id;\r\n\r\n    if (!accumulator.hasValidatedAnswers && qa_pair.validated_answers && qa_pair.validated_answers.length > 0) {\r\n        accumulator.hasValidatedAnswers = true;\r\n    }\r\n\r\n    const {displayAnswer: firstDisplayAnswer, answerType: firstAnswerType} = getAnswerStringForDisplayAndType(qa_pair.answer);\r\n    const displayAnswers = [firstDisplayAnswer];\r\n    const answersTypes = [firstAnswerType];\r\n\r\n    const evaluationAnswers = [getAnswerForEvaluation(qa_pair.answer)]\r\n\r\n    if (firstAnswerType === noAnswerType) {\r\n        return accumulator;\r\n    }\r\n\r\n    if (qa_pair.validated_answers && qa_pair.validated_answers.length > 0) {\r\n        qa_pair.validated_answers.forEach(validatedAnswer => {\r\n            const evaluationAnswer = getAnswerForEvaluation(validatedAnswer)\r\n\r\n            const alreadyAdded = evaluationAnswers.some(addedEvaluationAnswer => {\r\n                if (addedEvaluationAnswer.length !== evaluationAnswer.length) {\r\n                    return false;\r\n                }\r\n                for (let i = 0; i < evaluationAnswer.length; i++) {\r\n                    if (evaluationAnswer[i].toLowerCase() !== addedEvaluationAnswer[i].toLowerCase()) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n\r\n            if (!alreadyAdded) {\r\n                const {displayAnswer, answerType} = getAnswerStringForDisplayAndType(validatedAnswer);\r\n                displayAnswers.push(displayAnswer);\r\n                answersTypes.push(answerType);\r\n\r\n                evaluationAnswers.push(getAnswerForEvaluation(validatedAnswer));\r\n            }\r\n        });\r\n    }\r\n    \r\n    accumulator.qa_pairs.push({\r\n        ...qa_pair,\r\n        question: qa_pair.question.trim(),\r\n        evaluationAnswers,\r\n        displayAnswers,\r\n        answersTypes,\r\n        maximizingGroundTruthIndex: 0,\r\n        query_index,\r\n        passage_id\r\n    })\r\n    accumulator.query_id_to_displayIndex[qa_pair.query_id] = query_displayIndex;\r\n    \r\n    return accumulator;\r\n}\r\n\r\n\r\nexport function filterDataHelper(internals, filteredAnswerTypes, answerTypeFilterFirstOnly, answerTypeFilterStrict, \r\n                                filteredPredictionTypes, searchProps, F1Range, EMRange, clippedFilter) {\r\n    const data = internals.data; \r\n    const filteredDataPerFilter = internals.filteredDataPerFilter;       \r\n\r\n    const searchText = searchProps.searchText;\r\n    const useTextSearch = Boolean(searchText);\r\n\r\n    if (useTextSearch) {\r\n        if (!filteredDataPerFilter.search) {\r\n            const reduced = data.reduce(searchReudcer_rows, {\r\n                filteredData: [],\r\n                searchProps,\r\n                hasValidPredictions: internals.hasValidPredictions\r\n            })\r\n            const result = reduced.filteredData;\r\n\r\n            filteredDataPerFilter.search = result;\r\n        }\r\n    }\r\n\r\n    if (!filteredDataPerFilter.answerTypes) {\r\n        if (filteredAnswerTypes.length > 0) {\r\n            if (filteredAnswerTypes.length < answerTypesConst.length || answerTypeFilterStrict) {\r\n                const reduced = data.reduce(typeFilterReudcer_rows, {\r\n                    filteredData: [],\r\n                    filteredTypes: filteredAnswerTypes,\r\n                    fields: ['answersTypes'],\r\n                    missingValue: noAnswerType,\r\n                    firstOnly: answerTypeFilterFirstOnly,\r\n                    strict: answerTypeFilterStrict\r\n                });\r\n                const result = reduced.filteredData;\r\n\r\n                filteredDataPerFilter.answerTypes = result;\r\n            }\r\n        } else {\r\n            filteredDataPerFilter.answerTypes = [];\r\n        }\r\n    }\r\n\r\n    if (internals.hasValidPredictions && !filteredDataPerFilter.predictionTypes) {\r\n        if (filteredPredictionTypes.length > 0) {\r\n            const reduced = data.reduce(typeFilterReudcer_rows, {\r\n                filteredData: [],\r\n                filteredTypes: filteredPredictionTypes,\r\n                fields: ['predictionType'],\r\n                missingValue: noPredictionType,\r\n                strict: false\r\n            });\r\n            const result = reduced.filteredData;\r\n\r\n            filteredDataPerFilter.predictionTypes = result;\r\n        } else {\r\n            filteredDataPerFilter.predictionTypes = [];\r\n        }\r\n    }\r\n\r\n    if (internals.hasValidPredictions && !filteredDataPerFilter.F1Range) {\r\n        const range = F1Range;\r\n        if (range.low <= range.high) {\r\n            const reduced = data.reduce(rangeFilterReudcer_rows, {\r\n                filteredData: [],\r\n                range,\r\n                field: 'f1'\r\n            });\r\n            const result = reduced.filteredData;\r\n\r\n            filteredDataPerFilter.F1Range = result;\r\n        } else {\r\n            filteredDataPerFilter.F1Range = [];\r\n        }\r\n    }\r\n\r\n    if (internals.hasValidPredictions && !filteredDataPerFilter.EMRange) {\r\n        const range = EMRange;\r\n        if (range.low <= range.high) {\r\n            const reduced = data.reduce(rangeFilterReudcer_rows, {\r\n                filteredData: [],\r\n                range,\r\n                field: 'em'\r\n            });\r\n            const result = reduced.filteredData;\r\n\r\n            filteredDataPerFilter.EMRange = result;\r\n        } else {\r\n            filteredDataPerFilter.EMRange = [];\r\n        }\r\n    }\r\n\r\n    if (internals.hasValidPredictions && !filteredDataPerFilter.clipped) {\r\n        const showClipped = clippedFilter.showClipped;\r\n        const showUnclipped = clippedFilter.showUnclipped;\r\n        if (showClipped || showUnclipped) {\r\n            if (showClipped && showUnclipped) {\r\n                filteredDataPerFilter.clipped = data;\r\n            } else {\r\n                const reduced = data.reduce(clippedFilterReudcer_rows, {\r\n                    filteredData: [],\r\n                    showClipped,\r\n                    showUnclipped,\r\n                });\r\n                const result = reduced.filteredData;\r\n    \r\n                filteredDataPerFilter.clipped = result;\r\n            }\r\n        } else {\r\n            filteredDataPerFilter.clipped = []\r\n        }\r\n    }\r\n\r\n    let filteredData = intersectFilteredData(filteredDataPerFilter, data.length);\r\n\r\n    if (!filteredData) {\r\n        filteredData = data;\r\n    }\r\n\r\n    const metrics = {\r\n        questionsCount: 0,\r\n        predictedCount: 0,\r\n        f1: 0,\r\n        em: 0\r\n    }\r\n\r\n    for (let i=0; i < filteredData.length; i++) {\r\n        const row = filteredData[i];\r\n\r\n        metrics.questionsCount += row.qa_pairs.length;\r\n\r\n        let row_predicted = 0;\r\n        let row_f1 = 0;\r\n        let row_em = 0;\r\n        if (internals.hasValidPredictions) {\r\n            for (let j=0; j < row.qa_pairs.length; j++) {\r\n                const qa_pair = row.qa_pairs[j];\r\n    \r\n                if (qa_pair.prediction) {\r\n                    row_predicted += 1;\r\n                    row_f1 += qa_pair.f1;\r\n                    row_em += qa_pair.em;\r\n                }\r\n            }\r\n        }\r\n        metrics.f1 += row_f1;\r\n        metrics.em += row_em;\r\n        metrics.predictedCount += row_predicted;\r\n\r\n        if (row_predicted > 0) {\r\n            row.f1 = row_f1 / row_predicted;\r\n            row.em = row_em / row_predicted;\r\n        }\r\n    }\r\n    if (metrics.predictedCount > 0) {\r\n        metrics.f1 /= metrics.predictedCount;\r\n        metrics.em /= metrics.predictedCount;\r\n    } else {\r\n        metrics.f1 = undefined;\r\n        metrics.em = undefined;\r\n    }\r\n\r\n\r\n    return {\r\n        filteredData,\r\n        filteredDataPerFilter,\r\n        metrics\r\n    };\r\n}\r\n\r\nfunction intersectFilteredData(filteredDataPerFilter) {\r\n    const filteredDataArr = Object.values(filteredDataPerFilter).filter(filteredData => Boolean(filteredData))\r\n    const filtersCount = filteredDataArr.length;\r\n\r\n    if (filtersCount === 0) {\r\n        return;\r\n    }\r\n\r\n    if (filtersCount === 1) {\r\n        return filteredDataArr[0];\r\n    }\r\n\r\n    const allNonEmpty = filteredDataArr.every(filteredData => filteredData.length > 0);\r\n    if (!allNonEmpty) {\r\n        return [];\r\n    }\r\n\r\n    return intersect(filteredDataArr, row => row.passage_index, intersectRows);\r\n}\r\n\r\nfunction intersectRows(sameRows) {\r\n    const qa_pairs_arr = sameRows.map(row => row.qa_pairs);\r\n\r\n    const filtered_qa_pairs = intersect(qa_pairs_arr, qa_pair => qa_pair.query_index, (sameQuestions) => {\r\n        return Object.assign({}, ...sameQuestions);\r\n    });\r\n\r\n    if (filtered_qa_pairs.length > 0) {\r\n        return Object.assign({}, ...sameRows, {'qa_pairs': filtered_qa_pairs});\r\n    }\r\n    return;\r\n}\r\n\r\n// Text Search Filtering\r\nfunction searchReudcer_rows(accumulator, row) {\r\n    const searchProps = accumulator.searchProps;\r\n    const searchText = searchProps.searchText;\r\n\r\n    const passageTextSearchValid = row.passage.toLowerCase().includes(searchText) || \r\n                                    row.passage_id.toLowerCase().includes(searchText);\r\n\r\n    let filtered_qa_pairs = row.qa_pairs;\r\n    let hasTextSearchValidQuestions = false;\r\n\r\n    if (searchProps.filterQuestions) {\r\n        filtered_qa_pairs = row.qa_pairs.filter(qa_pair => {\r\n            return isQuestionTextSearchValid(qa_pair, searchText, accumulator.hasValidPredictions);\r\n        });\r\n\r\n        hasTextSearchValidQuestions = filtered_qa_pairs.length > 0;\r\n\r\n    } else if (!passageTextSearchValid) {\r\n\r\n        hasTextSearchValidQuestions = row.qa_pairs.some(qa_pair => {\r\n            return isQuestionTextSearchValid(qa_pair, searchText, accumulator.hasValidPredictions);\r\n        });\r\n    }\r\n\r\n    const hasQuestions = filtered_qa_pairs.length > 0;\r\n    const isValid = (passageTextSearchValid && hasQuestions) || hasTextSearchValidQuestions;\r\n\r\n    if (isValid) {\r\n        accumulator.filteredData.push({\r\n            ...row,\r\n            qa_pairs: filtered_qa_pairs,\r\n        });\r\n    }\r\n    return accumulator;\r\n}\r\nfunction isQuestionTextSearchValid(qa_pair, searchText, hasValidPredictions) {\r\n    let result = qa_pair.question.toLowerCase().includes(searchText) ||\r\n                qa_pair.query_id.toLowerCase().includes(searchText);\r\n    if (result) {\r\n        return true;\r\n    }\r\n\r\n    for (let i = 0; i < qa_pair.evaluationAnswers.length; i++) {\r\n        const evaluationAnswer = qa_pair.evaluationAnswers[i];\r\n        for (let j = 0; j < evaluationAnswer.length; j++) {\r\n            result |= evaluationAnswer[j].toLowerCase().includes(searchText);\r\n\r\n            if (result) {\r\n                break;\r\n            }\r\n        }\r\n        if (result) {\r\n            break;\r\n        }\r\n    }\r\n    if (result) {\r\n        return true;\r\n    }\r\n\r\n    if (hasValidPredictions) {\r\n        const evaluationPrediction = qa_pair.evaluationPrediction;\r\n        if (evaluationPrediction) {\r\n            result = evaluationPrediction.some(x => {\r\n                return x.toLowerCase().includes(searchText)\r\n            });\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n// Type Filtering\r\nfunction typeFilterReudcer_rows(accumulator, row) {\r\n    const filteredTypes = accumulator.filteredTypes;\r\n\r\n    const { filtered_qa_pairs } = row.qa_pairs.reduce(typeFilterReudcer_qa_pairs, {\r\n        filtered_qa_pairs: [],\r\n        filteredTypes,\r\n        fields: accumulator.fields,\r\n        missingValue: accumulator.missingValue,\r\n        firstOnly: accumulator.firstOnly,\r\n        strict: accumulator.strict\r\n    });\r\n\r\n    const hasQuestions = filtered_qa_pairs.length > 0;\r\n    const isValid = hasQuestions;\r\n\r\n    if (isValid) {\r\n        accumulator.filteredData.push({\r\n            ...row,\r\n            qa_pairs: filtered_qa_pairs,\r\n        });\r\n    }\r\n    return accumulator;\r\n}\r\nfunction typeFilterReudcer_qa_pairs(accumulator, qa_pair) {\r\n    const filteredTypes = accumulator.filteredTypes;\r\n    const fields = accumulator.fields;\r\n    const firstOnly = accumulator.firstOnly;\r\n    const strict = accumulator.strict;\r\n\r\n    const foundTypes = new Set();\r\n    let typeValid = false;\r\n    for (let i = 0; i < fields.length; i++) {\r\n        const field = fields[i];\r\n\r\n        const obj = qa_pair[field] ? qa_pair[field] : accumulator.missingValue;\r\n        if (Array.isArray(obj)) {\r\n            const arr = obj;\r\n            for (let j = 0; j < arr.length; j++) {\r\n                const value = arr[j];\r\n                if (!strict) {\r\n                    typeValid = filteredTypes.includes(value.key);\r\n                    if (typeValid) {\r\n                        break;\r\n                    }\r\n                } else {\r\n                    foundTypes.add(value.key)\r\n                }\r\n\r\n                if (firstOnly) {\r\n                    break;\r\n                }\r\n            }\r\n            if (strict && foundTypes.size === filteredTypes.length && filteredTypes.every(x => foundTypes.has(x))) {\r\n                typeValid = true;\r\n            }\r\n            if (typeValid) {\r\n                break;\r\n            } \r\n        } else {\r\n            const value = obj;\r\n            typeValid = filteredTypes.includes(value.key);\r\n            if (typeValid) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    const isValid = typeValid;\r\n\r\n    if (isValid) {\r\n        accumulator.filtered_qa_pairs.push({\r\n            ...qa_pair\r\n        });\r\n    }\r\n\r\n    return accumulator;\r\n}\r\n\r\n// Range Filtering\r\nfunction rangeFilterReudcer_rows(accumulator, row) {\r\n    const range = accumulator.range;\r\n\r\n    const { filtered_qa_pairs } = row.qa_pairs.reduce(rangeFilterReudcer_qa_pairs, {\r\n        filtered_qa_pairs: [],\r\n        range,\r\n        field: accumulator.field\r\n    });\r\n\r\n    const hasQuestions = filtered_qa_pairs.length > 0;\r\n    const isValid = hasQuestions;\r\n\r\n    if (isValid) {\r\n        accumulator.filteredData.push({\r\n            ...row,\r\n            qa_pairs: filtered_qa_pairs,\r\n        });\r\n    }\r\n    return accumulator;\r\n}\r\nfunction rangeFilterReudcer_qa_pairs(accumulator, qa_pair) {\r\n    const range = accumulator.range;\r\n    const field = accumulator.field;\r\n\r\n    let rangeValid = false;\r\n    if (qa_pair[field] !== undefined) {\r\n        const value = qa_pair[field]\r\n        rangeValid = value >= range.low && value <= range.high;\r\n    } else {\r\n        rangeValid = true;\r\n    }    \r\n\r\n    const isValid = rangeValid;\r\n\r\n    if (isValid) {\r\n        accumulator.filtered_qa_pairs.push({\r\n            ...qa_pair\r\n        });\r\n    }\r\n\r\n    return accumulator;\r\n}\r\n\r\n// Clipped Filtering\r\nfunction clippedFilterReudcer_rows(accumulator, row) {\r\n    const showClipped = accumulator.showClipped;\r\n    const showUnclipped = accumulator.showUnclipped;\r\n\r\n    const { filtered_qa_pairs } = row.qa_pairs.reduce(clippedFilterReudcer_qa_pairs, {\r\n        filtered_qa_pairs: [],\r\n        showClipped,\r\n        showUnclipped,\r\n    });\r\n\r\n    const hasQuestions = filtered_qa_pairs.length > 0;\r\n    const isValid = hasQuestions;\r\n\r\n    if (isValid) {\r\n        accumulator.filteredData.push({\r\n            ...row,\r\n            qa_pairs: filtered_qa_pairs,\r\n        });\r\n    }\r\n    return accumulator;\r\n}\r\n\r\nfunction clippedFilterReudcer_qa_pairs(accumulator, qa_pair) {\r\n    const showClipped = accumulator.showClipped;\r\n    const showUnclipped = accumulator.showUnclipped;\r\n\r\n    let isValid = false;\r\n    if (showClipped) {\r\n        isValid |= qa_pair.max_passage_length !== undefined;\r\n    }\r\n    if (showUnclipped) {\r\n        isValid |= qa_pair.max_passage_length === undefined;\r\n    }\r\n\r\n    if (isValid) {\r\n        accumulator.filtered_qa_pairs.push({\r\n            ...qa_pair\r\n        });\r\n    }\r\n\r\n    return accumulator;\r\n}\r\n","import React from 'react';\r\nimport ReactTable from 'react-table'\r\nimport cloneDeep from 'clone-deep'\r\nimport 'react-table/react-table.css';\r\nimport '../../../scss/highlighter.css';\r\nimport '../../../scss/react-table.css';\r\nimport WrapDiv from './WrapDiv'\r\nimport { shouldUpdate, isChanged, areSetsEqual, \r\n    displayIndexesToViewIndex, viewIndexToDisplayIndex, viewIndexToDisplayIndexes } from '../../Utils';\r\nimport { processDataHelper, filterDataHelper } from './DataUtils';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { \r\n    Table \r\n} from 'reactstrap';\r\n\r\nconst MAX_QUESTIONS_PER_PASSAGE_ASSUMPTION = 150;\r\n\r\nconst initialInternals = {\r\n    data: undefined,\r\n    filteredData: undefined,\r\n    filteredDataPerFilter: {\r\n        answerTypes: undefined,\r\n        predictionTypes: undefined,\r\n        search: undefined,\r\n        F1Range: undefined,\r\n        EMRange: undefined,\r\n        clipped: undefined\r\n    },\r\n    predictionTypes: [],\r\n\r\n    hasValidatedAnswers: false,\r\n    hasValidPredictions: false,\r\n    metrics: undefined\r\n}\r\n\r\nconst initialState = {\r\n    page: 0,\r\n    passagesPageSize: 5,\r\n    questionsPageSize: MAX_QUESTIONS_PER_PASSAGE_ASSUMPTION,\r\n    expanded_passage_ids: [],\r\n    activeQuestions: {},\r\n    questionResized: [],\r\n    questionSorted: []\r\n};\r\n\r\nconst filterProps = ['filteredAnswerTypes', 'answerTypeFilterFirstOnly', 'answerTypeFilterStrict',\r\n                    'clippedFilter', 'unclippedFilter',\r\n                    'filteredPredictionTypes', 'searchProps', 'F1Range', 'EMRange']\r\nconst props_updateSignals = ['dataset', 'predictions', ...filterProps]\r\nconst state_updateSignals = ['page', 'passagesPageSize', 'questionsPageSize', 'expanded_passage_ids', 'activeQuestions', 'questionResized', 'questionSorted']\r\nclass ExplorerTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        renderPassageOrQuestionCell = renderPassageOrQuestionCell.bind(this);\r\n        renderPredictionCell = renderPredictionCell.bind(this);\r\n        renderAnswersCell = renderAnswersCell.bind(this);\r\n        activeQuestionChange = activeQuestionChange.bind(this);\r\n\r\n        this.clearSelectedAnswers = this.clearSelectedAnswers.bind(this);\r\n        this.expandAll = this.expandAll.bind(this);\r\n        this.collapseAll = this.collapseAll.bind(this);\r\n        this.expandedChange = this.expandedChange.bind(this);\r\n        this.getExpanded = this.getExpanded.bind(this);\r\n        this.questionResizedChange = this.questionResizedChange.bind(this);\r\n\r\n        this.processData = this.processData.bind(this);\r\n        this.filterData = this.filterData.bind(this);\r\n        this.getSortedData = this.getSortedData.bind(this);\r\n\r\n        this.pageChanged = this.pageChanged.bind(this);\r\n        this.passagesPageSizeChanged = this.passagesPageSizeChanged.bind(this);\r\n        this.questionsPageSizeChanged = this.questionsPageSizeChanged.bind(this);\r\n        this.passageSortedChange = this.passageSortedChange.bind(this);\r\n        this.questionSortedChange = this.questionSortedChange.bind(this);\r\n\r\n        this.setInternals = this.setInternals.bind(this);\r\n        this.internals = cloneDeep(initialInternals);\r\n        this.state = cloneDeep(initialState);\r\n\r\n        this.tableRef = React.createRef();\r\n    }\r\n\r\n    setInternals(newInternals) {\r\n        Object.assign(this.internals, newInternals)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.sendClearSelectedAnswersFunc(this.clearSelectedAnswers);\r\n        this.props.sendExpandAllFunc(this.expandAll);\r\n        this.props.sendCollapseAllFunc(this.collapseAll);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (isChanged(['dataset'], this.props, nextProps)) {\r\n            // reset all when the dataset is switched\r\n            this.setInternals(cloneDeep(initialInternals));\r\n            this.setState(cloneDeep(initialState));\r\n        } else if (isChanged(['predictions'], this.props, nextProps)) {\r\n             this.setInternals(cloneDeep(initialInternals));\r\n        } else if (isChanged(filterProps, this.props, nextProps)) {\r\n            // update only the changed filter\r\n            const filteredAnswerTypesChanged = isChanged(['filteredAnswerTypes', 'answerTypeFilterFirstOnly', 'answerTypeFilterStrict'], this.props, nextProps);\r\n            const filteredPredictionTypesChanged = isChanged(['filteredPredictionTypes'], this.props, nextProps);\r\n            const searchPropsChanged = isChanged(['searchProps'], this.props, nextProps);\r\n            const F1RangeChanged = isChanged(['F1Range'], this.props, nextProps);\r\n            const EMRangeChanged = isChanged(['EMRange'], this.props, nextProps);\r\n            const clippedFilterChanged = isChanged(['clippedFilter', 'unclippedFilter'], this.props, nextProps);\r\n\r\n            const refilteringRequired = filteredAnswerTypesChanged || filteredPredictionTypesChanged || \r\n                                    searchPropsChanged || F1RangeChanged || EMRangeChanged || clippedFilterChanged;\r\n\r\n            this.setInternals({\r\n                filteredData: refilteringRequired ? undefined : this.internals.filteredData\r\n            });\r\n            if (filteredAnswerTypesChanged) {\r\n                this.internals.filteredDataPerFilter.answerTypes = undefined;\r\n            }\r\n            if (filteredPredictionTypesChanged) {\r\n                this.internals.filteredDataPerFilter.predictionTypes = undefined;\r\n            }\r\n            if (searchPropsChanged) {\r\n                this.internals.filteredDataPerFilter.search = undefined;\r\n            }\r\n            if (F1RangeChanged) {\r\n                this.internals.filteredDataPerFilter.F1Range = undefined;\r\n            }\r\n            if (EMRangeChanged) {\r\n                this.internals.filteredDataPerFilter.EMRange = undefined;\r\n            }\r\n            if (clippedFilterChanged) {\r\n                this.internals.filteredDataPerFilter.clipped = undefined;\r\n            }\r\n        }\r\n        \r\n        const update = shouldUpdate(props_updateSignals, state_updateSignals, \r\n            this.props, this.state, \r\n            nextProps, nextState, \r\n            false, this.constructor.name);\r\n        return update;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (isChanged(['dataset', 'predictions'], prevProps, this.props)) {\r\n            this.props.onPredictionsTypeChanged(this.internals.predictionTypes);\r\n        }\r\n        if (isChanged(filterProps, prevProps, this.props)) {\r\n            // force updated is needed for getExpanded() to be called again,\r\n            // so it will use the filtered sorted data to find the expanded rows\r\n            this.forceUpdate(() => {\r\n                this.setState({ page: 0 });\r\n            })\r\n        }\r\n    }\r\n\r\n    pageChanged(page) {\r\n        this.setState({ page });\r\n    }\r\n\r\n    passagesPageSizeChanged(pageSize, page) {\r\n        this.setState({ passagesPageSize: pageSize, page });\r\n    }\r\n\r\n    questionsPageSizeChanged(pageSize, page) {\r\n        this.setState({ questionsPageSize: pageSize, page });\r\n    }\r\n\r\n    passageSortedChange(newSorted, column, additive) {\r\n        // force updated is needed for getExpanded() to be called,\r\n        // so it will use the filtered sorted data to find the expanded rows\r\n        this.forceUpdate();\r\n    }\r\n\r\n    questionSortedChange(newSorted, column, additive) {\r\n        this.setState({\r\n            questionSorted: newSorted\r\n        });\r\n    }\r\n\r\n    expandedChange(newExpanded, index, event) {\r\n        const pageSize = this.state.passagesPageSize;\r\n        const page = this.state.page;\r\n\r\n        const viewIndex = index[0];\r\n        const displayIndex = viewIndexToDisplayIndex(viewIndex, page, pageSize);\r\n\r\n        const sortedData = this.getSortedData();\r\n        const passage_id = sortedData[displayIndex].passage_id; \r\n        \r\n        const matchingPosition = this.state.expanded_passage_ids.indexOf(passage_id);\r\n        if (matchingPosition === -1) {\r\n            this.setState({\r\n                expanded_passage_ids: [...this.state.expanded_passage_ids, passage_id]\r\n            });\r\n        } else {\r\n            const expanded_passage_ids = [...this.state.expanded_passage_ids];\r\n            expanded_passage_ids.splice(matchingPosition, 1);\r\n            this.setState({\r\n                expanded_passage_ids\r\n            });\r\n        }\r\n    }\r\n\r\n    expandAll() {\r\n        this.setState({\r\n            expanded_passage_ids: [...this.internals.filteredData.map(row => row.passage_id)]\r\n        });\r\n    }\r\n\r\n    collapseAll() {\r\n        this.setState({\r\n            expanded_passage_ids: []\r\n        });\r\n    }\r\n\r\n    getExpanded() {\r\n        const defaultExpanded = {};\r\n        if (!this.tableRef.current) {\r\n            return defaultExpanded;\r\n        }\r\n\r\n        const sortedData = this.getSortedData();\r\n\r\n        const indexesFromSorted = new Set(sortedData.map(row => row.passage_index))\r\n        const indexesFromFiltered = new Set(this.internals.filteredData.map(row => row.passage_index))\r\n        if (!areSetsEqual(indexesFromSorted, indexesFromFiltered)) {\r\n            return defaultExpanded;\r\n        }\r\n\r\n        const pageSize = this.state.passagesPageSize;\r\n        const page = this.state.page;\r\n\r\n        const viewIndexes = [...Array(pageSize).keys()];\r\n        const displayIndexsInPage = viewIndexToDisplayIndexes(viewIndexes, page, pageSize);\r\n\r\n        const expandedDisplayIndexes = displayIndexsInPage.filter(displayIndex => {\r\n            if (displayIndex < sortedData.length) {\r\n                const passage_id = sortedData[displayIndex].passage_id;\r\n                return this.state.expanded_passage_ids.includes(passage_id)\r\n            }\r\n            return false;\r\n        });\r\n\r\n        let expandedInPage = displayIndexesToViewIndex(expandedDisplayIndexes, page, pageSize, true);\r\n\r\n        return expandedInPage;\r\n    }\r\n\r\n    questionResizedChange(newResized, event) {\r\n        this.setState({\r\n            questionResized: newResized\r\n        });\r\n    }\r\n\r\n    clearSelectedAnswers() {\r\n        this.setState({\r\n            activeQuestions: {}\r\n        });\r\n    }\r\n\r\n    processData() {\r\n        const dataset = this.props.dataset;\r\n        const predictions = this.props.predictions;\r\n\r\n        const {\r\n            data, \r\n            hasValidatedAnswers,\r\n            hasValidPredictions,\r\n            predictionTypes\r\n        } = processDataHelper(dataset, predictions);\r\n\r\n        this.setInternals({\r\n            data,\r\n            hasValidatedAnswers,\r\n            hasValidPredictions,\r\n            predictionTypes\r\n        });\r\n    }\r\n\r\n    filterData() {\r\n        const filteredAnswerTypes = this.props.filteredAnswerTypes;\r\n        const answerTypeFilterFirstOnly = this.props.answerTypeFilterFirstOnly;\r\n        const answerTypeFilterStrict = this.props.answerTypeFilterStrict;\r\n        const filteredPredictionTypes = this.props.filteredPredictionTypes;\r\n        const searchProps = this.props.searchProps;\r\n        const F1Range = this.props.F1Range;\r\n        const EMRange = this.props.EMRange;\r\n        const clippedFilter = {'showClipped': this.props.clippedFilter, 'showUnclipped': this.props.unclippedFilter};\r\n\r\n        const {\r\n            filteredData,\r\n            filteredDataPerFilter,\r\n            metrics\r\n        } = filterDataHelper(this.internals, filteredAnswerTypes, answerTypeFilterFirstOnly, answerTypeFilterStrict, \r\n                            filteredPredictionTypes, searchProps, F1Range, EMRange, clippedFilter);\r\n        \r\n        this.setInternals({\r\n            filteredData,\r\n            filteredDataPerFilter,\r\n            metrics\r\n        });\r\n    }\r\n\r\n    getSortedData() {\r\n        return this.tableRef.current.getResolvedState().sortedData;\r\n    }\r\n\r\n    render() {\r\n\r\n        if (!this.internals.data) {\r\n            this.processData();\r\n        }\r\n        \r\n        if (!this.internals.filteredData) {\r\n            this.filterData();\r\n        }        \r\n\r\n        const passage_columns = [\r\n            {\r\n                Header: '#',\r\n                id: 'passage_index',\r\n                accessor: 'passage_index',\r\n                width: 50\r\n            },\r\n            {\r\n                Header: 'Passage ID',\r\n                accessor: 'passage_id',\r\n                width: 110\r\n            }, \r\n            {\r\n                Header: 'Passage',\r\n                accessor: 'passage',\r\n                Cell: renderPassageOrQuestionCell\r\n            }, \r\n            {\r\n                Header: 'Count',\r\n                id: 'questions_count',\r\n                accessor: row => row.qa_pairs.length,\r\n                width: 50,\r\n                resizable: false\r\n            },\r\n            {\r\n                Header: 'F1',\r\n                id: 'f1',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: qa_pair => forceDecimalPlaces(qa_pair.f1, 2),\r\n                width: 40,\r\n                resizable: false\r\n            }, {\r\n                Header: 'EM',\r\n                id: 'em',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: qa_pair => forceDecimalPlaces(qa_pair.em, 2),\r\n                width: 40,\r\n                resizable: false\r\n            }\r\n        ]\r\n\r\n        const qa_columns = [\r\n            {\r\n                Header: '#',\r\n                accessor: 'query_index',\r\n                width: 40\r\n            },\r\n            {\r\n                Header: 'Question ID',\r\n                accessor: 'query_id',\r\n                width: 100\r\n            },\r\n            {\r\n                Header: 'Question',\r\n                accessor: 'question',\r\n                Cell: renderPassageOrQuestionCell\r\n            },\r\n            {\r\n                Header: 'Answer Options',\r\n                accessor: 'displayAnswers',\r\n                Cell: renderAnswersCell,\r\n                width: 150\r\n            },\r\n            {\r\n                Header: '→ Type',\r\n                id: 'answersTypes',\r\n                accessor: qa_pair => qa_pair.answersTypes,\r\n                Cell: renderAnswersTypesCell,\r\n                width: 100,\r\n                resizable: false\r\n            },\r\n            {\r\n                Header: 'Prediction',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: 'displayPrediction',\r\n                Cell: renderPredictionCell,\r\n                width: 150\r\n            },\r\n            {\r\n                Header: 'Prediction Head',\r\n                id: 'predictionType',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: qa_pair => qa_pair.predictionType ? qa_pair.predictionType.value : '',\r\n                width: 110\r\n            },\r\n            {\r\n                Header: 'F1',\r\n                id: 'f1',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: qa_pair => forceDecimalPlaces(qa_pair.f1, 2),\r\n                width: 40,\r\n                resizable: false\r\n            }, {\r\n                Header: 'EM',\r\n                id: 'em',\r\n                show: this.internals.hasValidPredictions,\r\n                accessor: qa_pair => forceDecimalPlaces(qa_pair.em, 2),\r\n                width: 40,\r\n                resizable: false\r\n            }\r\n        ]\r\n\r\n        return <div className='container-fluid'>\r\n            <div className='row justify-content-center'>\r\n                <div className='col-3'>\r\n                    <h4>\r\n                    Passage Count: {this.internals.filteredData.length.toLocaleString()}\r\n                    </h4>\r\n                </div>\r\n                <div className='col-3'>\r\n                    <h4>\r\n                        Questions Count: {this.internals.metrics.questionsCount.toLocaleString()}\r\n                    </h4>\r\n                </div>\r\n                {this.props.predictions ? <div className='col-3'>\r\n                    <h4>\r\n                        {this.internals.hasValidPredictions ?\r\n                        `Predictions Count: ${this.internals.metrics.predictedCount.toLocaleString()}` :\r\n                        'Predictions do not match the dataset'\r\n                        }\r\n                    </h4>\r\n                </div> : null}\r\n                {(this.props.predictions && this.internals.hasValidPredictions) ? <div className='col-3'>\r\n                    <h4>\r\n                        F1: {forceDecimalPlaces(this.internals.metrics.f1, 5)}, EM: {forceDecimalPlaces(this.internals.metrics.em, 5)}\r\n                    </h4>\r\n                </div> : null}\r\n            </div>\r\n            <div className='row'><div className='col-12'>\r\n                <ReactTable ref={this.tableRef} className=\"-striped-passage -highlight-passage\"\r\n                data={this.internals.filteredData} \r\n                columns={passage_columns}\r\n                minRows={0}\r\n                showPaginationTop={true}\r\n                showPaginationBottom={true}\r\n                page={this.state.page}\r\n                pageSize={this.state.passagesPageSize}\r\n                pageSizeOptions={[1, 5, 10, 20, 25, 50, 100]}\r\n                onPageChange={this.pageChanged}\r\n                onPageSizeChange={this.passagesPageSizeChanged}\r\n                collapseOnSortingChange={false}\r\n                collapseOnPageChange={false}\r\n                collapseOnDataChange={false}\r\n                onSortedChange={this.passageSortedChange}\r\n                expanded={this.getExpanded()}\r\n                onExpandedChange={(newExpanded, index, event) => this.expandedChange(newExpanded, index, event)}\r\n                SubComponent={row => {\r\n                    const qa_pairs = row.original.qa_pairs\r\n                    return (\r\n                        <ReactTable className=\"-striped-question -highlight-question\" style={{maxHeight: '400px'}}\r\n                        data={qa_pairs}\r\n                        columns={qa_columns}\r\n                        minRows={0}\r\n                        sorted={this.state.questionSorted}\r\n                        onSortedChange={this.questionSortedChange}\r\n                        resized={this.state.questionResized}\r\n                        onResizedChange={this.questionResizedChange}\r\n                        pageSize={this.state.questionsPageSize}\r\n                        pageSizeOptions={[1, 5, 10, 20, 25, MAX_QUESTIONS_PER_PASSAGE_ASSUMPTION]}\r\n                        onPageSizeChange={this.questionsPageSizeChanged}\r\n                        showPagination={false}\r\n                        getTrProps={(state, rowInfo, column, instance) => {\r\n                            return {\r\n                                onClick: (e, handleOriginal) => {\r\n                                    activeQuestionChange(rowInfo, e);\r\n\r\n                                    if (handleOriginal) {\r\n                                        handleOriginal();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }}\r\n                        />\r\n                    )\r\n                }}\r\n                />\r\n            </div></div>\r\n            </div>\r\n    }\r\n}\r\n\r\nlet renderPassageOrQuestionCell = function(props) {\r\n    let searchWords = [];\r\n    let categoryPerSearchWordIndex = undefined;\r\n    let spans = [];\r\n    let categoryPerSpanIndex = [];\r\n    let highlightClassNamePerCategory = undefined;\r\n    const activeQuestionId = this.state.activeQuestions[props.original.passage_id];\r\n    if (activeQuestionId) {\r\n        let qa_pair;\r\n        if (props.column.id === 'passage') {\r\n            qa_pair = props.original.qa_pairs\r\n                        .find(qa_pair => qa_pair.query_id === activeQuestionId);\r\n        } else {\r\n            if (activeQuestionId === props.original.query_id) {\r\n                qa_pair = props.original;\r\n            }\r\n        }\r\n        if (qa_pair) {\r\n            searchWords = [...qa_pair.evaluationAnswers[qa_pair.maximizingGroundTruthIndex]];\r\n\r\n            categoryPerSearchWordIndex = searchWords.map(() => 'gold_1')\r\n            highlightClassNamePerCategory = {'gold_1': 'highlight-gold'}\r\n\r\n            if (qa_pair.prediction) {\r\n                if (qa_pair.predictionType.key === 'arithmetic') {\r\n                    searchWords = [];\r\n                    categoryPerSearchWordIndex = [];\r\n                    highlightClassNamePerCategory = {};\r\n                }\r\n\r\n                const context = props.column.id === 'passage' ? 'p' : 'q'\r\n\r\n                highlightClassNamePerCategory['clipped_0'] = 'clipped-passage'\r\n                const max_passage_length = qa_pair.max_passage_length;\r\n                if (max_passage_length !== undefined && context === 'p') {\r\n                    spans.push([max_passage_length, props.original.passage.length]);\r\n                    categoryPerSpanIndex.push('clipped_0');\r\n                }\r\n                \r\n                if (!['counting'].includes(qa_pair.predictionType.key)) {\r\n                    const predictionSpans = qa_pair.predictionSpans;\r\n                    if (predictionSpans) {\r\n                        predictionSpans.reduce((spansAcc, span) => {\r\n                            if (span[0] === context) {\r\n                                spansAcc.push([span[1], span[2]]);\r\n                            }\r\n                            return spansAcc;\r\n                        }, spans)\r\n                        spans.forEach(() => categoryPerSpanIndex.push('focus_3'))\r\n                    }\r\n\r\n                    const evaluationPrediction = qa_pair.evaluationPrediction;\r\n                    if (evaluationPrediction) {\r\n                        searchWords.push(...evaluationPrediction);\r\n                        categoryPerSearchWordIndex.push(...(evaluationPrediction.map(x => 'prediction_2')));\r\n                    }\r\n\r\n                    highlightClassNamePerCategory['prediction_2'] = 'highlight-predicted';\r\n                    highlightClassNamePerCategory['prediction_2-focus_3'] = 'highlight-predicted-focus';\r\n                    highlightClassNamePerCategory['clipped_0-prediction_2-focus_3'] = 'highlight-predicted-focus-clipped';\r\n                    highlightClassNamePerCategory['gold_1-prediction_2'] = 'highlight-correct';\r\n                    highlightClassNamePerCategory['clipped_0-gold_1-prediction_2'] = 'highlight-correct-clipped';\r\n                    highlightClassNamePerCategory['gold_1-prediction_2-focus_3'] = 'highlight-correct-focus';\r\n                    highlightClassNamePerCategory['clipped_0-gold_1-prediction_2-focus_3'] = 'highlight-correct-focus-clipped';\r\n                } else {\r\n                    searchWords = [];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return <WrapDiv><Highlighter autoEscape={true}\r\n            searchWords={searchWords} categoryPerSearchWordIndex={categoryPerSearchWordIndex}\r\n            spans={spans} categoryPerSpanIndex={categoryPerSpanIndex}\r\n            highlightClassNamePerCategory={highlightClassNamePerCategory}\r\n            textToHighlight={props.value} paddingMultiplier={0} /></WrapDiv>\r\n}\r\nlet renderPredictionCell = function(props) {\r\n    let searchWords = [];\r\n    const highlightClassName = 'highlight-predicted-regular';\r\n    const qa_pair = props.original;\r\n    const activeQuestionId = this.state.activeQuestions[qa_pair.passage_id];\r\n    if (activeQuestionId === qa_pair.query_id) {\r\n        if (qa_pair.prediction) {\r\n            searchWords = qa_pair.evaluationPrediction;\r\n        }\r\n    }\r\n    return <WrapDiv><Highlighter autoEscape={true} highlightClassName={highlightClassName} searchWords={searchWords} textToHighlight={props.value || ''} /></WrapDiv>\r\n}\r\nlet renderAnswersCell = function(props) {\r\n    let searchWords = [];\r\n    const highlightClassName = 'highlight-gold';\r\n    const activeQuestionId = this.state.activeQuestions[props.original.passage_id];\r\n    if (activeQuestionId === props.original.query_id) {        \r\n        searchWords = props.original.evaluationAnswers[props.original.maximizingGroundTruthIndex];\r\n    }\r\n    return <Table style={{height: '100%'}} striped>\r\n        <tbody>\r\n            {props.value.map((answer, index) => {\r\n                return <tr key={index}>\r\n                    <td style={{whiteSpace: 'pre-wrap', padding: 0, 'borderTop': 0}}>\r\n                        <WrapDiv><Highlighter autoEscape={true} highlightClassName={highlightClassName} \r\n                            searchWords={props.original.maximizingGroundTruthIndex === index ? searchWords : []} \r\n                            textToHighlight={answer} /></WrapDiv>\r\n                    </td>\r\n                </tr>\r\n            })}\r\n        </tbody>\r\n    </Table>\r\n}\r\nlet renderAnswersTypesCell = function(props) {\r\n    return <Table style={{height: '100%'}} striped>\r\n        <tbody>\r\n            {props.value.map((answerType, index) => \r\n                <tr key={index}>\r\n                    <td style={{whiteSpace: 'pre-wrap', padding: 0, 'borderTop': 0}}>\r\n                        {answerType.value}\r\n                    </td>\r\n                </tr>\r\n            )}\r\n        </tbody>\r\n    </Table>\r\n}\r\n\r\nlet activeQuestionChange = function(rowInfo, e) {\r\n    const passage_id = rowInfo.original.passage_id\r\n    const query_id = rowInfo.original.query_id\r\n\r\n    if (this.state.activeQuestions[passage_id] === query_id) {\r\n        const activeQuestions = {...this.state.activeQuestions};\r\n        delete activeQuestions[passage_id]\r\n        this.setState({\r\n            activeQuestions\r\n        });\r\n    } else {\r\n        this.setState({\r\n            activeQuestions: {\r\n                //...this.state.activeQuestions, // controls whether to allow selection of multiple questions accross different paragrahps\r\n                [passage_id]: query_id\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction forceDecimalPlaces(num, places) {\r\n    return num !== undefined ? parseFloat(Math.round(num * Math.pow(10, places)) / Math.pow(10, places)).toFixed(places) : undefined;\r\n}\r\n\r\nexport default ExplorerTable;\r\n","import React from 'react';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n} from 'reactstrap';\r\nimport { shouldUpdate } from './../Utils';\r\nimport ExplorerSettings from './explorer-settings/ExplorerSettings';\r\nimport ExplorerTable from './explorer-table/ExplorerTable';\r\n\r\nconst props_updateSignals = []\r\nconst state_updateSignals = ['dataset', 'predictions', 'filteredAnswerTypes', 'answerTypeFilterFirstOnly', \r\n                            'answerTypeFilterStrict', 'clippedFilter', 'unclippedFilter',\r\n                            'predictionTypes', 'filteredPredictionTypes', 'searchProps', \r\n                            'F1Range', 'EMRange',\r\n                            'navbarSticky', 'isOpen']\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.settingsChange = this.settingsChange.bind(this);\r\n        this.getClearSelectedAnswersFunc = this.getClearSelectedAnswersFunc.bind(this);\r\n        this.getExpandAllFunc = this.getExpandAllFunc.bind(this);\r\n        this.getCollapseAllFunc = this.getCollapseAllFunc.bind(this);\r\n        this.predictionTypesChanged = this.predictionTypesChanged.bind(this);\r\n        this.toggleMenu = this.toggleMenu.bind(this);\r\n        this.state = {\r\n            useLocalDataset: true,\r\n            allowSourceSelection: false,\r\n            filteredAnswerTypes: ['multi_span', 'single_span', 'number', 'date'],\r\n            answerTypeFilterFirstOnly: true,\r\n            answerTypeFilterStrict: false,\r\n            clippedFilter: true,\r\n            unclippedFilter: true,\r\n            predictionTypes: [],\r\n            filteredPredictionTypes: [],\r\n            instantSearch: true,\r\n            searchProps: {\r\n                searchText: '',\r\n                filterQuestions: false\r\n            },\r\n            F1Range: { low: 0.0, high: 1.0 },\r\n            EMRange: { low: 0.0, high: 1.0 },\r\n            navbarSticky: undefined, // can be 'top' or undefined\r\n            isOpen: true,\r\n            showNavbarImage: false,\r\n            // ^ startup settings available for configuration\r\n\r\n            dataset: undefined,\r\n            predictions: undefined,\r\n            clearSelectedAnswersFunc: undefined,\r\n            expandAllFunc: undefined,\r\n            collapseAll: undefined\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        const update = shouldUpdate(props_updateSignals, state_updateSignals, \r\n            this.props, this.state, \r\n            nextProps, nextState, \r\n            false, this.constructor.name);\r\n        return update;\r\n    }\r\n\r\n    settingsChange(settings) {\r\n        this.setState({\r\n            filteredAnswerTypes: settings.filteredAnswerTypes,\r\n            answerTypeFilterFirstOnly: settings.answerTypeFilterFirstOnly,\r\n            answerTypeFilterStrict: settings.answerTypeFilterStrict,\r\n            clippedFilter: settings.clippedFilter,\r\n            unclippedFilter: settings.unclippedFilter,\r\n            filteredPredictionTypes: settings.filteredPredictionTypes,\r\n            searchProps: settings.searchProps,\r\n            dataset: settings.dataset,\r\n            predictions: settings.predictions,\r\n            F1Range: settings.F1Range,\r\n            EMRange: settings.EMRange\r\n        });\r\n    }\r\n    \r\n    getClearSelectedAnswersFunc(func) {\r\n        this.setState({ clearSelectedAnswersFunc: func });\r\n    }\r\n\r\n    getExpandAllFunc(func) {\r\n        this.setState({ expandAllFunc: func });\r\n    }\r\n\r\n    getCollapseAllFunc(func) {\r\n        this.setState({ collapseAllFunc: func });\r\n    }\r\n\r\n    predictionTypesChanged(predictionTypes) {\r\n        this.setState({ predictionTypes });\r\n    }\r\n\r\n    toggleMenu() {\r\n        this.setState({\r\n          isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n                    <Navbar color=\"light\" light sticky={this.state.navbarSticky} \r\n                            style={{borderBottom: '1px solid rgba(0,0,0,0.15)'}}>\r\n                        <div style={{width: '100%'}}>\r\n                            {this.state.showNavbarImage ? \r\n                            <div className='navbar-brand'>\r\n                                {<a target='_blank' rel='noopener noreferrer' href='https://allennlp.org/drop'>\r\n                                    <img style={{paddingRight: '15px', marginBottom: '3px'}} src='https://allennlp.org/assets/allennlp-logo-color.png' height='14' alt='' />\r\n                                </a>}\r\n                                <button className='fakeLink' onClick={() => {this.setState({ navbarSticky: this.state.navbarSticky === 'top' ? undefined : 'top' })}}>DROP Explorer</button>\r\n                            </div> : \r\n                            <NavbarBrand onClick={() => {this.setState({ navbarSticky: this.state.navbarSticky === 'top' ? undefined : 'top' })}}>\r\n                                DROP Explorer\r\n                            </NavbarBrand>}\r\n                            <NavbarToggler style={{float: 'right', marginTop: '0.25rem'}} onClick={this.toggleMenu} />\r\n                        </div>\r\n                        <Collapse isOpen={this.state.isOpen} navbar>\r\n                            <ExplorerSettings onChange={this.settingsChange}\r\n                                useLocalDataset={this.state.useLocalDataset}\r\n                                allowSourceSelection={this.state.allowSourceSelection}\r\n                                expandAllFunc={this.state.expandAllFunc}\r\n                                collapseAllFunc={this.state.collapseAllFunc}\r\n                                filteredAnswerTypes={this.state.filteredAnswerTypes}\r\n                                answerTypeFilterFirstOnly={this.state.answerTypeFilterFirstOnly}\r\n                                answerTypeFilterStrict={this.state.answerTypeFilterStrict}\r\n                                clippedFilter={this.state.clippedFilter}\r\n                                unclippedFilter={this.state.unclippedFilter}\r\n                                filteredPredictionTypes={this.state.filteredPredictionTypes}\r\n                                predictionTypes={this.state.predictionTypes}\r\n                                instantSearch={this.state.instantSearch}\r\n                                searchProps={this.state.searchProps}\r\n                                F1Range={this.state.F1Range}\r\n                                EMRange={this.state.EMRange}\r\n                                clearSelectedAnswersFunc={this.state.clearSelectedAnswersFunc} />\r\n                        </Collapse>\r\n                    </Navbar>\r\n                    <ExplorerTable \r\n                        dataset={this.state.dataset} \r\n                        predictions={this.state.predictions}\r\n                        filteredAnswerTypes={this.state.filteredAnswerTypes}\r\n                        answerTypeFilterFirstOnly={this.state.answerTypeFilterFirstOnly}\r\n                        answerTypeFilterStrict={this.state.answerTypeFilterStrict}\r\n                        clippedFilter={this.state.clippedFilter}\r\n                        unclippedFilter={this.state.unclippedFilter}\r\n                        filteredPredictionTypes={this.state.filteredPredictionTypes}\r\n                        searchProps={this.state.searchProps}\r\n                        F1Range={this.state.F1Range}\r\n                        EMRange={this.state.EMRange}\r\n                        sendClearSelectedAnswersFunc={this.getClearSelectedAnswersFunc}\r\n                        sendExpandAllFunc={this.getExpandAllFunc}\r\n                        sendCollapseAllFunc={this.getCollapseAllFunc}\r\n                        onPredictionsTypeChanged={this.predictionTypesChanged}\r\n                    />\r\n                </div>\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './scss/custom.scss';\r\nimport ModelComponent from './model/ModelComponent';\r\nimport App from './components/app/App';\r\n\r\n// Copied from http:jquery-howto.blogspot.com/2009/09/get-url-parameters-values-with-jquery.html\r\nfunction getUrlVars() {\r\n    var vars = [], hash;\r\n    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');\r\n    for (var i = 0; i < hashes.length; i++) {\r\n      hash = hashes[i].split('=');\r\n      vars.push(hash[0]);\r\n      vars[hash[0]] = hash[1];\r\n    }\r\n    return vars;\r\n}\r\n  \r\nvar urlParams = getUrlVars();\r\n  \r\nswitch (urlParams[\"startPage\"]) {\r\n    case \"model\":\r\n        ReactDOM.render(<ModelComponent />, document.getElementById('root'));\r\n        break;\r\n\r\n    case undefined:\r\n    default:\r\n        ReactDOM.render(<App />, document.getElementById('root'));\r\n        break;\r\n}\r\n"],"sourceRoot":""}